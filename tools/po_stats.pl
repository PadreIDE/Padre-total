#!/usr/bin/perl
use strict;
use warnings;

use Cwd                   qw{ cwd };
use File::Spec::Functions qw{ catfile catdir };
use File::Find::Rule;
use File::Basename        qw{ basename };
use Env                   qw{ LANG };
use Getopt::Long          qw{ GetOptions };
#use Locale::PO;

my $text;
my $html;
my $dir;
my $share;
my $details;
GetOptions(
	'text'    => \$text, 
	'html'    => \$html, 
	'dir=s'   => \$dir, 
	'share=s' => \$share,
	'details' => \$details,
	) or usage();
usage() if not $text and not $html;
usage("Invalid share directory '$share'") if $share and not -e $share;

$LANG = 'C';

my $cwd       = cwd;

if (not $share) {
	$share = catdir ( $cwd, 'share' );
	if (not -e $share) {
		($share) = File::Find::Rule->directory()->name('share')->in(catdir( $cwd, 'lib'));
	}
}
usage("Could not find a 'share' directory") if not $share or not -e $share;

my $localedir = catdir ( $share, 'locale' );

my $pot_file  = catfile( $localedir, 'messages.pot' );
my $text_report_file = catfile($cwd, 'po_report.txt');

usage("Can't find locale directory '$localedir'.\nPlease run this tool on the 'Padre' base directory")
	if not -d $localedir;
if ($text) {
	chdir $localedir;
	my ($header, $report) = collect_report();
	save_text_report($header, $report, $text_report_file);
} elsif ($html) {
	usage("--dir was missing") if not $dir;
	usage("--dir $dir does not exist") if -d $dir;
}





sub collect_report {
	my $header  = "Generated by $0 on " . localtime() . "\n\n";
	$header    .= "Language  Errors\n";
	my $report = '';	my @po_files  = glob '*.po';
	foreach my $po_file (sort @po_files) {
		system "msgcmp $po_file messages.pot 2> err";
		$report .= "\n------------------\n";
		$report .= basename($po_file) . "\n\n";
		my $errors = ''; 
		if (open my $fh, '<', 'err') {
			local $/ = undef;
			my $data = <$fh>;
			if ($data =~ /msgcmp: found (\d+) fatal errors?/) {
				$report .= "Fatal errors: $1\n\n";
				$errors = $1;
			}
			$report .= $data;
		}
		$header .= sprintf("%-10s %s\n", substr(basename($po_file), 0, -3), $errors);
		unlink 'err';
	}
	return ($header, $report);
}


sub save_text_report {
	my ($header, $report, $text_report_file) = @_;
	open my $fh, '>', $text_report_file or die;
	print {$fh} $header;
	if ($details) {
		print {$fh} $report;
	}
	print "file 'po_report.txt' generated.\n";
}



sub usage {
	my $msg = shift;
	print "$msg\n\n" if defined $msg;
	print <<"END_USAGE";
Usage: $0
        --text 
        --html --dir DIR
	--share    path to the share directory (optional)
	--details
END_USAGE

	exit 1;
}

