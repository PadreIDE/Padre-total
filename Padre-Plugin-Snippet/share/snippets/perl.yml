
---
#
# Perl snippets bundle for Padre::Plugin::Snippet
# Written by Ahmad M. Zawawi (azawawi)
#
# Adapted from snipMate vim plugin by Michael Sanders (msanders)
# https://github.com/msanders/snipmate.vim/blob/master/snippets/perl.snippets
# snipMate is released under the MIT license
# 

# #!/usr/bin/perl
\#!: #!/usr/bin/perl

# Hash Pointer
.: =>

# Function
sub: |
  sub ${1:function_name} {
    ${2:#body ...}
  }

# Conditional
if: |
  if (${1}) {
    ${2:# body...}
  }

# Conditional if..else
ife: |
  if (${1}) {
    ${2:# body...}
  }
  else {
    ${3:# else...}
  }

# Conditional if..elsif..else
ifee: |
  if (${1}) {
    ${2:# body...}
  }
  elsif (${3}) {
    ${4:# elsif...}
  }
  else {
    ${5:# else...}
  }

# Conditional One-line
xif: |
  ${1:expression} if ${2:condition};

# Unless conditional
unless: |
  unless (${1}) {
    ${2:# body...}
  }

# Unless conditional One-line
xunless: |
  ${1:expression} unless ${2:condition};

# Try/Except
eval: |
  eval {
    ${1:# do something risky...}
  };
  if ($@) {
    ${2:# handle failure...}
  }

# While Loop
wh: |
  while (${1}) {
    ${2:# body...}
  }

# While Loop One-line
xwh: |
  ${1:expression} while ${2:condition};

# C-style For Loop
cfor: |
  for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
    ${4:# body...}
  }

# For loop one-line
xfor: |
  ${1:expression} for @${2:array};

# Foreach Loop
for: |
  foreach my $${1:x} (@${2:array}) {
    ${3:# body...}
  }

# Foreach Loop One-line
fore: |
  ${1:expression} foreach @${2:array};

# Package
cl: |
  package ${1:ClassName};
  
  use base qw(${2:ParentClass});
  
  sub new {
    my $class = shift;
    $class = ref $class if ref $class;
    my $self = bless {}, $class;
    $self;
  }
  
  1;

# Read File
slurp: |
  my $${1:var};
  { local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }

# A new instance of a class
new: my $${1:instance} = ${2:ClassName}->new;

# Here-doc string
here: |
  <<${1:'}${2:...}$1${3:;}
  ${4:content}
  $2

#pod here for testing only see perl_pod.yml
# can we insert perl vars in perl_pod?

pod: |
  =pod
  
  =head1 NAME
 
  ${1:module name} - ${2:One line description of module's purpose here, ie; Padare The Perl IDE}
 
 
  =head1 VERSION
 
  This document describes $1 version ${3:0.01}
  
  
  =head1 AUTHOR
 
  ${4:your name}  E<lt>${5:your e-mail address}E<gt>
  
  
  =head1 LICENCE AND COPYRIGHT
 
  Copyright (c) ${6:year}, $4 E<lt>$5E<gt>. All rights reserved.
 
  This module is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself. See L<perlartistic>.
  
  =cut
  

# pod for a plugin p-p-x
podp: |
  =pod
  
  =head1 NAME
 
  ${1:module name} - ${2:One line description of module's purpose here, ie; Padare The Perl IDE}
 
 
  =head1 VERSION
 
  This document describes $1 version ${3:0.01}
  
  
  =head1 DEPENDENCIES
  
  ${4:None.}
  
  
  =head1 BUGS AND LIMITATIONS
  
  ${5:No bugs have been reported.}
  
  
  =head1 SUPPORT
  
  You can find documentation for this module with the perldoc command.
  
    perldoc $1
  
  You can also look for information at:
  
  =over 4
  
  =item * RT: CPAN's request tracker
  
  L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=${6:Foo-Bar}>
  
  =item * AnnoCPAN: Annotated CPAN documentation
  
  L<http://annocpan.org/dist/$6>
  
  =item * CPAN Ratings
  
  L<http://cpanratings.perl.org/d/$6>
  
  =item * Search CPAN
  
  L<http://search.cpan.org/dist/$6/>
  
  =back
  
  
  =head1 AUTHOR
 
  ${7:your name}  E<lt>${8:your e-mail address}E<gt>
  
  
  =head1 LICENCE AND COPYRIGHT
 
  Copyright (c) $year, $7 E<lt>$8E<gt>. All rights reserved.
 
  This module is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself. See L<perlartistic>.
  
  =cut
  




