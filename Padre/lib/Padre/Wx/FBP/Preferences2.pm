package Padre::Wx::FBP::Preferences2;

# This module was generated by Padre::Plugin::FormBuilder::Perl.
# To change this module, edit the original .fbp file and regenerate.
# DO NOT MODIFY BY HAND!

use 5.008;
use strict;
use warnings;
use Padre::Wx             ();
use Padre::Wx::Role::Main ();

our $VERSION = '0.01';
our @ISA     = qw{
	Padre::Wx::Role::Main
	Wx::Dialog
};

sub new {
	my $class  = shift;
	my $parent = shift;

	my $self = $class->SUPER::new(
		$parent,
		-1,
		Wx::gettext("Padre Preferences"),
		Wx::wxDefaultPosition,
		[ -1, -1 ],
		Wx::wxDEFAULT_DIALOG_STYLE | Wx::wxRESIZE_BORDER,
	);

	$self->{m_listbook1} = Wx::Listbook->new(
		$self,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxLB_DEFAULT,
	);

	my $m_panel2 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	$self->{editor_wordwrap} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Default word wrap on for each file"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{swap_ctrl_tab_alt_right} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Use panel order for Ctrl-Tab (not usage history)"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox8} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Clean up file content on saving (for supported document types)"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox9} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Auto-fold POD markup when code folding enabled"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox10} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Perl beginner mode"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText41 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Open files"),
	);

	$self->{m_choice2} = Wx::Choice->new(
		$m_panel2,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		[],
	);
	$self->{m_choice2}->SetSelection(0);

	my $m_staticText5 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Default projects directory"),
	);

	$self->{m_dirPicker1} = Wx::DirPickerCtrl->new(
		$m_panel2,
		-1,
		"",
		"Select a folder",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxDIRP_DEFAULT_STYLE,
	);

	$self->{m_checkBox11} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Open files in existing Padre"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText6 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Methods order"),
	);

	$self->{m_choice3} = Wx::Choice->new(
		$m_panel2,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		[],
	);
	$self->{m_choice3}->SetSelection(0);

	my $m_staticText7 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Prefered language for error diagnostics"),
	);

	$self->{m_choice31} = Wx::Choice->new(
		$m_panel2,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		[],
	);
	$self->{m_choice31}->SetSelection(0);

	my $m_staticText8 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Default line ending"),
	);

	$self->{m_choice7} = Wx::Choice->new(
		$m_panel2,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		[],
	);
	$self->{m_choice7}->SetSelection(0);

	my $m_staticText9 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Check for file updates on disk every (seconds)"),
	);

	$self->{m_spinCtrl3} = Wx::SpinCtrl->new(
		$m_panel2,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		0,
		10,
		0,
	);

	my $m_staticText10 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Cursor blink rate (milliseconds - 0 = off, 500 = default)"),
	);

	$self->{m_textCtrl1} = Wx::TextCtrl->new(
		$m_panel2,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox91} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Autocomplete brackets"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox101} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Add another closing bracket if there already is one"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox111} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Enable Smart highlighting while typing"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox12} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Shorten the common path in window list"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox13} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Use X11 middle button paste style"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText11 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("RegExp for TODO panel"),
	);

	$self->{m_textCtrl2} = Wx::TextCtrl->new(
		$m_panel2,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox14} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Use splash screen"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_panel3 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	my $m_staticText12 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Window title"),
	);

	$self->{m_textCtrl3} = Wx::TextCtrl->new(
		$m_panel3,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText13 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Statusbar"),
	);

	$self->{m_textCtrl4} = Wx::TextCtrl->new(
		$m_panel3,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText14 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext(
			"%b  Current file's basename\n%f   Current filename\n%m  Indication if file is modified\n%s   Name of the current subroutine"
		),
	);

	my $m_staticText15 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext(
			"%d  Current file's dirname\n%F  Current filename relative to project\n%p  Project name\n%v  Padre version"
		),
	);

	$self->{m_checkBox15} = Wx::CheckBox->new(
		$m_panel3,
		-1,
		Wx::gettext("Coloured text in output window (ANSI)"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox16} = Wx::CheckBox->new(
		$m_panel3,
		-1,
		Wx::gettext("Show low priority info messages on status bar (not in a popup)"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox17} = Wx::CheckBox->new(
		$m_panel3,
		-1,
		Wx::gettext("Show right margin at column"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_textCtrl5} = Wx::TextCtrl->new(
		$m_panel3,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText17 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Editor Font"),
	);

	$self->{m_fontPicker1} = Wx::FontPickerCtrl->new(
		$m_panel3,
		-1,
		Wx::wxNullFont,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxFNTP_DEFAULT_STYLE,
	);
	$self->{m_fontPicker1}->SetMaxPointSize(100);

	my $m_staticText18 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Editor Current Line Background Colour"),
	);

	$self->{m_colourPicker1} = Wx::ColourPickerCtrl->new(
		$m_panel3,
		-1,
		Wx::Colour->new( 0, 0, 0 ),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxCLRP_DEFAULT_STYLE,
	);

	my $m_panel4 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	my $m_staticText34 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Perl interpreter"),
	);

	$self->{m_textCtrl6} = Wx::TextCtrl->new(
		$m_panel4,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText35 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Interpreter arguments"),
	);

	$self->{m_textCtrl7} = Wx::TextCtrl->new(
		$m_panel4,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText36 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext(
			"Include directory:  -I<dir>\nEnable tainting checks:  -T\nEnable many useful warnings:  -w\nEnable all warnings:  -W\nDisable all warnings:  -X"
		),
	);

	my $m_staticText37 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Script arguments"),
	);

	$self->{m_textCtrl8} = Wx::TextCtrl->new(
		$m_panel4,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox22} = Wx::CheckBox->new(
		$m_panel4,
		-1,
		Wx::gettext("Use external window for execution"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_panel5 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	my $m_staticText19 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("File Type"),
	);

	$self->{m_choice8} = Wx::Choice->new(
		$m_panel5,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		[],
	);
	$self->{m_choice8}->SetSelection(0);

	my $m_staticText20 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Highlighter"),
	);

	$self->{m_choice9} = Wx::Choice->new(
		$m_panel5,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		[],
	);
	$self->{m_choice9}->SetSelection(0);

	my $m_staticText21 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Description"),
	);

	$self->{m_staticText22} = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Fast but might be out of date"),
	);

	my $m_staticText23 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Content type"),
	);

	$self->{m_staticText24} = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("application/x-perl"),
	);

	my $m_panel1 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	$self->{guess_indentation} = Wx::Button->new(
		$m_panel1,
		-1,
		Wx::gettext("Guess from Current Document"),
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{guess_indentation},
		sub {
			shift->guess_indentation(@_);
		},
	);

	$self->{m_checkBox5} = Wx::CheckBox->new(
		$m_panel1,
		-1,
		Wx::gettext("Automatic indentation style detection"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox7} = Wx::CheckBox->new(
		$m_panel1,
		-1,
		Wx::gettext("Use Tabs"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText2 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Tab display size (in spaces)"),
	);

	$self->{m_spinCtrl1} = Wx::SpinCtrl->new(
		$m_panel1,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		1,
		16,
		8,
	);

	my $m_staticText3 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Indentation width (in columns)"),
	);

	$self->{m_spinCtrl2} = Wx::SpinCtrl->new(
		$m_panel1,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		1,
		10,
		8,
	);

	my $m_staticText4 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Autoindent"),
	);

	$self->{m_choice1} = Wx::Choice->new(
		$m_panel1,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		[],
	);
	$self->{m_choice1}->SetSelection(0);

	my $m_panel6 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	my $m_staticText25 = Wx::StaticText->new(
		$m_panel6,
		-1,
		Wx::gettext("Diff tool"),
	);

	$self->{m_filePicker1} = Wx::FilePickerCtrl->new(
		$m_panel6,
		-1,
		"",
		"Select a file",
		"*.*",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxFLP_DEFAULT_STYLE,
	);

	my $m_staticText26 = Wx::StaticText->new(
		$m_panel6,
		-1,
		Wx::gettext("Perl ctags file"),
	);

	$self->{m_filePicker2} = Wx::FilePickerCtrl->new(
		$m_panel6,
		-1,
		"",
		"Select a file",
		"*.*",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxFLP_DEFAULT_STYLE,
	);

	my $m_panel8 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	my $m_staticText30 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("File access via HTTP"),
	);

	my $m_staticText31 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Timeout (in seconds)"),
	);

	$self->{m_spinCtrl7} = Wx::SpinCtrl->new(
		$m_panel8,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		0,
		10,
		0,
	);

	my $m_staticText32 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("File access via FTP"),
	);

	my $m_staticText33 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Timeout (in seconds)"),
	);

	$self->{m_spinCtrl8} = Wx::SpinCtrl->new(
		$m_panel8,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		0,
		10,
		0,
	);

	$self->{m_checkBox21} = Wx::CheckBox->new(
		$m_panel8,
		-1,
		Wx::gettext("Use FTP passive mode"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_panel7 = Wx::Panel->new(
		$self->{m_listbook1},
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxTAB_TRAVERSAL,
	);

	$self->{m_checkBox18} = Wx::CheckBox->new(
		$m_panel7,
		-1,
		Wx::gettext("Autocomplete always while typing"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox19} = Wx::CheckBox->new(
		$m_panel7,
		-1,
		Wx::gettext("Autocomplete new methods in packages"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	$self->{m_checkBox20} = Wx::CheckBox->new(
		$m_panel7,
		-1,
		Wx::gettext("Autocomplete new functions in scripts"),
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
	);

	my $m_staticText27 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Minimum length of suggestions"),
	);

	$self->{m_spinCtrl4} = Wx::SpinCtrl->new(
		$m_panel7,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		0,
		10,
		0,
	);

	my $m_staticText28 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Maximum number of suggestions"),
	);

	$self->{m_spinCtrl5} = Wx::SpinCtrl->new(
		$m_panel7,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		0,
		10,
		0,
	);

	my $m_staticText29 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Minimum characters for autocomplete"),
	);

	$self->{m_spinCtrl6} = Wx::SpinCtrl->new(
		$m_panel7,
		-1,
		"",
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxSP_ARROW_KEYS,
		0,
		10,
		0,
	);

	my $m_staticline1 = Wx::StaticLine->new(
		$self,
		-1,
		Wx::wxDefaultPosition,
		Wx::wxDefaultSize,
		Wx::wxLI_HORIZONTAL,
	);

	$self->{save} = Wx::Button->new(
		$self,
		Wx::wxID_OK,
		Wx::gettext("Save"),
	);
	$self->{save}->SetDefault;

	$self->{advanced} = Wx::Button->new(
		$self,
		Wx::wxID_OK,
		Wx::gettext("Advanced..."),
	);

	$self->{cancel} = Wx::Button->new(
		$self,
		Wx::wxID_CANCEL,
		Wx::gettext("Cancel"),
	);

	my $fgSizer3 = Wx::FlexGridSizer->new( 20, 2, 0, 10 );
	$fgSizer3->AddGrowableCol(0);
	$fgSizer3->AddGrowableCol(1);
	$fgSizer3->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer3->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_NONE);
	$fgSizer3->Add( $self->{editor_wordwrap}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{swap_ctrl_tab_alt_right}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox8}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox9}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox10}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $m_staticText41, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_choice2}, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND,
		5 );
	$fgSizer3->Add( $m_staticText5, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_dirPicker1}, 0,
		Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox11}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $m_staticText6, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_choice3}, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND,
		5 );
	$fgSizer3->Add( $m_staticText7, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_choice31}, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND,
		5 );
	$fgSizer3->Add( $m_staticText8, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_choice7}, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND,
		5 );
	$fgSizer3->Add( $m_staticText9, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_spinCtrl3}, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND,
		5 );
	$fgSizer3->Add( $m_staticText10, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_textCtrl1}, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND,
		5 );
	$fgSizer3->Add( $self->{m_checkBox91}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox101}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox111}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox12}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $self->{m_checkBox13}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer3->Add( $m_staticText11, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( $self->{m_textCtrl2}, 0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALIGN_RIGHT | Wx::wxALL | Wx::wxEXPAND,
		5 );
	$fgSizer3->Add( $self->{m_checkBox14}, 0, Wx::wxALL, 5 );
	$fgSizer3->Add( 0, 0, 1, Wx::wxEXPAND, 5 );

	$m_panel2->SetSizer($fgSizer3);
	$m_panel2->Layout;
	$fgSizer3->Fit($m_panel2);

	my $fgSizer4 = Wx::FlexGridSizer->new( 8, 2, 0, 10 );
	$fgSizer4->AddGrowableCol(0);
	$fgSizer4->AddGrowableCol(1);
	$fgSizer4->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer4->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_SPECIFIED);
	$fgSizer4->Add( $m_staticText12,       0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer4->Add( $self->{m_textCtrl3},  0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer4->Add( $m_staticText13,       0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer4->Add( $self->{m_textCtrl4},  0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer4->Add( $m_staticText14,       0, Wx::wxALL,                               5 );
	$fgSizer4->Add( $m_staticText15,       0, Wx::wxALL,                               5 );
	$fgSizer4->Add( $self->{m_checkBox15}, 0, Wx::wxALL,                               5 );
	$fgSizer4->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer4->Add( $self->{m_checkBox16}, 0, Wx::wxALL, 5 );
	$fgSizer4->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer4->Add( $self->{m_checkBox17},    0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer4->Add( $self->{m_textCtrl5},     0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer4->Add( $m_staticText17,          0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer4->Add( $self->{m_fontPicker1},   0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer4->Add( $m_staticText18,          0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer4->Add( $self->{m_colourPicker1}, 0, Wx::wxALL | Wx::wxEXPAND,                5 );

	$m_panel3->SetSizer($fgSizer4);
	$m_panel3->Layout;
	$fgSizer4->Fit($m_panel3);

	my $fgSizer9 = Wx::FlexGridSizer->new( 2, 2, 0, 0 );
	$fgSizer9->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer9->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_SPECIFIED);
	$fgSizer9->Add( $m_staticText34,      0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer9->Add( $self->{m_textCtrl6}, 0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer9->Add( $m_staticText35,      0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer9->Add( $self->{m_textCtrl7}, 0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer9->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer9->Add( $m_staticText36,       0, Wx::wxALL,                               5 );
	$fgSizer9->Add( $m_staticText37,       0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer9->Add( $self->{m_textCtrl8},  0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer9->Add( $self->{m_checkBox22}, 0, Wx::wxALL,                               5 );

	$m_panel4->SetSizer($fgSizer9);
	$m_panel4->Layout;
	$fgSizer9->Fit($m_panel4);

	my $fgSizer5 = Wx::FlexGridSizer->new( 4, 2, 0, 0 );
	$fgSizer5->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer5->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_SPECIFIED);
	$fgSizer5->Add( $m_staticText19,         0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer5->Add( $self->{m_choice8},      0, Wx::wxALL,                               5 );
	$fgSizer5->Add( $m_staticText20,         0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer5->Add( $self->{m_choice9},      0, Wx::wxALL,                               5 );
	$fgSizer5->Add( $m_staticText21,         0, Wx::wxALL,                               5 );
	$fgSizer5->Add( $self->{m_staticText22}, 0, Wx::wxALL,                               5 );
	$fgSizer5->Add( $m_staticText23,         0, Wx::wxALL,                               5 );
	$fgSizer5->Add( $self->{m_staticText24}, 0, Wx::wxALL,                               5 );

	$m_panel5->SetSizer($fgSizer5);
	$m_panel5->Layout;
	$fgSizer5->Fit($m_panel5);

	my $fgSizer2 = Wx::FlexGridSizer->new( 1, 1, 0, 0 );
	$fgSizer2->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer2->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_ALL);
	$fgSizer2->Add( $self->{guess_indentation}, 0, Wx::wxALL, 5 );
	$fgSizer2->Add( $self->{m_checkBox5},       0, Wx::wxALL, 5 );
	$fgSizer2->Add( $self->{m_checkBox7},       0, Wx::wxALL, 5 );
	$fgSizer2->Add( $m_staticText2,             0, Wx::wxALL, 5 );
	$fgSizer2->Add( $self->{m_spinCtrl1},       0, Wx::wxALL, 5 );
	$fgSizer2->Add( $m_staticText3,             0, Wx::wxALL, 5 );
	$fgSizer2->Add( $self->{m_spinCtrl2},       0, Wx::wxALL, 5 );
	$fgSizer2->Add( $m_staticText4,             0, Wx::wxALL, 5 );
	$fgSizer2->Add( $self->{m_choice1},         0, Wx::wxALL, 5 );

	$m_panel1->SetSizer($fgSizer2);
	$m_panel1->Layout;
	$fgSizer2->Fit($m_panel1);

	my $fgSizer6 = Wx::FlexGridSizer->new( 2, 2, 0, 10 );
	$fgSizer6->AddGrowableCol(1);
	$fgSizer6->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer6->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_SPECIFIED);
	$fgSizer6->Add( $m_staticText25,        0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer6->Add( $self->{m_filePicker1}, 0, Wx::wxALL | Wx::wxEXPAND,                5 );
	$fgSizer6->Add( $m_staticText26,        0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer6->Add( $self->{m_filePicker2}, 0, Wx::wxALL | Wx::wxEXPAND,                5 );

	$m_panel6->SetSizer($fgSizer6);
	$m_panel6->Layout;
	$fgSizer6->Fit($m_panel6);

	my $fgSizer8 = Wx::FlexGridSizer->new( 5, 2, 0, 0 );
	$fgSizer8->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer8->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_SPECIFIED);
	$fgSizer8->Add( $m_staticText30, 0, Wx::wxALL, 5 );
	$fgSizer8->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer8->Add( $m_staticText31,      0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer8->Add( $self->{m_spinCtrl7}, 0, Wx::wxALL,                               5 );
	$fgSizer8->Add( $m_staticText32,      0, Wx::wxALL,                               5 );
	$fgSizer8->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer8->Add( $m_staticText33,       0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer8->Add( $self->{m_spinCtrl8},  0, Wx::wxALL,                               5 );
	$fgSizer8->Add( $self->{m_checkBox21}, 0, Wx::wxALL,                               5 );

	$m_panel8->SetSizer($fgSizer8);
	$m_panel8->Layout;
	$fgSizer8->Fit($m_panel8);

	my $fgSizer7 = Wx::FlexGridSizer->new( 10, 2, 0, 0 );
	$fgSizer7->SetFlexibleDirection(Wx::wxBOTH);
	$fgSizer7->SetNonFlexibleGrowMode(Wx::wxFLEX_GROWMODE_SPECIFIED);
	$fgSizer7->Add( $self->{m_checkBox18}, 0, Wx::wxALL, 5 );
	$fgSizer7->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer7->Add( $self->{m_checkBox19}, 0, Wx::wxALL, 5 );
	$fgSizer7->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer7->Add( $self->{m_checkBox20}, 0, Wx::wxALL, 5 );
	$fgSizer7->Add( 0, 0, 1, Wx::wxEXPAND, 5 );
	$fgSizer7->Add( $m_staticText27,      0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer7->Add( $self->{m_spinCtrl4}, 0, Wx::wxALL,                               5 );
	$fgSizer7->Add( $m_staticText28,      0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer7->Add( $self->{m_spinCtrl5}, 0, Wx::wxALL,                               5 );
	$fgSizer7->Add( $m_staticText29,      0, Wx::wxALIGN_CENTER_VERTICAL | Wx::wxALL, 5 );
	$fgSizer7->Add( $self->{m_spinCtrl6}, 0, Wx::wxALL,                               5 );

	$m_panel7->SetSizer($fgSizer7);
	$m_panel7->Layout;
	$fgSizer7->Fit($m_panel7);

	$self->{m_listbook1}->AddPage( $m_panel2, Wx::gettext("Behaviour"),                1 );
	$self->{m_listbook1}->AddPage( $m_panel3, Wx::gettext("Appearance"),               0 );
	$self->{m_listbook1}->AddPage( $m_panel4, Wx::gettext("Run Parameters"),           0 );
	$self->{m_listbook1}->AddPage( $m_panel5, Wx::gettext("Files and Colours"),        0 );
	$self->{m_listbook1}->AddPage( $m_panel1, Wx::gettext("Indentation"),              0 );
	$self->{m_listbook1}->AddPage( $m_panel6, Wx::gettext("External Tools"),           0 );
	$self->{m_listbook1}->AddPage( $m_panel8, Wx::gettext("Local/Remote File Access"), 0 );
	$self->{m_listbook1}->AddPage( $m_panel7, Wx::gettext("Perl Auto Complete"),       0 );

	my $buttons = Wx::BoxSizer->new(Wx::wxHORIZONTAL);
	$buttons->Add( $self->{save},     0, Wx::wxALL, 5 );
	$buttons->Add( $self->{advanced}, 0, Wx::wxALL, 5 );
	$buttons->Add( $self->{cancel},   0, Wx::wxALL, 5 );

	my $vsizer = Wx::BoxSizer->new(Wx::wxVERTICAL);
	$vsizer->Add( $self->{m_listbook1}, 1, Wx::wxALL | Wx::wxEXPAND, 5 );
	$vsizer->Add( $m_staticline1,       0, Wx::wxALL | Wx::wxEXPAND, 5 );
	$vsizer->Add( $buttons,             0, Wx::wxALIGN_RIGHT,        5 );

	my $hsizer = Wx::BoxSizer->new(Wx::wxHORIZONTAL);
	$hsizer->Add( $vsizer, 1, Wx::wxALL | Wx::wxEXPAND, 5 );

	$self->SetSizer($hsizer);
	$self->Layout;
	$hsizer->Fit($self);
	$hsizer->SetSizeHints($self);

	return $self;
}

sub editor_wordwrap {
	$_[0]->{editor_wordwrap};
}

sub guess_indentation {
	die 'Handler method guess_indentation for event guess_indentation.OnButtonClick not implemented';
}

1;

# Copyright 2008-2011 The Padre development team as listed in Padre.pm.
# LICENSE
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5 itself.

