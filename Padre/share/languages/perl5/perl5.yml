---
# Copyright 2008-2013 The Padre development team as listed in Padre.pm.
# LICENSE
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5 itself.
abs:
 cmd: (NUMBER)
 exp: The absolute value of NUMBER.
accept:
 cmd: (NEWSOCKET, GENERICSOCKET)
 exp: Accept an incoming socket.
alarm:
 cmd: (NUMBER)
 exp: Asks the operating system to send an alarm sign after NUMBER seconds.
atan2:
 cmd: (Y, X)
 exp: Returns the arctangent of Y/X in the range -PI to PI.
bind:
 cmd: (SOCKET, NAME)
 exp: Binds a network address to a socket.
binmode:
 cmd: (FILEHANDLE)  or  (FILEHANDLE, LAYER)
 exp: Arranges for FILEHANDLE to be read or written in "binary" format.
bless:
 cmd: (REFERENCE, CLASSNAME)
 exp: Connects a REFERENCE (usually of a hash) to a CLASS to arrange for OOP dispatching.
caller:
 cmd: (NUMBER)
 exp: Returns information regarding the caller of the current function NUMBER frames earlier in the call stack.
chdir:
 cmd: (PATH)
 exp: Change the current working directory to PATH.
chmod:
 cmd: (LIST)
 exp:  Changes the permissions of a LIST of files.
chomp:
 cmd: (STRING)   or (ARRAY)
 exp: Remove the newline from the end of the STRING or from the end of every string in the ARRAY.
chomp:
 cmd: (STRING)
 exp: Remove last character from STRING. (Usually better to use chomp than chop.)
chown:
 cmd: (LIST)
 exp: Changes the owner (and group) of a LIST of files.
chr:
 cmd: (NUMBER)
 exp: Returns the character represented by that NUMBER in the character set.
chroot:
 cmd: (FILENAME)
 exp: (Superuser only.)
close:
 cmd: (FILEHANDLE)
 exp: Flushes all the data and closes a FILEHANDLE opened by open().
closedir:
 cmd: (DIRECTORY_HANDLE)
 exp: Close a DIRECTORY_HANDLE opened by opendir().
connect:
 cmd: (SOCKET, NAME)
 exp: Attempts to connect to a remote socket.
continue:
 cmd: BLOCK
 exp: Flow control statement.
cos:
 cmd: (NUMBER)
 exp: Returns the cosine of NUMBER.
crypt:
 cmd: (PLAINTEXT, SALT)
 exp: Returns the encrypted PLAINTEXT string using the SALT.
dbmclose:
 cmd: (HASH)
 exp: See untie() instead.
dbmopen:
 cmd: (HASH, DBNAME, MASK)
 exp: See tie() instead.
defined:
 cmd: SCALAR
 exp: Returns false if SCALAR is undef. Otherwise returns true.
delete:
 cmd: (HASH_ELEMENT)
 exp: Remove the HASH_ELEMENT from the HASH and return the value it had.
die:
 cmd: (STRING)
 exp: Throw an exception that can be caught by an eval block.
do:
 cmd: BLOCK   or  (PATH)
 exp: do PATH executes the file in the PATH.
dump:
 cmd: ()
 exp: Immediate core dump (crashing perl) not really useful for humans.
each:
 cmd: (HASH)
 exp: Loop through a hash by returning the (key, value) pair on every call.
eof:
 cmd: (FILEHANDLE)
 exp: Returns 1 if the next read on FILEHANDLE will return end of file, or if FILEHANDLE is not open.
eval:
 cmd: BLOCK   or (STRING)
 exp: Compile and execute the given STRING as if was a Perl script. Catching exceptions generated by perl or by calling die().
exec:
 cmd: (PROGRAM)
 exp: Execute the given external PROGRAM and quit once that is done.
exists:
 cmd: (HASH_ELEMENT)
 exp: Returns true if the key of the HASH_ELEMENT exists in the HASH.
exit:
 cmd: (NUMBER)
 exp: Exit the perl script giving NUMBER as the exit code.
exp:
 cmd: (NUMBER)
 exp: Returns e (the natural logarithm base) to the power of EXPR.
fcntl:
 cmd: (FILEHANDLE, FUNCTION, SCALAR)
 exp: Implements the fcntl(2) function.
fileno:
 cmd: (FILEHANDLE)
 exp: Returns the file descriptor for a filehandle.
flock:
 cmd: (FILEHANDLE, OPERATION)
 exp: Advisory locking of FILEHANDLE.
fork:
 cmd: ()
 exp: Forks a new process. In the parent returns the process ID of the child. In the child returns 0.
for:
 cmd: (INITIALIZE; CHECK; STEP) { }
 exp: C-style for loop
foreach:
 cmd: ITERATOR_SCALAR (LIST) { }
 exp: Iterate over a list of values. The iterator is usually look like "my $var".
format:
 cmd: (?)
 exp: Declare a picture format for use by the "write" function
formline:
 cmd: (PICTURE, LIST)
 exp: An internal function used by "format"s.
getc:
 cmd: (FILEHANDLE)
 exp:  Returns the next character from the input file attached to FILEHANDLE.
getlogin:
 cmd: ()
 exp: Return the current login.
getpeername:
 cmd: (SOCKET)
 exp: Returns the packed sockaddr address of other end of the SOCKET connection.
getpgrp:
 cmd: (PID)
 exp: Returns the current process group for the specified PID.
getppid:
 cmd: ()
 exp: Returns the process id of the parent process.
getpriority:
 cmd: (WHICH,WHO)
 exp: Returns the current priority for a process, a process group, or a user.
getsockname:
 cmd: (SOCKET)
 exp: Returns the packed sockaddr address of this end of the SOCKET connection.
getsockopt:
 cmd: (SOCKET,LEVEL,OPTNAME)
 exp: Queries the option named OPTNAME associated with SOCKET at a given LEVEL.
glob:
 cmd: (STRING)
 exp: Returns the list of files matching the STRING wildcard(s).
gmtime:
 cmd: (TIMESTAMP)
 exp: Return a TIMESTAMP received from time() in human readable format.
goto:
 cmd: (EXPR)
 exp: What can we say? Perl has a goto() function.
grep:
 cmd: (BLOCK, LIST)
 exp: Returns a sublist of LIST consisting of every elements that renders the BLOCK to evaluate to true when $_ is set to the specific value.
hex:
 cmd: (STRING)
 exp: Return the decimal value of the hex STRING.
import:
 cmd: (LIST)
 exp: No built-in import function. It can be inherited from modules.
index:
 cmd: '(STR, SUBSTR, INDEX)'
 exp: Return the offset of the next occurrence of SUBSTR in STR starting from INDEX.
int:
 cmd: (NUMBER)
 exp: Returns the integer portion of NUMBER.
ioctl:
 cmd: (FILEHANDLE, FUNCTION, SCALAR)
 exp: Implements the ioctl(2) function.
join:
 cmd: '(STRING, LIST)'
 exp: Join the elements of LIST using the STRING as connector between every two element.
keys:
 cmd: (HASH)
 exp: Returns a list consisting of all the keys of the named hash.
kill:
 cmd: (SIGNAL, LIST)
 exp: Send the SIGNAL to every process given in the LIST.
last:
 cmd: () or (LABEL)
 exp: Like the break() in other languages, quits a inner-most loop or the one marked with LABEL.
lc:
 cmd: (STRING)
 exp: Return the lower case version of STRING
lcfirst:
 cmd: (STRING)
 exp: Return the STRING with its first character turned to lowercase.
length:
 cmd: (STRING)
 exp: Returns the length in characters of the STRING.
link:
 cmd: (OLDFILE, NEWFILE)
 exp: Create a hard-link from OLDFILE to NEWFILE. (Unixism)
listen:
 cmd: (SOCKET, QUESIZE)
 exp: Does the same thing that the listen system call does.
local:
 cmd: (VARIABLEs)
 exp: Localizes a variable. In most cases you'll want to use my().
localtime:
 cmd: (TIMESTAMP)
 exp: Return a TIMESTAMP received from time() in human readable format.
lock:
 cmd: (VARIABLE)
 exp: This function places an advisory lock on a shared variable.
log:
 cmd: (NUMBER)
 exp: Returns the natural logarithm (base e) of NUMBER.
lstat:
 cmd: (FILENAME)
 exp: Like stat() just on the symbolic link. (Unixism)
map:
 cmd: (BLOCK, LIST)
 exp: Return a list generated by BLOCK as it was executed after each element of LIST is placed in $_.
mkdir:
 cmd: (DIRNAME)
 exp: Create the directory DIRNAME.
msgctl:
 cmd: (ID, CMD, ARG)
 exp: Calls the System V IPC function msgctl(2).
msgget:
 cmd: (KEY, FLAGS)
 exp: Calls the System V IPC function msgget(2).
msgrcv:
 cmd: (ID,VAR,SIZE,TYPE,FLAGS)
 exp: Calls the System V IPC function msgrcv.
msgsnd:
 cmd: (ID,MSG,FLAGS)
 exp: Calls the System V IPC function msgsnd.
my:
 cmd: (VARIABLEs)
 exp: Declare a SCALAR, ARRAY or HASH variable in the current scope (BLOCK).
next:
 cmd: () or (LABEL)
 exp: Like the "continue" in other languages, skip to the next iteration of the current loop.
no:
 cmd: (MODULE)
 exp: The opposite of use().
oct:
 cmd: (STRING)
 exp: Interprets STRING as an octal and returns the corresponding decimal value.
open:
 cmd: (FILEHANDLE, MODE, FILE)
 exp: Opens the give FILE in MODE (< for read , > for write, >> for append) and assigns the filehandle to FILEHANDLE.
opendir:
 cmd: (DIRHANDLE, DIRECTORY)
 exp: Open a DIRECTORY for reading and assign the handle to DIRHANDLE.
ord:
 cmd: (STRING)
 exp: Return the numeric value of the first character in STRING.
our:
 cmd: (VARIABLEs)
 exp: Declare a package variable.
pack:
 cmd: (TEMPLATE, LIST)
 exp: Takes a LIST of values and converts it into a string using the rules given by the TEMPLATE.
package:
 cmd: NAMESPACE
 exp: Declares a NAMESPACE.
pipe:
 cmd: (READHANDLE,WRITEHANDLE)
 exp: Opens a pair of connected pipes like the corresponding system call.
pop:
 cmd: (@ARRAY)
 exp: Return the last element of the array.
pos:
 cmd: (SCALAR_VARIABLE)
 exp:  Returns the offset of where the last "m//g" search left off for the SCALAR_VARIABLE in question.
print:
 cmd: (LIST) or (FILEHANDLE LIST)
 exp: Print to the screen or to the file that was open()-ed for writing.
printf:
 cmd: (STRING, LIST)  or (FILEHANDLE, STRING, LIST)
 exp: See sprintf.
prototype:
 cmd: (FUNCTION)
 exp: Returns the prototype of a function.
push:
 cmd: '(@ARRAY, VALUE)  or (@ARRAY, LIST)'
 exp: Add one or more elements to the end of the array.
quotemeta:
 cmd: (STRING)
 exp: Returns the value of STRING with all non-"word" characters backslashed.
rand:
 cmd: () or (NUMBER)
 exp: Returns a random number between 0 and 1 or between 0 and NUMBER.
read:
 cmd: (FILEHANDLE, SCALAR_VARIABLE, LENGTH, OFFSET)
 exp: Read LENGTH bytes from FILEHANDLE and put them in SCALAR_VARIABLE starting from OFFSET.
readdir:
 cmd: (DIRHANDLE)
 exp: Returns the next directory entry for a directory opened by "opendir".
readline:
 cmd: (FILEHANDLE)
 exp: Reads from the filehandle whose typeglob is contained in EXPR.
readlink: 
 cmd: (EXPR)
 exp: Returns the value of a symbolic link.
readpipe:
 cmd: EXPR
 exp: EXPR is executed as a system command.
recv:
 cmd: (SOCKET,SCALAR,LENGTH,FLAGS)
 exp: Receives a message on a socket.
redo:
 cmd: () or (LABEL)
 exp: Execute again the current iteration of a loop.
ref:
 cmd: SCALAR_VARIABLE
 exp: Returns the name of the reference type of SCALAR_VARIABLE or false if it is not a reference.
rename:
 cmd: (OLDNAME, NEWNAME)
 exp: Rename a file of directory on the same filesystem.
require:
 cmd: MODULE
 exp: Load the given MODULE to the memory.
reset:
 cmd: (EXPR)
 exp: Generally used in a "continue" block at the end of a loop to clear variables.
return:
 cmd: (LIST)
 exp: Returns from a subroutine.
reverse:
 cmd: (LIST)
 exp: Return the LIST in reverse order.
rewinddir:
 cmd: DIRHANDLE
 exp: Sets the current position to the beginning of the directory for the "readdir" routine on DIRHANDLE.
rindex:
 cmd: (STR,SUBSTR,POSITION) or (STR,SUBSTR)
 exp: Works just like index().
rmdir:
 cmd: (FILENAME)
 exp: Try to remove a directory. (Only works if directory is empty.)
scalar:
 cmd: (EXP)
 exp: Forces EXPR to be interpreted in scalar context and returns the value of EXPR.
seek:
 cmd: (FILEHANDLE, POSITION, WHENCE)
 exp: Sets FILEHANDLE's position, just like the "fseek" call of "stdio".
seekdir:
 cmd: (DIRHANDLE,POS)
 exp: Sets the current position for the "readdir" routine on DIRHANDLE.
select:
 cmd: (FILEHANDLE)   or (RBITS,WBITS,EBITS,TIMEOUT)
 exp: Sets the current default filehandle for output. The 4 param version calls the select(2) system call with the bit masks specified.
semctl:
 cmd: (ID,SEMNUM,CMD,ARG)
 exp: Calls the System V IPC function "semctl".
semget:
 cmd: (KEY,NSEMS,FLAGS)
 exp: Calls the System V IPC function semget.
semop:
 cmd: (KEY,OPSTRING)
 exp: Calls the System V IPC function semop.
send:
 cmd: (SOCKET,MSG,FLAGS)
 exp: Sends a message on a socket.
setpgrp:
 cmd: (PID,PGRP)
 exp: Sets the current process group for the specified PID.
setpriority:
 cmd: (WHICH,WHO,PRIORITY)
 exp: Sets the current priority for a process, a process group, or a user.
setsockopt:
 cmd: (SOCKET,LEVEL,OPTNAME,OPTVAL)
 exp: Sets the socket option requested.
shift:
 cmd: (ARRAY)
 exp: Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down.
shmctl:
 cmd: ID,CMD,ARG
 exp: Calls the System V IPC function shmctl.
shmget:
 cmd: KEY,SIZE,FLAGS
 exp: Calls the System V IPC function shmget. 
shmread:
 cmd: ID,VAR,POS,SIZE
 exp: Reads the System V shared memory segment ID.
shmwrite:
 cmd: ID,STRING,POS,SIZE
 exp: Writes the System V shared memory segment ID.
shutdown:
 cmd: SOCKET,HOW
 exp: Shuts down a socket connection in the manner indicated by HOW.
sin:
 cmd: EXPR
 exp: Returns the sine of EXPR (expressed in radians).
sleep:
 cmd: EXPR
 exp: Causes the script to sleep for EXPR seconds, or forever if no EXPR.
socket:
 cmd: SOCKET,DOMAIN,TYPE,PROTOCOL
 exp: Opens a socket of the specified kind and attaches it to filehandle SOCKET.
socketpair:
 cmd: SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL
 exp: Creates an unnamed pair of sockets in the specified domain, of the specified type.
sort:
 cmd: BLOCK LIST
 exp: Sort a LIST of values according to the condition implemented in BLOCK.
splice:
 cmd: ARRAY,OFFSET,LENGTH,LIST
 exp: Removes the elements designated by OFFSET and LENGTH from an array, and replaces them with the elements of LIST, if any.
split:
 cmd: '(/PATTERN/, STRING , LIMIT)    or   (/PATTERN/, STRING , LIMIT)'
 exp: Split up the STRING at every match of the PATTERN.
sprintf:
 cmd: (FORMAT, LIST)
 exp: Returns a string formatted by the usual "printf" conventions of the C library function "sprintf".
sqrt:
 cmd: (NUMBER)
 exp: Return the square root of NUMBER.
srand:
 cmd: (NUMBER)
 exp: Sets the random number seed for the "rand" operator.
stat:
 cmd: FILENAME
 exp: Returns a 13-element list giving the status info for a file.
study:
 cmd: STRING
 exp: Takes extra time to study STRING in anticipation of doing many pattern matches on it.
sub:
 cmd: NAME BLOCK
 exp: This is subroutine definition, not a real function per se.
substr:
 cmd: '(STRING, OFFSET, LENGTH)'
 exp: Return LENGTH number of character of the STRING starting from OFFSET character.
symlink:
 cmd: OLDFILE,NEWFILE
 exp: Creates a new filename symbolically linked to the old filename.
syscall:
 cmd: NUMBER, LIST
 exp: Calls the system call specified as the first element of the list, passing the remaining elements as arguments to the system call. 
sysopen:
 cmd: FILEHANDLE,FILENAME,MODE,PERMS
 exp: Opens the file whose filename is given by FILENAME, and associates it with FILEHANDLE.
sysread:
 cmd: FILEHANDLE,SCALAR,LENGTH
 exp: Attempts to read LENGTH bytes of data into variable SCALAR from the specified FILEHANDLE, using the system call read(2).
sysseek:
 cmd: FILEHANDLE,POSITION,WHENCE
 exp: Sets FILEHANDLE's system position in bytes using the system call lseek(2).
system:
 cmd: PROGRAM LIST
 exp: Does exactly the same thing as "exec LIST", except that a fork is done first,
syswrite:
 cmd: FILEHANDLE,SCALAR,LENGTH,OFFSET
 exp: Attempts to write LENGTH bytes of data from variable SCALAR to the specified FILEHANDLE, using the system call write(2).
tell:
 cmd: FILEHANDLE
 exp: Returns the current position in bytes for FILEHANDLE, or -1 on error.
telldir:
 cmd: DIRHANDLE
 exp: Returns the current position of the "readdir" routines on DIRHANDLE.
tie: 
 cmd: VARIABLE,CLASSNAME,LIST
 exp: This function binds a variable to a package class that will provide the implementation for the variable.
tied:
 cmd: VARIABLE
 exp: Returns a reference to the object underlying VARIABLE.
time:
 cmd: ()
 exp: Returns the number of non-leap seconds since whatever time the system considers to be the epoch.
times:
 cmd: ()
 exp: Returns a four-element list giving the user and system times, in seconds, for this process and the children of this process.
truncate:
 cmd: FILEHANDLE, LENGTH
 exp: Truncates the file opened on FILEHANDLE  to the specified length.
uc:
 cmd: STRING
 exp: Returns an uppercase version of STRING.
ucfirst:
 cmd: STRING
 exp: Return the string with its first character turned to uppercase.
umask:
 cmd: NUMBER
 exp: Sets the umask for the process to NUMBER and returns the previous value. (Unixism)
undef:
 cmd: VARIABLE
 exp: Undefines the value of VARIABLE
unlink:
 cmd: LIST
 exp: Deletes a list of files.
unpack:
 cmd: TEMPLATE,EXPR
 exp: Does the reverse of pack.
untie:
 cmd: VARIABLE
 exp: Breaks the binding between a variable and a package.
unshift:
 cmd: (ARRAY, LIST)
 exp: Does the opposite of a shift.
use:
 cmd: MODULE
 exp: Load a module into memory.
utime:
 cmd: LIST
 exp: Changes the access and modification times on each file of a list of files.
values:
 cmd: HASH
 exp:  Returns a list consisting of all the values of the named hash.
vec:
 cmd: EXPR,OFFSET,BITS
 exp: Treats the string in EXPR as a bit vector made up of elements of width BITS, and returns the value of the element specified by OFFSET as an unsigned integer.
wait:
 cmd: ()
 exp: Behaves like the wait(2) system call on your system.
waitpid:
 cmd: PID,FLAGS
 exp: Waits for a particular child process to terminate.
wantarray:
 cmd: () no parameters
 exp: Returns true if the current call of the function expects more than one results.
warn:
 cmd: (STRING)
 exp: Produces a message on STDERR just like die, but does not exit or throw an exception.
write:
 cmd: EXPR
 exp: Writes a formatted record (possibly multi-line) to the specified FILEHANDLE.

