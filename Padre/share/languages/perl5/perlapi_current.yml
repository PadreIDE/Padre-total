---
AvFILL:
  cmd: ''
  exp: "Same as C<av_len()>.  Deprecated, use C<av_len()> instead.\n\n\tint\tAvFILL(AV* av)"
CLASS:
  cmd: ''
  exp: "Variable which is setup by C<xsubpp> to indicate the \nclass name for a C++ XS constructor.  This is always a C<char*>.  See C<THIS>.\n\n\tchar*\tCLASS"
Copy:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<memcpy> function.  The C<src> is the\nsource, C<dest> is the destination, C<nitems> is the number of items, and C<type> is\nthe type.  May fail on overlapping copies.  See also C<Move>.\n\n\tvoid\tCopy(void* src, void* dest, int nitems, type)"
CopyD:
  cmd: ''
  exp: "Like C<Copy> but returns dest. Useful for encouraging compilers to tail-call\noptimise.\n\n\tvoid *\tCopyD(void* src, void* dest, int nitems, type)"
CvSTASH:
  cmd: ''
  exp: "Returns the stash of the CV.\n\n\tHV*\tCvSTASH(CV* cv)"
ENTER:
  cmd: ''
  exp: "Opening bracket on a callback.  See C<LEAVE> and L<perlcall>.\n\n\t\tENTER;"
EXTEND:
  cmd: ''
  exp: "Used to extend the argument stack for an XSUB's return values. Once\nused, guarantees that there is room for at least C<nitems> to be pushed\nonto the stack.\n\n\tvoid\tEXTEND(SP, int nitems)"
FREETMPS:
  cmd: ''
  exp: "Closing bracket for temporaries on a callback.  See C<SAVETMPS> and\nL<perlcall>.\n\n\t\tFREETMPS;"
GIMME:
  cmd: ''
  exp: "A backward-compatible version of C<GIMME_V> which can only return\nC<G_SCALAR> or C<G_ARRAY>; in a void context, it returns C<G_SCALAR>.\nDeprecated.  Use C<GIMME_V> instead.\n\n\tU32\tGIMME"
GIMME_V:
  cmd: ''
  exp: "The XSUB-writer's equivalent to Perl's C<wantarray>.  Returns C<G_VOID>,\nC<G_SCALAR> or C<G_ARRAY> for void, scalar or list context,\nrespectively.\n\n\tU32\tGIMME_V"
G_ARRAY:
  cmd: ''
  exp: "Used to indicate list context.  See C<GIMME_V>, C<GIMME> and\nL<perlcall>."
G_DISCARD:
  cmd: ''
  exp: "Indicates that arguments returned from a callback should be discarded.  See\nL<perlcall>."
G_EVAL:
  cmd: ''
  exp: "Used to force a Perl C<eval> wrapper around a callback.  See\nL<perlcall>."
G_NOARGS:
  cmd: ''
  exp: "Indicates that no arguments are being sent to a callback.  See\nL<perlcall>."
G_SCALAR:
  cmd: ''
  exp: "Used to indicate scalar context.  See C<GIMME_V>, C<GIMME>, and\nL<perlcall>."
G_VOID:
  cmd: ''
  exp: 'Used to indicate void context.  See C<GIMME_V> and L<perlcall>.'
GvSV:
  cmd: ''
  exp: "Return the SV from the GV.\n\n\tSV*\tGvSV(GV* gv)"
HEf_SVKEY:
  cmd: ''
  exp: "This flag, used in the length slot of hash entries and magic structures,\nspecifies the structure contains an C<SV*> pointer where a C<char*> pointer\nis to be expected. (For information only--not to be used)."
HeHASH:
  cmd: ''
  exp: "Returns the computed hash stored in the hash entry.\n\n\tU32\tHeHASH(HE* he)"
HeKEY:
  cmd: ''
  exp: "Returns the actual pointer stored in the key slot of the hash entry. The\npointer may be either C<char*> or C<SV*>, depending on the value of\nC<HeKLEN()>.  Can be assigned to.  The C<HePV()> or C<HeSVKEY()> macros are\nusually preferable for finding the value of a key.\n\n\tvoid*\tHeKEY(HE* he)"
HeKLEN:
  cmd: ''
  exp: "If this is negative, and amounts to C<HEf_SVKEY>, it indicates the entry\nholds an C<SV*> key.  Otherwise, holds the actual length of the key.  Can\nbe assigned to. The C<HePV()> macro is usually preferable for finding key\nlengths.\n\n\tSTRLEN\tHeKLEN(HE* he)"
HePV:
  cmd: ''
  exp: "Returns the key slot of the hash entry as a C<char*> value, doing any\nnecessary dereferencing of possibly C<SV*> keys.  The length of the string\nis placed in C<len> (this is a macro, so do I<not> use C<&len>).  If you do\nnot care about what the length of the key is, you may use the global\nvariable C<PL_na>, though this is rather less efficient than using a local\nvariable.  Remember though, that hash keys in perl are free to contain\nembedded nulls, so using C<strlen()> or similar is not a good way to find\nthe length of hash keys. This is very similar to the C<SvPV()> macro\ndescribed elsewhere in this document. See also C<HeUTF8>.\n\nIf you are using C<HePV> to get values to pass to C<newSVpvn()> to create a\nnew SV, you should consider using C<newSVhek(HeKEY_hek(he))> as it is more\nefficient.\n\n\tchar*\tHePV(HE* he, STRLEN len)"
HeSVKEY:
  cmd: ''
  exp: "Returns the key as an C<SV*>, or C<NULL> if the hash entry does not\ncontain an C<SV*> key.\n\n\tSV*\tHeSVKEY(HE* he)"
HeSVKEY_force:
  cmd: ''
  exp: "Returns the key as an C<SV*>.  Will create and return a temporary mortal\nC<SV*> if the hash entry contains only a C<char*> key.\n\n\tSV*\tHeSVKEY_force(HE* he)"
HeSVKEY_set:
  cmd: ''
  exp: "Sets the key to a given C<SV*>, taking care to set the appropriate flags to\nindicate the presence of an C<SV*> key, and returns the same\nC<SV*>.\n\n\tSV*\tHeSVKEY_set(HE* he, SV* sv)"
HeUTF8:
  cmd: ''
  exp: "Returns whether the C<char *> value returned by C<HePV> is encoded in UTF-8,\ndoing any necessary dereferencing of possibly C<SV*> keys.  The value returned\nwill be 0 or non-0, not necessarily 1 (or even a value with any low bits set),\nso B<do not> blindly assign this to a C<bool> variable, as C<bool> may be a\ntypedef for C<char>.\n\n\tchar*\tHeUTF8(HE* he, STRLEN len)"
HeVAL:
  cmd: ''
  exp: "Returns the value slot (type C<SV*>) stored in the hash entry.\n\n\tSV*\tHeVAL(HE* he)"
HvNAME:
  cmd: ''
  exp: "Returns the package name of a stash, or NULL if C<stash> isn't a stash.\nSee C<SvSTASH>, C<CvSTASH>.\n\n\tchar*\tHvNAME(HV* stash)"
LEAVE:
  cmd: ''
  exp: "Closing bracket on a callback.  See C<ENTER> and L<perlcall>.\n\n\t\tLEAVE;"
MARK:
  cmd: ''
  exp: 'Stack marker variable for the XSUB.  See C<dMARK>.'
MULTICALL:
  cmd: ''
  exp: "Make a lightweight callback. See L<perlcall/Lightweight Callbacks>.\n\n\t\tMULTICALL;"
Move:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<memmove> function.  The C<src> is the\nsource, C<dest> is the destination, C<nitems> is the number of items, and C<type> is\nthe type.  Can do overlapping moves.  See also C<Copy>.\n\n\tvoid\tMove(void* src, void* dest, int nitems, type)"
MoveD:
  cmd: ''
  exp: "Like C<Move> but returns dest. Useful for encouraging compilers to tail-call\noptimise.\n\n\tvoid *\tMoveD(void* src, void* dest, int nitems, type)"
Newx:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<malloc> function.\n\nIn 5.9.3, Newx() and friends replace the older New() API, and drops\nthe first parameter, I<x>, a debug aid which allowed callers to identify\nthemselves.  This aid has been superseded by a new build option,\nPERL_MEM_LOG (see L<perlhack/PERL_MEM_LOG>).  The older API is still\nthere for use in XS modules supporting older perls.\n\n\tvoid\tNewx(void* ptr, int nitems, type)"
Newxc:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<malloc> function, with\ncast.  See also C<Newx>.\n\n\tvoid\tNewxc(void* ptr, int nitems, type, cast)"
Newxz:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<malloc> function.  The allocated\nmemory is zeroed with C<memzero>.  See also C<Newx>.\n\n\tvoid\tNewxz(void* ptr, int nitems, type)"
Nullav:
  cmd: ''
  exp: 'Null AV pointer.'
Nullch:
  cmd: ''
  exp: 'Null character pointer.'
Nullcv:
  cmd: ''
  exp: 'Null CV pointer.'
Nullhv:
  cmd: ''
  exp: 'Null HV pointer.'
Nullsv:
  cmd: ''
  exp: 'Null SV pointer.'
ORIGMARK:
  cmd: ''
  exp: 'The original stack mark for the XSUB.  See C<dORIGMARK>.'
PERL_SYS_INIT:
  cmd: ''
  exp: "Provides system-specific tune up of the C runtime environment necessary to\nrun Perl interpreters. This should be called only once, before creating\nany Perl interpreters.\n\n\tvoid\tPERL_SYS_INIT(int argc, char** argv)"
PERL_SYS_INIT3:
  cmd: ''
  exp: "Provides system-specific tune up of the C runtime environment necessary to\nrun Perl interpreters. This should be called only once, before creating\nany Perl interpreters.\n\n\tvoid\tPERL_SYS_INIT3(int argc, char** argv, char** env)"
PERL_SYS_TERM:
  cmd: ''
  exp: "Provides system-specific clean up of the C runtime environment after\nrunning Perl interpreters. This should be called only once, after\nfreeing any remaining Perl interpreters.\n\n\tvoid\tPERL_SYS_TERM()"
PL_modglobal:
  cmd: ''
  exp: "C<PL_modglobal> is a general purpose, interpreter global HV for use by\nextensions that need to keep information on a per-interpreter basis.\nIn a pinch, it can also be used as a symbol table for extensions\nto share data among each other.  It is a good idea to use keys\nprefixed by the package name of the extension that owns the data.\n\n\tHV*\tPL_modglobal"
PL_na:
  cmd: ''
  exp: "A convenience variable which is typically used with C<SvPV> when one\ndoesn't care about the length of the string.  It is usually more efficient\nto either declare a local variable and use that instead or to use the\nC<SvPV_nolen> macro.\n\n\tSTRLEN\tPL_na"
PL_sv_no:
  cmd: ''
  exp: "This is the C<false> SV.  See C<PL_sv_yes>.  Always refer to this as\nC<&PL_sv_no>.\n\n\tSV\tPL_sv_no"
PL_sv_undef:
  cmd: ''
  exp: "This is the C<undef> SV.  Always refer to this as C<&PL_sv_undef>.\n\n\tSV\tPL_sv_undef"
PL_sv_yes:
  cmd: ''
  exp: "This is the C<true> SV.  See C<PL_sv_no>.  Always refer to this as\nC<&PL_sv_yes>.\n\n\tSV\tPL_sv_yes"
POP_MULTICALL:
  cmd: ''
  exp: "Closing bracket for a lightweight callback.\nSee L<perlcall/Lightweight Callbacks>.\n\n\t\tPOP_MULTICALL;"
POPi:
  cmd: ''
  exp: "Pops an integer off the stack.\n\n\tIV\tPOPi"
POPl:
  cmd: ''
  exp: "Pops a long off the stack.\n\n\tlong\tPOPl"
POPn:
  cmd: ''
  exp: "Pops a double off the stack.\n\n\tNV\tPOPn"
POPp:
  cmd: ''
  exp: "Pops a string off the stack. Deprecated. New code should use POPpx.\n\n\tchar*\tPOPp"
POPpbytex:
  cmd: ''
  exp: "Pops a string off the stack which must consist of bytes i.e. characters < 256.\n\n\tchar*\tPOPpbytex"
POPpx:
  cmd: ''
  exp: "Pops a string off the stack.\n\n\tchar*\tPOPpx"
POPs:
  cmd: ''
  exp: "Pops an SV off the stack.\n\n\tSV*\tPOPs"
PUSHMARK:
  cmd: ''
  exp: "Opening bracket for arguments on a callback.  See C<PUTBACK> and\nL<perlcall>.\n\n\tvoid\tPUSHMARK(SP)"
PUSH_MULTICALL:
  cmd: ''
  exp: "Opening bracket for a lightweight callback.\nSee L<perlcall/Lightweight Callbacks>.\n\n\t\tPUSH_MULTICALL;"
PUSHi:
  cmd: ''
  exp: "Push an integer onto the stack.  The stack must have room for this element.\nHandles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be\ncalled to declare it.  Do not call multiple C<TARG>-oriented macros to \nreturn lists from XSUB's - see C<mPUSHi> instead.  See also C<XPUSHi> and\nC<mXPUSHi>.\n\n\tvoid\tPUSHi(IV iv)"
PUSHmortal:
  cmd: ''
  exp: "Push a new mortal SV onto the stack.  The stack must have room for this\nelement.  Does not use C<TARG>.  See also C<PUSHs>, C<XPUSHmortal> and C<XPUSHs>.\n\n\tvoid\tPUSHmortal()"
PUSHn:
  cmd: ''
  exp: "Push a double onto the stack.  The stack must have room for this element.\nHandles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be\ncalled to declare it.  Do not call multiple C<TARG>-oriented macros to\nreturn lists from XSUB's - see C<mPUSHn> instead.  See also C<XPUSHn> and\nC<mXPUSHn>.\n\n\tvoid\tPUSHn(NV nv)"
PUSHp:
  cmd: ''
  exp: "Push a string onto the stack.  The stack must have room for this element.\nThe C<len> indicates the length of the string.  Handles 'set' magic.  Uses\nC<TARG>, so C<dTARGET> or C<dXSTARG> should be called to declare it.  Do not\ncall multiple C<TARG>-oriented macros to return lists from XSUB's - see\nC<mPUSHp> instead.  See also C<XPUSHp> and C<mXPUSHp>.\n\n\tvoid\tPUSHp(char* str, STRLEN len)"
PUSHs:
  cmd: ''
  exp: "Push an SV onto the stack.  The stack must have room for this element.\nDoes not handle 'set' magic.  Does not use C<TARG>.  See also C<PUSHmortal>,\nC<XPUSHs> and C<XPUSHmortal>.\n\n\tvoid\tPUSHs(SV* sv)"
PUSHu:
  cmd: ''
  exp: "Push an unsigned integer onto the stack.  The stack must have room for this\nelement.  Handles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG>\nshould be called to declare it.  Do not call multiple C<TARG>-oriented\nmacros to return lists from XSUB's - see C<mPUSHu> instead.  See also\nC<XPUSHu> and C<mXPUSHu>.\n\n\tvoid\tPUSHu(UV uv)"
PUTBACK:
  cmd: ''
  exp: "Closing bracket for XSUB arguments.  This is usually handled by C<xsubpp>.\nSee C<PUSHMARK> and L<perlcall> for other uses.\n\n\t\tPUTBACK;"
Perl_signbit:
  cmd: ''
  exp: "Return a non-zero integer if the sign bit on an NV is set, and 0 if\nit is not.  \n\nIf Configure detects this system has a signbit() that will work with\nour NVs, then we just use it via the #define in perl.h.  Otherwise,\nfall back on this implementation.  As a first pass, this gets everything\nright except -0.0.  Alas, catching -0.0 is the main use for this function,\nso this is not too helpful yet.  Still, at least we have the scaffolding\nin place to support other systems, should that prove useful.\n\n\nConfigure notes:  This function is called 'Perl_signbit' instead of a\nplain 'signbit' because it is easy to imagine a system having a signbit()\nfunction or macro that doesn't happen to work with our particular choice\nof NVs.  We shouldn't just re-#define signbit as Perl_signbit and expect\nthe standard system headers to be happy.  Also, this is a no-context\nfunction (no pTHX_) because Perl_signbit() is usually re-#defined in\nperl.h as a simple macro call to the system's signbit().\nUsers should just always call Perl_signbit().\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tint\tPerl_signbit(NV f)"
Poison:
  cmd: ''
  exp: "PoisonWith(0xEF) for catching access to freed memory.\n\n\tvoid\tPoison(void* dest, int nitems, type)"
PoisonFree:
  cmd: ''
  exp: "PoisonWith(0xEF) for catching access to freed memory.\n\n\tvoid\tPoisonFree(void* dest, int nitems, type)"
PoisonNew:
  cmd: ''
  exp: "PoisonWith(0xAB) for catching access to allocated but uninitialized memory.\n\n\tvoid\tPoisonNew(void* dest, int nitems, type)"
PoisonWith:
  cmd: ''
  exp: "Fill up memory with a byte pattern (a byte repeated over and over\nagain) that hopefully catches attempts to access uninitialized memory.\n\n\tvoid\tPoisonWith(void* dest, int nitems, type, U8 byte)"
RETVAL:
  cmd: ''
  exp: "Variable which is setup by C<xsubpp> to hold the return value for an \nXSUB. This is always the proper type for the XSUB. See \nL<perlxs/\"The RETVAL Variable\">.\n\n\t(whatever)\tRETVAL"
Renew:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<realloc> function.\n\n\tvoid\tRenew(void* ptr, int nitems, type)"
Renewc:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<realloc> function, with\ncast.\n\n\tvoid\tRenewc(void* ptr, int nitems, type, cast)"
SAVETMPS:
  cmd: ''
  exp: "Opening bracket for temporaries on a callback.  See C<FREETMPS> and\nL<perlcall>.\n\n\t\tSAVETMPS;"
SP:
  cmd: ''
  exp: "Stack pointer.  This is usually handled by C<xsubpp>.  See C<dSP> and\nC<SPAGAIN>."
SPAGAIN:
  cmd: ''
  exp: "Refetch the stack pointer.  Used after a callback.  See L<perlcall>.\n\n\t\tSPAGAIN;"
ST:
  cmd: ''
  exp: "Used to access elements on the XSUB's stack.\n\n\tSV*\tST(int ix)"
SVt_IV:
  cmd: ''
  exp: 'Integer type flag for scalars.  See C<svtype>.'
SVt_NV:
  cmd: ''
  exp: 'Double type flag for scalars.  See C<svtype>.'
SVt_PV:
  cmd: ''
  exp: 'Pointer type flag for scalars.  See C<svtype>.'
SVt_PVAV:
  cmd: ''
  exp: 'Type flag for arrays.  See C<svtype>.'
SVt_PVCV:
  cmd: ''
  exp: 'Type flag for code refs.  See C<svtype>.'
SVt_PVHV:
  cmd: ''
  exp: 'Type flag for hashes.  See C<svtype>.'
SVt_PVMG:
  cmd: ''
  exp: 'Type flag for blessed scalars.  See C<svtype>.'
Safefree:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<free> function.\n\n\tvoid\tSafefree(void* ptr)"
StructCopy:
  cmd: ''
  exp: "This is an architecture-independent macro to copy one structure to another.\n\n\tvoid\tStructCopy(type src, type dest, type)"
SvCUR:
  cmd: ''
  exp: "Returns the length of the string which is in the SV.  See C<SvLEN>.\n\n\tSTRLEN\tSvCUR(SV* sv)"
SvCUR_set:
  cmd: ''
  exp: "Set the current length of the string which is in the SV.  See C<SvCUR>\nand C<SvIV_set>.\n\n\tvoid\tSvCUR_set(SV* sv, STRLEN len)"
SvEND:
  cmd: ''
  exp: "Returns a pointer to the last character in the string which is in the SV.\nSee C<SvCUR>.  Access the character as *(SvEND(sv)).\n\n\tchar*\tSvEND(SV* sv)"
SvGAMAGIC:
  cmd: ''
  exp: "Returns true if the SV has get magic or overloading. If either is true then\nthe scalar is active data, and has the potential to return a new value every\ntime it is accessed. Hence you must be careful to only read it once per user\nlogical operation and work with that returned value. If neither is true then\nthe scalar's value cannot change unless written to.\n\n\tU32\tSvGAMAGIC(SV* sv)"
SvGETMAGIC:
  cmd: ''
  exp: "Invokes C<mg_get> on an SV if it has 'get' magic.  This macro evaluates its\nargument more than once.\n\n\tvoid\tSvGETMAGIC(SV* sv)"
SvGROW:
  cmd: ''
  exp: "Expands the character buffer in the SV so that it has room for the\nindicated number of bytes (remember to reserve space for an extra trailing\nNUL character).  Calls C<sv_grow> to perform the expansion if necessary.\nReturns a pointer to the character buffer.\n\n\tchar *\tSvGROW(SV* sv, STRLEN len)"
SvIOK:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains an integer.\n\n\tU32\tSvIOK(SV* sv)"
SvIOK_UV:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV contains an unsigned integer.\n\n\tbool\tSvIOK_UV(SV* sv)"
SvIOK_notUV:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV contains a signed integer.\n\n\tbool\tSvIOK_notUV(SV* sv)"
SvIOK_off:
  cmd: ''
  exp: "Unsets the IV status of an SV.\n\n\tvoid\tSvIOK_off(SV* sv)"
SvIOK_on:
  cmd: ''
  exp: "Tells an SV that it is an integer.\n\n\tvoid\tSvIOK_on(SV* sv)"
SvIOK_only:
  cmd: ''
  exp: "Tells an SV that it is an integer and disables all other OK bits.\n\n\tvoid\tSvIOK_only(SV* sv)"
SvIOK_only_UV:
  cmd: ''
  exp: "Tells and SV that it is an unsigned integer and disables all other OK bits.\n\n\tvoid\tSvIOK_only_UV(SV* sv)"
SvIOKp:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains an integer.  Checks\nthe B<private> setting.  Use C<SvIOK> instead.\n\n\tU32\tSvIOKp(SV* sv)"
SvIV:
  cmd: ''
  exp: "Coerces the given SV to an integer and returns it. See C<SvIVx> for a\nversion which guarantees to evaluate sv only once.\n\n\tIV\tSvIV(SV* sv)"
SvIVX:
  cmd: ''
  exp: "Returns the raw value in the SV's IV slot, without checks or conversions.\nOnly use when you are sure SvIOK is true. See also C<SvIV()>.\n\n\tIV\tSvIVX(SV* sv)"
SvIV_nomg:
  cmd: ''
  exp: "Like C<SvIV> but doesn't process magic.\n\n\tIV\tSvIV_nomg(SV* sv)"
SvIV_set:
  cmd: ''
  exp: "Set the value of the IV pointer in sv to val.  It is possible to perform\nthe same function of this macro with an lvalue assignment to C<SvIVX>.\nWith future Perls, however, it will be more efficient to use \nC<SvIV_set> instead of the lvalue assignment to C<SvIVX>.\n\n\tvoid\tSvIV_set(SV* sv, IV val)"
SvIVx:
  cmd: ''
  exp: "Coerces the given SV to an integer and returns it. Guarantees to evaluate\nC<sv> only once. Only use this if C<sv> is an expression with side effects,\notherwise use the more efficient C<SvIV>.\n\n\tIV\tSvIVx(SV* sv)"
SvIsCOW:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV is Copy-On-Write. (either shared\nhash key scalars, or full Copy On Write scalars if 5.9.0 is configured for\nCOW)\n\n\tbool\tSvIsCOW(SV* sv)"
SvIsCOW_shared_hash:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV is Copy-On-Write shared hash key\nscalar.\n\n\tbool\tSvIsCOW_shared_hash(SV* sv)"
SvLEN:
  cmd: ''
  exp: "Returns the size of the string buffer in the SV, not including any part\nattributable to C<SvOOK>.  See C<SvCUR>.\n\n\tSTRLEN\tSvLEN(SV* sv)"
SvLEN_set:
  cmd: ''
  exp: "Set the actual length of the string which is in the SV.  See C<SvIV_set>.\n\n\tvoid\tSvLEN_set(SV* sv, STRLEN len)"
SvLOCK:
  cmd: ''
  exp: "Arranges for a mutual exclusion lock to be obtained on sv if a suitable module\nhas been loaded.\n\n\tvoid\tSvLOCK(SV* sv)"
SvMAGIC_set:
  cmd: ''
  exp: "Set the value of the MAGIC pointer in sv to val.  See C<SvIV_set>.\n\n\tvoid\tSvMAGIC_set(SV* sv, MAGIC* val)"
SvNIOK:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains a number, integer or\ndouble.\n\n\tU32\tSvNIOK(SV* sv)"
SvNIOK_off:
  cmd: ''
  exp: "Unsets the NV/IV status of an SV.\n\n\tvoid\tSvNIOK_off(SV* sv)"
SvNIOKp:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains a number, integer or\ndouble.  Checks the B<private> setting.  Use C<SvNIOK> instead.\n\n\tU32\tSvNIOKp(SV* sv)"
SvNOK:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains a double.\n\n\tU32\tSvNOK(SV* sv)"
SvNOK_off:
  cmd: ''
  exp: "Unsets the NV status of an SV.\n\n\tvoid\tSvNOK_off(SV* sv)"
SvNOK_on:
  cmd: ''
  exp: "Tells an SV that it is a double.\n\n\tvoid\tSvNOK_on(SV* sv)"
SvNOK_only:
  cmd: ''
  exp: "Tells an SV that it is a double and disables all other OK bits.\n\n\tvoid\tSvNOK_only(SV* sv)"
SvNOKp:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains a double.  Checks the\nB<private> setting.  Use C<SvNOK> instead.\n\n\tU32\tSvNOKp(SV* sv)"
SvNV:
  cmd: ''
  exp: "Coerce the given SV to a double and return it. See C<SvNVx> for a version\nwhich guarantees to evaluate sv only once.\n\n\tNV\tSvNV(SV* sv)"
SvNVX:
  cmd: ''
  exp: "Returns the raw value in the SV's NV slot, without checks or conversions.\nOnly use when you are sure SvNOK is true. See also C<SvNV()>.\n\n\tNV\tSvNVX(SV* sv)"
SvNV_set:
  cmd: ''
  exp: "Set the value of the NV pointer in sv to val.  See C<SvIV_set>.\n\n\tvoid\tSvNV_set(SV* sv, NV val)"
SvNVx:
  cmd: ''
  exp: "Coerces the given SV to a double and returns it. Guarantees to evaluate\nC<sv> only once. Only use this if C<sv> is an expression with side effects,\notherwise use the more efficient C<SvNV>.\n\n\tNV\tSvNVx(SV* sv)"
SvOK:
  cmd: ''
  exp: "Returns a U32 value indicating whether the value is defined. This is\nonly meaningful for scalars.\n\n\tU32\tSvOK(SV* sv)"
SvOOK:
  cmd: ''
  exp: "Returns a U32 indicating whether the SvIVX is a valid offset value for\nthe SvPVX.  This hack is used internally to speed up removal of characters\nfrom the beginning of a SvPV.  When SvOOK is true, then the start of the\nallocated string buffer is really (SvPVX - SvIVX).\n\n\tU32\tSvOOK(SV* sv)"
SvPOK:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains a character\nstring.\n\n\tU32\tSvPOK(SV* sv)"
SvPOK_off:
  cmd: ''
  exp: "Unsets the PV status of an SV.\n\n\tvoid\tSvPOK_off(SV* sv)"
SvPOK_on:
  cmd: ''
  exp: "Tells an SV that it is a string.\n\n\tvoid\tSvPOK_on(SV* sv)"
SvPOK_only:
  cmd: ''
  exp: "Tells an SV that it is a string and disables all other OK bits.\nWill also turn off the UTF-8 status.\n\n\tvoid\tSvPOK_only(SV* sv)"
SvPOK_only_UTF8:
  cmd: ''
  exp: "Tells an SV that it is a string and disables all other OK bits,\nand leaves the UTF-8 status as it was.\n\n\tvoid\tSvPOK_only_UTF8(SV* sv)"
SvPOKp:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains a character string.\nChecks the B<private> setting.  Use C<SvPOK> instead.\n\n\tU32\tSvPOKp(SV* sv)"
SvPV:
  cmd: ''
  exp: "Returns a pointer to the string in the SV, or a stringified form of\nthe SV if the SV does not contain a string.  The SV may cache the\nstringified version becoming C<SvPOK>.  Handles 'get' magic. See also\nC<SvPVx> for a version which guarantees to evaluate sv only once.\n\n\tchar*\tSvPV(SV* sv, STRLEN len)"
SvPVX:
  cmd: ''
  exp: "Returns a pointer to the physical string in the SV.  The SV must contain a\nstring.\n\n\tchar*\tSvPVX(SV* sv)"
SvPV_force:
  cmd: ''
  exp: "Like C<SvPV> but will force the SV into containing just a string\n(C<SvPOK_only>).  You want force if you are going to update the C<SvPVX>\ndirectly.\n\n\tchar*\tSvPV_force(SV* sv, STRLEN len)"
SvPV_force_nomg:
  cmd: ''
  exp: "Like C<SvPV> but will force the SV into containing just a string\n(C<SvPOK_only>).  You want force if you are going to update the C<SvPVX>\ndirectly. Doesn't process magic.\n\n\tchar*\tSvPV_force_nomg(SV* sv, STRLEN len)"
SvPV_nolen:
  cmd: ''
  exp: "Returns a pointer to the string in the SV, or a stringified form of\nthe SV if the SV does not contain a string.  The SV may cache the\nstringified form becoming C<SvPOK>.  Handles 'get' magic.\n\n\tchar*\tSvPV_nolen(SV* sv)"
SvPV_nomg:
  cmd: ''
  exp: "Like C<SvPV> but doesn't process magic.\n\n\tchar*\tSvPV_nomg(SV* sv, STRLEN len)"
SvPV_set:
  cmd: ''
  exp: "Set the value of the PV pointer in sv to val.  See C<SvIV_set>.\n\n\tvoid\tSvPV_set(SV* sv, char* val)"
SvPVbyte:
  cmd: ''
  exp: "Like C<SvPV>, but converts sv to byte representation first if necessary.\n\n\tchar*\tSvPVbyte(SV* sv, STRLEN len)"
SvPVbyte_force:
  cmd: ''
  exp: "Like C<SvPV_force>, but converts sv to byte representation first if necessary.\n\n\tchar*\tSvPVbyte_force(SV* sv, STRLEN len)"
SvPVbyte_nolen:
  cmd: ''
  exp: "Like C<SvPV_nolen>, but converts sv to byte representation first if necessary.\n\n\tchar*\tSvPVbyte_nolen(SV* sv)"
SvPVbytex:
  cmd: ''
  exp: "Like C<SvPV>, but converts sv to byte representation first if necessary.\nGuarantees to evaluate sv only once; use the more efficient C<SvPVbyte>\notherwise.\n\n\tchar*\tSvPVbytex(SV* sv, STRLEN len)"
SvPVbytex_force:
  cmd: ''
  exp: "Like C<SvPV_force>, but converts sv to byte representation first if necessary.\nGuarantees to evaluate sv only once; use the more efficient C<SvPVbyte_force>\notherwise.\n\n\tchar*\tSvPVbytex_force(SV* sv, STRLEN len)"
SvPVutf8:
  cmd: ''
  exp: "Like C<SvPV>, but converts sv to utf8 first if necessary.\n\n\tchar*\tSvPVutf8(SV* sv, STRLEN len)"
SvPVutf8_force:
  cmd: ''
  exp: "Like C<SvPV_force>, but converts sv to utf8 first if necessary.\n\n\tchar*\tSvPVutf8_force(SV* sv, STRLEN len)"
SvPVutf8_nolen:
  cmd: ''
  exp: "Like C<SvPV_nolen>, but converts sv to utf8 first if necessary.\n\n\tchar*\tSvPVutf8_nolen(SV* sv)"
SvPVutf8x:
  cmd: ''
  exp: "Like C<SvPV>, but converts sv to utf8 first if necessary.\nGuarantees to evaluate sv only once; use the more efficient C<SvPVutf8>\notherwise.\n\n\tchar*\tSvPVutf8x(SV* sv, STRLEN len)"
SvPVutf8x_force:
  cmd: ''
  exp: "Like C<SvPV_force>, but converts sv to utf8 first if necessary.\nGuarantees to evaluate sv only once; use the more efficient C<SvPVutf8_force>\notherwise.\n\n\tchar*\tSvPVutf8x_force(SV* sv, STRLEN len)"
SvPVx:
  cmd: ''
  exp: "A version of C<SvPV> which guarantees to evaluate C<sv> only once.\nOnly use this if C<sv> is an expression with side effects, otherwise use the\nmore efficient C<SvPVX>.\n\n\tchar*\tSvPVx(SV* sv, STRLEN len)"
SvREFCNT:
  cmd: ''
  exp: "Returns the value of the object's reference count.\n\n\tU32\tSvREFCNT(SV* sv)"
SvREFCNT_dec:
  cmd: ''
  exp: "Decrements the reference count of the given SV.\n\n\tvoid\tSvREFCNT_dec(SV* sv)"
SvREFCNT_inc:
  cmd: ''
  exp: "Increments the reference count of the given SV.\n\nAll of the following SvREFCNT_inc* macros are optimized versions of\nSvREFCNT_inc, and can be replaced with SvREFCNT_inc.\n\n\tSV*\tSvREFCNT_inc(SV* sv)"
SvREFCNT_inc_NN:
  cmd: ''
  exp: "Same as SvREFCNT_inc, but can only be used if you know I<sv>\nis not NULL.  Since we don't have to check the NULLness, it's faster\nand smaller.\n\n\tSV*\tSvREFCNT_inc_NN(SV* sv)"
SvREFCNT_inc_simple:
  cmd: ''
  exp: "Same as SvREFCNT_inc, but can only be used with expressions without side\neffects.  Since we don't have to store a temporary value, it's faster.\n\n\tSV*\tSvREFCNT_inc_simple(SV* sv)"
SvREFCNT_inc_simple_NN:
  cmd: ''
  exp: "Same as SvREFCNT_inc_simple, but can only be used if you know I<sv>\nis not NULL.  Since we don't have to check the NULLness, it's faster\nand smaller.\n\n\tSV*\tSvREFCNT_inc_simple_NN(SV* sv)"
SvREFCNT_inc_simple_void:
  cmd: ''
  exp: "Same as SvREFCNT_inc_simple, but can only be used if you don't need the\nreturn value.  The macro doesn't need to return a meaningful value.\n\n\tvoid\tSvREFCNT_inc_simple_void(SV* sv)"
SvREFCNT_inc_simple_void_NN:
  cmd: ''
  exp: "Same as SvREFCNT_inc, but can only be used if you don't need the return\nvalue, and you know that I<sv> is not NULL.  The macro doesn't need\nto return a meaningful value, or check for NULLness, so it's smaller\nand faster.\n\n\tvoid\tSvREFCNT_inc_simple_void_NN(SV* sv)"
SvREFCNT_inc_void:
  cmd: ''
  exp: "Same as SvREFCNT_inc, but can only be used if you don't need the\nreturn value.  The macro doesn't need to return a meaningful value.\n\n\tvoid\tSvREFCNT_inc_void(SV* sv)"
SvREFCNT_inc_void_NN:
  cmd: ''
  exp: "Same as SvREFCNT_inc, but can only be used if you don't need the return\nvalue, and you know that I<sv> is not NULL.  The macro doesn't need\nto return a meaningful value, or check for NULLness, so it's smaller\nand faster.\n\n\tvoid\tSvREFCNT_inc_void_NN(SV* sv)"
SvROK:
  cmd: ''
  exp: "Tests if the SV is an RV.\n\n\tU32\tSvROK(SV* sv)"
SvROK_off:
  cmd: ''
  exp: "Unsets the RV status of an SV.\n\n\tvoid\tSvROK_off(SV* sv)"
SvROK_on:
  cmd: ''
  exp: "Tells an SV that it is an RV.\n\n\tvoid\tSvROK_on(SV* sv)"
SvRV:
  cmd: ''
  exp: "Dereferences an RV to return the SV.\n\n\tSV*\tSvRV(SV* sv)"
SvRV_set:
  cmd: ''
  exp: "Set the value of the RV pointer in sv to val.  See C<SvIV_set>.\n\n\tvoid\tSvRV_set(SV* sv, SV* val)"
SvRX:
  cmd: ''
  exp: "Convenience macro to get the REGEXP from a SV. This is approximately\nequivalent to the following snippet:\n\n    if (SvMAGICAL(sv))\n        mg_get(sv);\n    if (SvROK(sv) &&\n        (tmpsv = (SV*)SvRV(sv)) &&\n        SvTYPE(tmpsv) == SVt_PVMG &&\n        (tmpmg = mg_find(tmpsv, PERL_MAGIC_qr)))\n    {\n        return (REGEXP *)tmpmg->mg_obj;\n    }\n\nNULL will be returned if a REGEXP* is not found.\n\n\tREGEXP *\tSvRX(SV *sv)"
SvRXOK:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV contains qr magic\n(PERL_MAGIC_qr).\n\nIf you want to do something with the REGEXP* later use SvRX instead\nand check for NULL.\n\n\tbool\tSvRXOK(SV* sv)"
SvSETMAGIC:
  cmd: ''
  exp: "Invokes C<mg_set> on an SV if it has 'set' magic.  This macro evaluates its\nargument more than once.\n\n\tvoid\tSvSETMAGIC(SV* sv)"
SvSHARE:
  cmd: ''
  exp: "Arranges for sv to be shared between threads if a suitable module\nhas been loaded.\n\n\tvoid\tSvSHARE(SV* sv)"
SvSTASH:
  cmd: ''
  exp: "Returns the stash of the SV.\n\n\tHV*\tSvSTASH(SV* sv)"
SvSTASH_set:
  cmd: ''
  exp: "Set the value of the STASH pointer in sv to val.  See C<SvIV_set>.\n\n\tvoid\tSvSTASH_set(SV* sv, HV* val)"
SvSetMagicSV:
  cmd: ''
  exp: "Like C<SvSetSV>, but does any set magic required afterwards.\n\n\tvoid\tSvSetMagicSV(SV* dsb, SV* ssv)"
SvSetMagicSV_nosteal:
  cmd: ''
  exp: "Like C<SvSetSV_nosteal>, but does any set magic required afterwards.\n\n\tvoid\tSvSetMagicSV_nosteal(SV* dsv, SV* ssv)"
SvSetSV:
  cmd: ''
  exp: "Calls C<sv_setsv> if dsv is not the same as ssv.  May evaluate arguments\nmore than once.\n\n\tvoid\tSvSetSV(SV* dsb, SV* ssv)"
SvSetSV_nosteal:
  cmd: ''
  exp: "Calls a non-destructive version of C<sv_setsv> if dsv is not the same as\nssv. May evaluate arguments more than once.\n\n\tvoid\tSvSetSV_nosteal(SV* dsv, SV* ssv)"
SvTAINT:
  cmd: ''
  exp: "Taints an SV if tainting is enabled.\n\n\tvoid\tSvTAINT(SV* sv)"
SvTAINTED:
  cmd: ''
  exp: "Checks to see if an SV is tainted. Returns TRUE if it is, FALSE if\nnot.\n\n\tbool\tSvTAINTED(SV* sv)"
SvTAINTED_off:
  cmd: ''
  exp: "Untaints an SV. Be I<very> careful with this routine, as it short-circuits\nsome of Perl's fundamental security features. XS module authors should not\nuse this function unless they fully understand all the implications of\nunconditionally untainting the value. Untainting should be done in the\nstandard perl fashion, via a carefully crafted regexp, rather than directly\nuntainting variables.\n\n\tvoid\tSvTAINTED_off(SV* sv)"
SvTAINTED_on:
  cmd: ''
  exp: "Marks an SV as tainted if tainting is enabled.\n\n\tvoid\tSvTAINTED_on(SV* sv)"
SvTRUE:
  cmd: ''
  exp: "Returns a boolean indicating whether Perl would evaluate the SV as true or\nfalse.  See SvOK() for a defined/undefined test.  Does not handle 'get' magic.\n\n\tbool\tSvTRUE(SV* sv)"
SvTYPE:
  cmd: ''
  exp: "Returns the type of the SV.  See C<svtype>.\n\n\tsvtype\tSvTYPE(SV* sv)"
SvUNLOCK:
  cmd: ''
  exp: "Releases a mutual exclusion lock on sv if a suitable module\nhas been loaded.\n\n\tvoid\tSvUNLOCK(SV* sv)"
SvUOK:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV contains an unsigned integer.\n\n\tbool\tSvUOK(SV* sv)"
SvUPGRADE:
  cmd: ''
  exp: "Used to upgrade an SV to a more complex form.  Uses C<sv_upgrade> to\nperform the upgrade if necessary.  See C<svtype>.\n\n\tvoid\tSvUPGRADE(SV* sv, svtype type)"
SvUTF8:
  cmd: ''
  exp: "Returns a U32 value indicating whether the SV contains UTF-8 encoded data.\nCall this after SvPV() in case any call to string overloading updates the\ninternal flag.\n\n\tU32\tSvUTF8(SV* sv)"
SvUTF8_off:
  cmd: ''
  exp: "Unsets the UTF-8 status of an SV.\n\n\tvoid\tSvUTF8_off(SV *sv)"
SvUTF8_on:
  cmd: ''
  exp: "Turn on the UTF-8 status of an SV (the data is not changed, just the flag).\nDo not use frivolously.\n\n\tvoid\tSvUTF8_on(SV *sv)"
SvUV:
  cmd: ''
  exp: "Coerces the given SV to an unsigned integer and returns it.  See C<SvUVx>\nfor a version which guarantees to evaluate sv only once.\n\n\tUV\tSvUV(SV* sv)"
SvUVX:
  cmd: ''
  exp: "Returns the raw value in the SV's UV slot, without checks or conversions.\nOnly use when you are sure SvIOK is true. See also C<SvUV()>.\n\n\tUV\tSvUVX(SV* sv)"
SvUV_nomg:
  cmd: ''
  exp: "Like C<SvUV> but doesn't process magic.\n\n\tUV\tSvUV_nomg(SV* sv)"
SvUV_set:
  cmd: ''
  exp: "Set the value of the UV pointer in sv to val.  See C<SvIV_set>.\n\n\tvoid\tSvUV_set(SV* sv, UV val)"
SvUVx:
  cmd: ''
  exp: "Coerces the given SV to an unsigned integer and returns it. Guarantees to\nC<sv> only once. Only use this if C<sv> is an expression with side effects,\notherwise use the more efficient C<SvUV>.\n\n\tUV\tSvUVx(SV* sv)"
SvVOK:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV contains a v-string.\n\n\tbool\tSvVOK(SV* sv)"
THIS:
  cmd: ''
  exp: "Variable which is setup by C<xsubpp> to designate the object in a C++ \nXSUB.  This is always the proper type for the C++ object.  See C<CLASS> and \nL<perlxs/\"Using XS With C++\">.\n\n\t(whatever)\tTHIS"
UNDERBAR:
  cmd: ''
  exp: "The SV* corresponding to the $_ variable. Works even if there\nis a lexical $_ in scope."
XCPT_CATCH:
  cmd: ''
  exp: "Introduces a catch block.  See L<perlguts/\"Exception Handling\">."
XCPT_RETHROW:
  cmd: ''
  exp: "Rethrows a previously caught exception.  See L<perlguts/\"Exception Handling\">.\n\n\t\tXCPT_RETHROW;"
XCPT_TRY_END:
  cmd: ''
  exp: "Ends a try block.  See L<perlguts/\"Exception Handling\">."
XCPT_TRY_START:
  cmd: ''
  exp: "Starts a try block.  See L<perlguts/\"Exception Handling\">."
XPUSHi:
  cmd: ''
  exp: "Push an integer onto the stack, extending the stack if necessary.  Handles\n'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to\ndeclare it.  Do not call multiple C<TARG>-oriented macros to return lists\nfrom XSUB's - see C<mXPUSHi> instead.  See also C<PUSHi> and C<mPUSHi>.\n\n\tvoid\tXPUSHi(IV iv)"
XPUSHmortal:
  cmd: ''
  exp: "Push a new mortal SV onto the stack, extending the stack if necessary.\nDoes not use C<TARG>.  See also C<XPUSHs>, C<PUSHmortal> and C<PUSHs>.\n\n\tvoid\tXPUSHmortal()"
XPUSHn:
  cmd: ''
  exp: "Push a double onto the stack, extending the stack if necessary.  Handles\n'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be called to\ndeclare it.  Do not call multiple C<TARG>-oriented macros to return lists\nfrom XSUB's - see C<mXPUSHn> instead.  See also C<PUSHn> and C<mPUSHn>.\n\n\tvoid\tXPUSHn(NV nv)"
XPUSHp:
  cmd: ''
  exp: "Push a string onto the stack, extending the stack if necessary.  The C<len>\nindicates the length of the string.  Handles 'set' magic.  Uses C<TARG>, so\nC<dTARGET> or C<dXSTARG> should be called to declare it.  Do not call\nmultiple C<TARG>-oriented macros to return lists from XSUB's - see\nC<mXPUSHp> instead.  See also C<PUSHp> and C<mPUSHp>.\n\n\tvoid\tXPUSHp(char* str, STRLEN len)"
XPUSHs:
  cmd: ''
  exp: "Push an SV onto the stack, extending the stack if necessary.  Does not\nhandle 'set' magic.  Does not use C<TARG>.  See also C<XPUSHmortal>,\nC<PUSHs> and C<PUSHmortal>.\n\n\tvoid\tXPUSHs(SV* sv)"
XPUSHu:
  cmd: ''
  exp: "Push an unsigned integer onto the stack, extending the stack if necessary.\nHandles 'set' magic.  Uses C<TARG>, so C<dTARGET> or C<dXSTARG> should be\ncalled to declare it.  Do not call multiple C<TARG>-oriented macros to\nreturn lists from XSUB's - see C<mXPUSHu> instead.  See also C<PUSHu> and\nC<mPUSHu>.\n\n\tvoid\tXPUSHu(UV uv)"
XS:
  cmd: ''
  exp: "Macro to declare an XSUB and its C parameter list.  This is handled by\nC<xsubpp>."
XSRETURN:
  cmd: ''
  exp: "Return from XSUB, indicating number of items on the stack.  This is usually\nhandled by C<xsubpp>.\n\n\tvoid\tXSRETURN(int nitems)"
XSRETURN_EMPTY:
  cmd: ''
  exp: "Return an empty list from an XSUB immediately.\n\n\t\tXSRETURN_EMPTY;"
XSRETURN_IV:
  cmd: ''
  exp: "Return an integer from an XSUB immediately.  Uses C<XST_mIV>.\n\n\tvoid\tXSRETURN_IV(IV iv)"
XSRETURN_NO:
  cmd: ''
  exp: "Return C<&PL_sv_no> from an XSUB immediately.  Uses C<XST_mNO>.\n\n\t\tXSRETURN_NO;"
XSRETURN_NV:
  cmd: ''
  exp: "Return a double from an XSUB immediately.  Uses C<XST_mNV>.\n\n\tvoid\tXSRETURN_NV(NV nv)"
XSRETURN_PV:
  cmd: ''
  exp: "Return a copy of a string from an XSUB immediately.  Uses C<XST_mPV>.\n\n\tvoid\tXSRETURN_PV(char* str)"
XSRETURN_UNDEF:
  cmd: ''
  exp: "Return C<&PL_sv_undef> from an XSUB immediately.  Uses C<XST_mUNDEF>.\n\n\t\tXSRETURN_UNDEF;"
XSRETURN_UV:
  cmd: ''
  exp: "Return an integer from an XSUB immediately.  Uses C<XST_mUV>.\n\n\tvoid\tXSRETURN_UV(IV uv)"
XSRETURN_YES:
  cmd: ''
  exp: "Return C<&PL_sv_yes> from an XSUB immediately.  Uses C<XST_mYES>.\n\n\t\tXSRETURN_YES;"
XST_mIV:
  cmd: ''
  exp: "Place an integer into the specified position C<pos> on the stack.  The\nvalue is stored in a new mortal SV.\n\n\tvoid\tXST_mIV(int pos, IV iv)"
XST_mNO:
  cmd: ''
  exp: "Place C<&PL_sv_no> into the specified position C<pos> on the\nstack.\n\n\tvoid\tXST_mNO(int pos)"
XST_mNV:
  cmd: ''
  exp: "Place a double into the specified position C<pos> on the stack.  The value\nis stored in a new mortal SV.\n\n\tvoid\tXST_mNV(int pos, NV nv)"
XST_mPV:
  cmd: ''
  exp: "Place a copy of a string into the specified position C<pos> on the stack. \nThe value is stored in a new mortal SV.\n\n\tvoid\tXST_mPV(int pos, char* str)"
XST_mUNDEF:
  cmd: ''
  exp: "Place C<&PL_sv_undef> into the specified position C<pos> on the\nstack.\n\n\tvoid\tXST_mUNDEF(int pos)"
XST_mYES:
  cmd: ''
  exp: "Place C<&PL_sv_yes> into the specified position C<pos> on the\nstack.\n\n\tvoid\tXST_mYES(int pos)"
XS_VERSION:
  cmd: ''
  exp: "The version identifier for an XS module.  This is usually\nhandled automatically by C<ExtUtils::MakeMaker>.  See C<XS_VERSION_BOOTCHECK>."
XS_VERSION_BOOTCHECK:
  cmd: ''
  exp: "Macro to verify that a PM module's $VERSION variable matches the XS\nmodule's C<XS_VERSION> variable.  This is usually handled automatically by\nC<xsubpp>.  See L<perlxs/\"The VERSIONCHECK: Keyword\">.\n\n\t\tXS_VERSION_BOOTCHECK;"
Zero:
  cmd: ''
  exp: "The XSUB-writer's interface to the C C<memzero> function.  The C<dest> is the\ndestination, C<nitems> is the number of items, and C<type> is the type.\n\n\tvoid\tZero(void* dest, int nitems, type)"
ZeroD:
  cmd: ''
  exp: "Like C<Zero> but returns dest. Useful for encouraging compilers to tail-call\noptimise.\n\n\tvoid *\tZeroD(void* dest, int nitems, type)"
av_clear:
  cmd: ''
  exp: "Clears an array, making it empty.  Does not free the memory used by the\narray itself.\n\n\tvoid\tav_clear(AV *av)"
av_create_and_push:
  cmd: ''
  exp: "Push an SV onto the end of the array, creating the array if necessary.\nA small internal helper function to remove a commonly duplicated idiom.\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tvoid\tav_create_and_push(AV **const avp, SV *const val)"
av_create_and_unshift_one:
  cmd: ''
  exp: "Unshifts an SV onto the beginning of the array, creating the array if\nnecessary.\nA small internal helper function to remove a commonly duplicated idiom.\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tSV**\tav_create_and_unshift_one(AV **const avp, SV *const val)"
av_delete:
  cmd: ''
  exp: "Deletes the element indexed by C<key> from the array.  Returns the\ndeleted element. If C<flags> equals C<G_DISCARD>, the element is freed\nand null is returned.\n\n\tSV*\tav_delete(AV *av, I32 key, I32 flags)"
av_exists:
  cmd: ''
  exp: "Returns true if the element indexed by C<key> has been initialized.\n\nThis relies on the fact that uninitialized array elements are set to\nC<&PL_sv_undef>.\n\n\tbool\tav_exists(AV *av, I32 key)"
av_extend:
  cmd: ''
  exp: "Pre-extend an array.  The C<key> is the index to which the array should be\nextended.\n\n\tvoid\tav_extend(AV *av, I32 key)"
av_fetch:
  cmd: ''
  exp: "Returns the SV at the specified index in the array.  The C<key> is the\nindex.  If C<lval> is set then the fetch will be part of a store.  Check\nthat the return value is non-null before dereferencing it to a C<SV*>.\n\nSee L<perlguts/\"Understanding the Magic of Tied Hashes and Arrays\"> for\nmore information on how to use this function on tied arrays. \n\n\tSV**\tav_fetch(AV *av, I32 key, I32 lval)"
av_fill:
  cmd: ''
  exp: "Set the highest index in the array to the given number, equivalent to\nPerl's C<$#array = $fill;>.\n\nThe number of elements in the an array will be C<fill + 1> after\nav_fill() returns.  If the array was previously shorter then the\nadditional elements appended are set to C<PL_sv_undef>.  If the array\nwas longer, then the excess elements are freed.  C<av_fill(av, -1)> is\nthe same as C<av_clear(av)>.\n\n\tvoid\tav_fill(AV *av, I32 fill)"
av_len:
  cmd: ''
  exp: "Returns the highest index in the array.  The number of elements in the\narray is C<av_len(av) + 1>.  Returns -1 if the array is empty.\n\n\tI32\tav_len(const AV *av)"
av_make:
  cmd: ''
  exp: "Creates a new AV and populates it with a list of SVs.  The SVs are copied\ninto the array, so they may be freed after the call to av_make.  The new AV\nwill have a reference count of 1.\n\n\tAV*\tav_make(I32 size, SV **strp)"
av_pop:
  cmd: ''
  exp: "Pops an SV off the end of the array.  Returns C<&PL_sv_undef> if the array\nis empty.\n\n\tSV*\tav_pop(AV *av)"
av_push:
  cmd: ''
  exp: "Pushes an SV onto the end of the array.  The array will grow automatically\nto accommodate the addition. Like C<av_store>, this takes ownership of one\nreference count.\n\n\tvoid\tav_push(AV *av, SV *val)"
av_shift:
  cmd: ''
  exp: "Shifts an SV off the beginning of the array. Returns C<&PL_sv_undef> if the \narray is empty.\n\n\tSV*\tav_shift(AV *av)"
av_store:
  cmd: ''
  exp: "Stores an SV in an array.  The array index is specified as C<key>.  The\nreturn value will be NULL if the operation failed or if the value did not\nneed to be actually stored within the array (as in the case of tied\narrays). Otherwise it can be dereferenced to get the original C<SV*>.  Note\nthat the caller is responsible for suitably incrementing the reference\ncount of C<val> before the call, and decrementing it if the function\nreturned NULL.\n\nSee L<perlguts/\"Understanding the Magic of Tied Hashes and Arrays\"> for\nmore information on how to use this function on tied arrays.\n\n\tSV**\tav_store(AV *av, I32 key, SV *val)"
av_undef:
  cmd: ''
  exp: "Undefines the array.  Frees the memory used by the array itself.\n\n\tvoid\tav_undef(AV *av)"
av_unshift:
  cmd: ''
  exp: "Unshift the given number of C<undef> values onto the beginning of the\narray.  The array will grow automatically to accommodate the addition.  You\nmust then use C<av_store> to assign values to these new elements.\n\n\tvoid\tav_unshift(AV *av, I32 num)"
ax:
  cmd: ''
  exp: "Variable which is setup by C<xsubpp> to indicate the stack base offset,\nused by the C<ST>, C<XSprePUSH> and C<XSRETURN> macros.  The C<dMARK> macro\nmust be called prior to setup the C<MARK> variable.\n\n\tI32\tax"
bytes_from_utf8:
  cmd: ''
  exp: "Converts a string C<s> of length C<len> from UTF-8 into native byte encoding.\nUnlike C<utf8_to_bytes> but like C<bytes_to_utf8>, returns a pointer to\nthe newly-created string, and updates C<len> to contain the new\nlength.  Returns the original string if no conversion occurs, C<len>\nis unchanged. Do nothing if C<is_utf8> points to 0. Sets C<is_utf8> to\n0 if C<s> is converted or consisted entirely of characters that are invariant\nin utf8 (i.e., US-ASCII on non-EBCDIC machines).\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tU8*\tbytes_from_utf8(const U8 *s, STRLEN *len, bool *is_utf8)"
bytes_to_utf8:
  cmd: ''
  exp: "Converts a string C<s> of length C<len> from the native encoding into UTF-8.\nReturns a pointer to the newly-created string, and sets C<len> to\nreflect the new length.\n\nA NUL character will be written after the end of the string.\n\nIf you want to convert to UTF-8 from encodings other than\nthe native (Latin1 or EBCDIC),\nsee sv_recode_to_utf8().\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tU8*\tbytes_to_utf8(const U8 *s, STRLEN *len)"
call_argv:
  cmd: ''
  exp: "Performs a callback to the specified Perl sub.  See L<perlcall>.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tI32\tcall_argv(const char* sub_name, I32 flags, char** argv)"
call_method:
  cmd: ''
  exp: "Performs a callback to the specified Perl method.  The blessed object must\nbe on the stack.  See L<perlcall>.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tI32\tcall_method(const char* methname, I32 flags)"
call_pv:
  cmd: ''
  exp: "Performs a callback to the specified Perl sub.  See L<perlcall>.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tI32\tcall_pv(const char* sub_name, I32 flags)"
call_sv:
  cmd: ''
  exp: "Performs a callback to the Perl sub whose name is in the SV.  See\nL<perlcall>.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tI32\tcall_sv(SV* sv, VOL I32 flags)"
croak:
  cmd: ''
  exp: "This is the XSUB-writer's interface to Perl's C<die> function.\nNormally call this function the same way you call the C C<printf>\nfunction.  Calling C<croak> returns control directly to Perl,\nsidestepping the normal C order of execution. See C<warn>.\n\nIf you want to throw an exception object, assign the object to\nC<$@> and then pass C<NULL> to croak():\n\n   errsv = get_sv(\"@\", GV_ADD);\n   sv_setsv(errsv, exception_object);\n   croak(NULL);\n\n\tvoid\tcroak(const char* pat, ...)"
croak_xs_usage:
  cmd: ''
  exp: "A specialised variant of C<croak()> for emitting the usage message for xsubs\n\n    croak_xs_usage(cv, \"eee_yow\");\n\nworks out the package name and subroutine name from C<cv>, and then calls\nC<croak()>. Hence if C<cv> is C<&ouch::awk>, it would call C<croak> as:\n\n    Perl_croak(aTHX_ \"Usage %s::%s(%s)\", \"ouch\" \"awk\", \"eee_yow\");\n\n\tvoid\tcroak_xs_usage(const CV *const cv, const char *const params)"
cv_const_sv:
  cmd: ''
  exp: "If C<cv> is a constant sub eligible for inlining. returns the constant\nvalue returned by the sub.  Otherwise, returns NULL.\n\nConstant subs can be created with C<newCONSTSUB> or as described in\nL<perlsub/\"Constant Functions\">.\n\n\tSV*\tcv_const_sv(CV* cv)"
cv_undef:
  cmd: ''
  exp: "Clear out all the active components of a CV. This can happen either\nby an explicit C<undef &foo>, or by the reference count going to zero.\nIn the former case, we keep the CvOUTSIDE pointer, so that any anonymous\nchildren can still follow the full lexical scope chain.\n\n\tvoid\tcv_undef(CV* cv)"
dAX:
  cmd: ''
  exp: "Sets up the C<ax> variable.\nThis is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.\n\n\t\tdAX;"
dAXMARK:
  cmd: ''
  exp: "Sets up the C<ax> variable and stack marker variable C<mark>.\nThis is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.\n\n\t\tdAXMARK;"
dITEMS:
  cmd: ''
  exp: "Sets up the C<items> variable.\nThis is usually handled automatically by C<xsubpp> by calling C<dXSARGS>.\n\n\t\tdITEMS;"
dMARK:
  cmd: ''
  exp: "Declare a stack marker variable, C<mark>, for the XSUB.  See C<MARK> and\nC<dORIGMARK>.\n\n\t\tdMARK;"
dMULTICALL:
  cmd: ''
  exp: "Declare local variables for a multicall. See L<perlcall/Lightweight Callbacks>.\n\n\t\tdMULTICALL;"
dORIGMARK:
  cmd: ''
  exp: "Saves the original stack mark for the XSUB.  See C<ORIGMARK>.\n\n\t\tdORIGMARK;"
dSP:
  cmd: ''
  exp: "Declares a local copy of perl's stack pointer for the XSUB, available via\nthe C<SP> macro.  See C<SP>.\n\n\t\tdSP;"
dUNDERBAR:
  cmd: ''
  exp: "Sets up the C<padoff_du> variable for an XSUB that wishes to use\nC<UNDERBAR>.\n\n\t\tdUNDERBAR;"
dXCPT:
  cmd: ''
  exp: "Set up necessary local variables for exception handling.\nSee L<perlguts/\"Exception Handling\">.\n\n\t\tdXCPT;"
dXSARGS:
  cmd: ''
  exp: "Sets up stack and mark pointers for an XSUB, calling dSP and dMARK.\nSets up the C<ax> and C<items> variables by calling C<dAX> and C<dITEMS>.\nThis is usually handled automatically by C<xsubpp>.\n\n\t\tdXSARGS;"
dXSI32:
  cmd: ''
  exp: "Sets up the C<ix> variable for an XSUB which has aliases.  This is usually\nhandled automatically by C<xsubpp>.\n\n\t\tdXSI32;"
eval_pv:
  cmd: ''
  exp: "Tells Perl to C<eval> the given string and return an SV* result.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tSV*\teval_pv(const char* p, I32 croak_on_error)"
eval_sv:
  cmd: ''
  exp: "Tells Perl to C<eval> the string in the SV.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tI32\teval_sv(SV* sv, I32 flags)"
fbm_compile:
  cmd: ''
  exp: "Analyses the string in order to make fast searches on it using fbm_instr()\n-- the Boyer-Moore algorithm.\n\n\tvoid\tfbm_compile(SV* sv, U32 flags)"
fbm_instr:
  cmd: ''
  exp: "Returns the location of the SV in the string delimited by C<str> and\nC<strend>.  It returns C<NULL> if the string can't be found.  The C<sv>\ndoes not have to be fbm_compiled, but the search will not be as fast\nthen.\n\n\tchar*\tfbm_instr(unsigned char* big, unsigned char* bigend, SV* littlestr, U32 flags)"
find_runcv:
  cmd: ''
  exp: "Locate the CV corresponding to the currently executing sub or eval.\nIf db_seqp is non_null, skip CVs that are in the DB package and populate\n*db_seqp with the cop sequence number at the point that the DB:: code was\nentered. (allows debuggers to eval in the scope of the breakpoint rather\nthan in the scope of the debugger itself).\n\n\tCV*\tfind_runcv(U32 *db_seqp)"
form:
  cmd: ''
  exp: "Takes a sprintf-style format pattern and conventional\n(non-SV) arguments and returns the formatted string.\n\n    (char *) Perl_form(pTHX_ const char* pat, ...)\n\ncan be used any place a string (char *) is required:\n\n    char * s = Perl_form(\"%d.%d\",major,minor);\n\nUses a single private buffer so if you want to format several strings you\nmust explicitly copy the earlier strings away (and free the copies when you\nare done).\n\n\tchar*\tform(const char* pat, ...)"
get_av:
  cmd: ''
  exp: "Returns the AV of the specified Perl array.  C<flags> are passed to\nC<gv_fetchpv>. If C<GV_ADD> is set and the\nPerl variable does not exist then it will be created.  If C<flags> is zero\nand the variable does not exist then NULL is returned.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tAV*\tget_av(const char *name, I32 flags)"
get_cv:
  cmd: ''
  exp: "Uses C<strlen> to get the length of C<name>, then calls C<get_cvn_flags>.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tCV*\tget_cv(const char* name, I32 flags)"
get_cvn_flags:
  cmd: ''
  exp: "Returns the CV of the specified Perl subroutine.  C<flags> are passed to\nC<gv_fetchpvn_flags>. If C<GV_ADD> is set and the Perl subroutine does not\nexist then it will be declared (which has the same effect as saying\nC<sub name;>).  If C<GV_ADD> is not set and the subroutine does not exist\nthen NULL is returned.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tCV*\tget_cvn_flags(const char* name, STRLEN len, I32 flags)"
get_hv:
  cmd: ''
  exp: "Returns the HV of the specified Perl hash.  C<flags> are passed to\nC<gv_fetchpv>. If C<GV_ADD> is set and the\nPerl variable does not exist then it will be created.  If C<flags> is zero\nand the variable does not exist then NULL is returned.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tHV*\tget_hv(const char *name, I32 flags)"
get_sv:
  cmd: ''
  exp: "Returns the SV of the specified Perl scalar.  C<flags> are passed to\nC<gv_fetchpv>. If C<GV_ADD> is set and the\nPerl variable does not exist then it will be created.  If C<flags> is zero\nand the variable does not exist then NULL is returned.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tSV*\tget_sv(const char *name, I32 flags)"
getcwd_sv:
  cmd: ''
  exp: "Fill the sv with current working directory\n\n\tint\tgetcwd_sv(SV* sv)"
grok_bin:
  cmd: ''
  exp: "converts a string representing a binary number to numeric form.\n\nOn entry I<start> and I<*len> give the string to scan, I<*flags> gives\nconversion flags, and I<result> should be NULL or a pointer to an NV.\nThe scan stops at the end of the string, or the first invalid character.\nUnless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an\ninvalid character will also trigger a warning.\nOn return I<*len> is set to the length of the scanned string,\nand I<*flags> gives output flags.\n\nIf the value is <= C<UV_MAX> it is returned as a UV, the output flags are clear,\nand nothing is written to I<*result>. If the value is > UV_MAX C<grok_bin>\nreturns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,\nand writes the value to I<*result> (or the value is discarded if I<result>\nis NULL).\n\nThe binary number may optionally be prefixed with \"0b\" or \"b\" unless\nC<PERL_SCAN_DISALLOW_PREFIX> is set in I<*flags> on entry. If\nC<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the binary\nnumber may use '_' characters to separate digits.\n\n\tUV\tgrok_bin(const char* start, STRLEN* len_p, I32* flags, NV *result)"
grok_hex:
  cmd: ''
  exp: "converts a string representing a hex number to numeric form.\n\nOn entry I<start> and I<*len> give the string to scan, I<*flags> gives\nconversion flags, and I<result> should be NULL or a pointer to an NV.\nThe scan stops at the end of the string, or the first invalid character.\nUnless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an\ninvalid character will also trigger a warning.\nOn return I<*len> is set to the length of the scanned string,\nand I<*flags> gives output flags.\n\nIf the value is <= UV_MAX it is returned as a UV, the output flags are clear,\nand nothing is written to I<*result>. If the value is > UV_MAX C<grok_hex>\nreturns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,\nand writes the value to I<*result> (or the value is discarded if I<result>\nis NULL).\n\nThe hex number may optionally be prefixed with \"0x\" or \"x\" unless\nC<PERL_SCAN_DISALLOW_PREFIX> is set in I<*flags> on entry. If\nC<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the hex\nnumber may use '_' characters to separate digits.\n\n\tUV\tgrok_hex(const char* start, STRLEN* len_p, I32* flags, NV *result)"
grok_number:
  cmd: ''
  exp: "Recognise (or not) a number.  The type of the number is returned\n(0 if unrecognised), otherwise it is a bit-ORed combination of\nIS_NUMBER_IN_UV, IS_NUMBER_GREATER_THAN_UV_MAX, IS_NUMBER_NOT_INT,\nIS_NUMBER_NEG, IS_NUMBER_INFINITY, IS_NUMBER_NAN (defined in perl.h).\n\nIf the value of the number can fit an in UV, it is returned in the *valuep\nIS_NUMBER_IN_UV will be set to indicate that *valuep is valid, IS_NUMBER_IN_UV\nwill never be set unless *valuep is valid, but *valuep may have been assigned\nto during processing even though IS_NUMBER_IN_UV is not set on return.\nIf valuep is NULL, IS_NUMBER_IN_UV will be set for the same cases as when\nvaluep is non-NULL, but no actual assignment (or SEGV) will occur.\n\nIS_NUMBER_NOT_INT will be set with IS_NUMBER_IN_UV if trailing decimals were\nseen (in which case *valuep gives the true value truncated to an integer), and\nIS_NUMBER_NEG if the number is negative (in which case *valuep holds the\nabsolute value).  IS_NUMBER_IN_UV is not set if e notation was used or the\nnumber is larger than a UV.\n\n\tint\tgrok_number(const char *pv, STRLEN len, UV *valuep)"
grok_numeric_radix:
  cmd: ''
  exp: "Scan and skip for a numeric decimal separator (radix).\n\n\tbool\tgrok_numeric_radix(const char **sp, const char *send)"
grok_oct:
  cmd: ''
  exp: "converts a string representing an octal number to numeric form.\n\nOn entry I<start> and I<*len> give the string to scan, I<*flags> gives\nconversion flags, and I<result> should be NULL or a pointer to an NV.\nThe scan stops at the end of the string, or the first invalid character.\nUnless C<PERL_SCAN_SILENT_ILLDIGIT> is set in I<*flags>, encountering an\ninvalid character will also trigger a warning.\nOn return I<*len> is set to the length of the scanned string,\nand I<*flags> gives output flags.\n\nIf the value is <= UV_MAX it is returned as a UV, the output flags are clear,\nand nothing is written to I<*result>. If the value is > UV_MAX C<grok_oct>\nreturns UV_MAX, sets C<PERL_SCAN_GREATER_THAN_UV_MAX> in the output flags,\nand writes the value to I<*result> (or the value is discarded if I<result>\nis NULL).\n\nIf C<PERL_SCAN_ALLOW_UNDERSCORES> is set in I<*flags> then the octal\nnumber may use '_' characters to separate digits.\n\n\tUV\tgrok_oct(const char* start, STRLEN* len_p, I32* flags, NV *result)"
gv_const_sv:
  cmd: ''
  exp: "If C<gv> is a typeglob whose subroutine entry is a constant sub eligible for\ninlining, or C<gv> is a placeholder reference that would be promoted to such\na typeglob, then returns the value returned by the sub.  Otherwise, returns\nNULL.\n\n\tSV*\tgv_const_sv(GV* gv)"
gv_fetchmeth:
  cmd: ''
  exp: "Returns the glob with the given C<name> and a defined subroutine or\nC<NULL>.  The glob lives in the given C<stash>, or in the stashes\naccessible via @ISA and UNIVERSAL::.\n\nThe argument C<level> should be either 0 or -1.  If C<level==0>, as a\nside-effect creates a glob with the given C<name> in the given C<stash>\nwhich in the case of success contains an alias for the subroutine, and sets\nup caching info for this glob.\n\nThis function grants C<\"SUPER\"> token as a postfix of the stash name. The\nGV returned from C<gv_fetchmeth> may be a method cache entry, which is not\nvisible to Perl code.  So when calling C<call_sv>, you should not use\nthe GV directly; instead, you should use the method's CV, which can be\nobtained from the GV with the C<GvCV> macro.\n\n\tGV*\tgv_fetchmeth(HV* stash, const char* name, STRLEN len, I32 level)"
gv_fetchmeth_autoload:
  cmd: ''
  exp: "Same as gv_fetchmeth(), but looks for autoloaded subroutines too.\nReturns a glob for the subroutine.\n\nFor an autoloaded subroutine without a GV, will create a GV even\nif C<level < 0>.  For an autoloaded subroutine without a stub, GvCV()\nof the result may be zero.\n\n\tGV*\tgv_fetchmeth_autoload(HV* stash, const char* name, STRLEN len, I32 level)"
gv_fetchmethod:
  cmd: ''
  exp: "See L<gv_fetchmethod_autoload>.\n\n\tGV*\tgv_fetchmethod(HV* stash, const char* name)"
gv_fetchmethod_autoload:
  cmd: ''
  exp: "Returns the glob which contains the subroutine to call to invoke the method\non the C<stash>.  In fact in the presence of autoloading this may be the\nglob for \"AUTOLOAD\".  In this case the corresponding variable $AUTOLOAD is\nalready setup.\n\nThe third parameter of C<gv_fetchmethod_autoload> determines whether\nAUTOLOAD lookup is performed if the given method is not present: non-zero\nmeans yes, look for AUTOLOAD; zero means no, don't look for AUTOLOAD.\nCalling C<gv_fetchmethod> is equivalent to calling C<gv_fetchmethod_autoload>\nwith a non-zero C<autoload> parameter.\n\nThese functions grant C<\"SUPER\"> token as a prefix of the method name. Note\nthat if you want to keep the returned glob for a long time, you need to\ncheck for it being \"AUTOLOAD\", since at the later time the call may load a\ndifferent subroutine due to $AUTOLOAD changing its value. Use the glob\ncreated via a side effect to do this.\n\nThese functions have the same side-effects and as C<gv_fetchmeth> with\nC<level==0>.  C<name> should be writable if contains C<':'> or C<'\n''>. The warning against passing the GV returned by C<gv_fetchmeth> to\nC<call_sv> apply equally to these functions.\n\n\tGV*\tgv_fetchmethod_autoload(HV* stash, const char* name, I32 autoload)"
gv_stashpv:
  cmd: ''
  exp: "Returns a pointer to the stash for a specified package.  Uses C<strlen> to\ndetermine the length of C<name>, then calls C<gv_stashpvn()>.\n\n\tHV*\tgv_stashpv(const char* name, I32 flags)"
gv_stashpvn:
  cmd: ''
  exp: "Returns a pointer to the stash for a specified package.  The C<namelen>\nparameter indicates the length of the C<name>, in bytes.  C<flags> is passed\nto C<gv_fetchpvn_flags()>, so if set to C<GV_ADD> then the package will be\ncreated if it does not already exist.  If the package does not exist and\nC<flags> is 0 (or any other setting that does not create packages) then NULL\nis returned.\n\n\n\tHV*\tgv_stashpvn(const char* name, U32 namelen, I32 flags)"
gv_stashpvs:
  cmd: ''
  exp: "Like C<gv_stashpvn>, but takes a literal string instead of a string/length pair.\n\n\tHV*\tgv_stashpvs(const char* name, I32 create)"
gv_stashsv:
  cmd: ''
  exp: "Returns a pointer to the stash for a specified package.  See C<gv_stashpvn>.\n\n\tHV*\tgv_stashsv(SV* sv, I32 flags)"
hv_assert:
  cmd: ''
  exp: "Check that a hash is in an internally consistent state.\n\n\tvoid\thv_assert(HV *hv)"
hv_clear:
  cmd: ''
  exp: "Clears a hash, making it empty.\n\n\tvoid\thv_clear(HV* hv)"
hv_clear_placeholders:
  cmd: ''
  exp: "Clears any placeholders from a hash.  If a restricted hash has any of its keys\nmarked as readonly and the key is subsequently deleted, the key is not actually\ndeleted but is marked by assigning it a value of &PL_sv_placeholder.  This tags\nit so it will be ignored by future operations such as iterating over the hash,\nbut will still allow the hash to have a value reassigned to the key at some\nfuture point.  This function clears any such placeholder keys from the hash.\nSee Hash::Util::lock_keys() for an example of its use.\n\n\tvoid\thv_clear_placeholders(HV *hv)"
hv_delete:
  cmd: ''
  exp: "Deletes a key/value pair in the hash.  The value SV is removed from the\nhash and returned to the caller.  The C<klen> is the length of the key.\nThe C<flags> value will normally be zero; if set to G_DISCARD then NULL\nwill be returned.\n\n\tSV*\thv_delete(HV *hv, const char *key, I32 klen, I32 flags)"
hv_delete_ent:
  cmd: ''
  exp: "Deletes a key/value pair in the hash.  The value SV is removed from the\nhash and returned to the caller.  The C<flags> value will normally be zero;\nif set to G_DISCARD then NULL will be returned.  C<hash> can be a valid\nprecomputed hash value, or 0 to ask for it to be computed.\n\n\tSV*\thv_delete_ent(HV *hv, SV *keysv, I32 flags, U32 hash)"
hv_exists:
  cmd: ''
  exp: "Returns a boolean indicating whether the specified hash key exists.  The\nC<klen> is the length of the key.\n\n\tbool\thv_exists(HV *hv, const char *key, I32 klen)"
hv_exists_ent:
  cmd: ''
  exp: "Returns a boolean indicating whether the specified hash key exists. C<hash>\ncan be a valid precomputed hash value, or 0 to ask for it to be\ncomputed.\n\n\tbool\thv_exists_ent(HV *hv, SV *keysv, U32 hash)"
hv_fetch:
  cmd: ''
  exp: "Returns the SV which corresponds to the specified key in the hash.  The\nC<klen> is the length of the key.  If C<lval> is set then the fetch will be\npart of a store.  Check that the return value is non-null before\ndereferencing it to an C<SV*>.\n\nSee L<perlguts/\"Understanding the Magic of Tied Hashes and Arrays\"> for more\ninformation on how to use this function on tied hashes.\n\n\tSV**\thv_fetch(HV *hv, const char *key, I32 klen, I32 lval)"
hv_fetch_ent:
  cmd: ''
  exp: "Returns the hash entry which corresponds to the specified key in the hash.\nC<hash> must be a valid precomputed hash number for the given C<key>, or 0\nif you want the function to compute it.  IF C<lval> is set then the fetch\nwill be part of a store.  Make sure the return value is non-null before\naccessing it.  The return value when C<tb> is a tied hash is a pointer to a\nstatic location, so be sure to make a copy of the structure if you need to\nstore it somewhere.\n\nSee L<perlguts/\"Understanding the Magic of Tied Hashes and Arrays\"> for more\ninformation on how to use this function on tied hashes.\n\n\tHE*\thv_fetch_ent(HV *hv, SV *keysv, I32 lval, U32 hash)"
hv_fetchs:
  cmd: ''
  exp: "Like C<hv_fetch>, but takes a literal string instead of a string/length pair.\n\n\tSV**\thv_fetchs(HV* tb, const char* key, I32 lval)"
hv_iterinit:
  cmd: ''
  exp: "Prepares a starting point to traverse a hash table.  Returns the number of\nkeys in the hash (i.e. the same as C<HvKEYS(tb)>).  The return value is\ncurrently only meaningful for hashes without tie magic.\n\nNOTE: Before version 5.004_65, C<hv_iterinit> used to return the number of\nhash buckets that happen to be in use.  If you still need that esoteric\nvalue, you can get it through the macro C<HvFILL(tb)>.\n\n\n\tI32\thv_iterinit(HV *hv)"
hv_iterkey:
  cmd: ''
  exp: "Returns the key from the current position of the hash iterator.  See\nC<hv_iterinit>.\n\n\tchar*\thv_iterkey(HE* entry, I32* retlen)"
hv_iterkeysv:
  cmd: ''
  exp: "Returns the key as an C<SV*> from the current position of the hash\niterator.  The return value will always be a mortal copy of the key.  Also\nsee C<hv_iterinit>.\n\n\tSV*\thv_iterkeysv(HE* entry)"
hv_iternext:
  cmd: ''
  exp: "Returns entries from a hash iterator.  See C<hv_iterinit>.\n\nYou may call C<hv_delete> or C<hv_delete_ent> on the hash entry that the\niterator currently points to, without losing your place or invalidating your\niterator.  Note that in this case the current entry is deleted from the hash\nwith your iterator holding the last reference to it.  Your iterator is flagged\nto free the entry on the next call to C<hv_iternext>, so you must not discard\nyour iterator immediately else the entry will leak - call C<hv_iternext> to\ntrigger the resource deallocation.\n\n\tHE*\thv_iternext(HV *hv)"
hv_iternext_flags:
  cmd: ''
  exp: "Returns entries from a hash iterator.  See C<hv_iterinit> and C<hv_iternext>.\nThe C<flags> value will normally be zero; if HV_ITERNEXT_WANTPLACEHOLDERS is\nset the placeholders keys (for restricted hashes) will be returned in addition\nto normal keys. By default placeholders are automatically skipped over.\nCurrently a placeholder is implemented with a value that is\nC<&Perl_sv_placeholder>. Note that the implementation of placeholders and\nrestricted hashes may change, and the implementation currently is\ninsufficiently abstracted for any change to be tidy.\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tHE*\thv_iternext_flags(HV *hv, I32 flags)"
hv_iternextsv:
  cmd: ''
  exp: "Performs an C<hv_iternext>, C<hv_iterkey>, and C<hv_iterval> in one\noperation.\n\n\tSV*\thv_iternextsv(HV *hv, char **key, I32 *retlen)"
hv_iterval:
  cmd: ''
  exp: "Returns the value from the current position of the hash iterator.  See\nC<hv_iterkey>.\n\n\tSV*\thv_iterval(HV *hv, HE *entry)"
hv_magic:
  cmd: ''
  exp: "Adds magic to a hash.  See C<sv_magic>.\n\n\tvoid\thv_magic(HV *hv, GV *gv, int how)"
hv_scalar:
  cmd: ''
  exp: "Evaluates the hash in scalar context and returns the result. Handles magic when the hash is tied.\n\n\tSV*\thv_scalar(HV *hv)"
hv_store:
  cmd: ''
  exp: "Stores an SV in a hash.  The hash key is specified as C<key> and C<klen> is\nthe length of the key.  The C<hash> parameter is the precomputed hash\nvalue; if it is zero then Perl will compute it.  The return value will be\nNULL if the operation failed or if the value did not need to be actually\nstored within the hash (as in the case of tied hashes).  Otherwise it can\nbe dereferenced to get the original C<SV*>.  Note that the caller is\nresponsible for suitably incrementing the reference count of C<val> before\nthe call, and decrementing it if the function returned NULL.  Effectively\na successful hv_store takes ownership of one reference to C<val>.  This is\nusually what you want; a newly created SV has a reference count of one, so\nif all your code does is create SVs then store them in a hash, hv_store\nwill own the only reference to the new SV, and your code doesn't need to do\nanything further to tidy up.  hv_store is not implemented as a call to\nhv_store_ent, and does not create a temporary SV for the key, so if your\nkey data is not already in SV form then use hv_store in preference to\nhv_store_ent.\n\nSee L<perlguts/\"Understanding the Magic of Tied Hashes and Arrays\"> for more\ninformation on how to use this function on tied hashes.\n\n\tSV**\thv_store(HV *hv, const char *key, I32 klen, SV *val, U32 hash)"
hv_store_ent:
  cmd: ''
  exp: "Stores C<val> in a hash.  The hash key is specified as C<key>.  The C<hash>\nparameter is the precomputed hash value; if it is zero then Perl will\ncompute it.  The return value is the new hash entry so created.  It will be\nNULL if the operation failed or if the value did not need to be actually\nstored within the hash (as in the case of tied hashes).  Otherwise the\ncontents of the return value can be accessed using the C<He?> macros\ndescribed here.  Note that the caller is responsible for suitably\nincrementing the reference count of C<val> before the call, and\ndecrementing it if the function returned NULL.  Effectively a successful\nhv_store_ent takes ownership of one reference to C<val>.  This is\nusually what you want; a newly created SV has a reference count of one, so\nif all your code does is create SVs then store them in a hash, hv_store\nwill own the only reference to the new SV, and your code doesn't need to do\nanything further to tidy up.  Note that hv_store_ent only reads the C<key>;\nunlike C<val> it does not take ownership of it, so maintaining the correct\nreference count on C<key> is entirely the caller's responsibility.  hv_store\nis not implemented as a call to hv_store_ent, and does not create a temporary\nSV for the key, so if your key data is not already in SV form then use\nhv_store in preference to hv_store_ent.\n\nSee L<perlguts/\"Understanding the Magic of Tied Hashes and Arrays\"> for more\ninformation on how to use this function on tied hashes.\n\n\tHE*\thv_store_ent(HV *hv, SV *key, SV *val, U32 hash)"
hv_stores:
  cmd: ''
  exp: "Like C<hv_store>, but takes a literal string instead of a string/length pair\nand omits the hash parameter.\n\n\tSV**\thv_stores(HV* tb, const char* key, NULLOK SV* val)"
hv_undef:
  cmd: ''
  exp: "Undefines the hash.\n\n\tvoid\thv_undef(HV *hv)"
ibcmp_utf8:
  cmd: ''
  exp: "Return true if the strings s1 and s2 differ case-insensitively, false\nif not (if they are equal case-insensitively).  If u1 is true, the\nstring s1 is assumed to be in UTF-8-encoded Unicode.  If u2 is true,\nthe string s2 is assumed to be in UTF-8-encoded Unicode.  If u1 or u2\nare false, the respective string is assumed to be in native 8-bit\nencoding.\n\nIf the pe1 and pe2 are non-NULL, the scanning pointers will be copied\nin there (they will point at the beginning of the I<next> character).\nIf the pointers behind pe1 or pe2 are non-NULL, they are the end\npointers beyond which scanning will not continue under any\ncircumstances.  If the byte lengths l1 and l2 are non-zero, s1+l1 and\ns2+l2 will be used as goal end pointers that will also stop the scan,\nand which qualify towards defining a successful match: all the scans\nthat define an explicit length must reach their goal pointers for\na match to succeed).\n\nFor case-insensitiveness, the \"casefolding\" of Unicode is used\ninstead of upper/lowercasing both the characters, see\nhttp://www.unicode.org/unicode/reports/tr21/ (Case Mappings).\n\n\tI32\tibcmp_utf8(const char *s1, char **pe1, UV l1, bool u1, const char *s2, char **pe2, UV l2, bool u2)"
isALNUM:
  cmd: ''
  exp: "Returns a boolean indicating whether the C C<char> is a US-ASCII (Basic Latin)\nalphanumeric character (including underscore) or digit.\n\n\tbool\tisALNUM(char ch)"
isALPHA:
  cmd: ''
  exp: "Returns a boolean indicating whether the C C<char> is a US-ASCII (Basic Latin) \nalphabetic character.\n\n\tbool\tisALPHA(char ch)"
isDIGIT:
  cmd: ''
  exp: "Returns a boolean indicating whether the C C<char> is a US-ASCII (Basic Latin)\ndigit.\n\n\tbool\tisDIGIT(char ch)"
isLOWER:
  cmd: ''
  exp: "Returns a boolean indicating whether the C C<char> is a US-ASCII (Basic Latin)\nlowercase character.\n\n\tbool\tisLOWER(char ch)"
isSPACE:
  cmd: ''
  exp: "Returns a boolean indicating whether the C C<char> is a US-ASCII (Basic Latin)\nwhitespace.\n\n\tbool\tisSPACE(char ch)"
isUPPER:
  cmd: ''
  exp: "Returns a boolean indicating whether the C C<char> is a US-ASCII (Basic Latin)\nuppercase character.\n\n\tbool\tisUPPER(char ch)"
is_utf8_char:
  cmd: ''
  exp: "Tests if some arbitrary number of bytes begins in a valid UTF-8\ncharacter.  Note that an INVARIANT (i.e. ASCII on non-EBCDIC machines)\ncharacter is a valid UTF-8 character.  The actual number of bytes in the UTF-8\ncharacter will be returned if it is valid, otherwise 0.\n\n\tSTRLEN\tis_utf8_char(const U8 *s)"
is_utf8_string:
  cmd: ''
  exp: "Returns true if first C<len> bytes of the given string form a valid\nUTF-8 string, false otherwise.  Note that 'a valid UTF-8 string' does\nnot mean 'a string that contains code points above 0x7F encoded in UTF-8'\nbecause a valid ASCII string is a valid UTF-8 string.\n\nSee also is_utf8_string_loclen() and is_utf8_string_loc().\n\n\tbool\tis_utf8_string(const U8 *s, STRLEN len)"
is_utf8_string_loc:
  cmd: ''
  exp: "Like is_utf8_string() but stores the location of the failure (in the\ncase of \"utf8ness failure\") or the location s+len (in the case of\n\"utf8ness success\") in the C<ep>.\n\nSee also is_utf8_string_loclen() and is_utf8_string().\n\n\tbool\tis_utf8_string_loc(const U8 *s, STRLEN len, const U8 **p)"
is_utf8_string_loclen:
  cmd: ''
  exp: "Like is_utf8_string() but stores the location of the failure (in the\ncase of \"utf8ness failure\") or the location s+len (in the case of\n\"utf8ness success\") in the C<ep>, and the number of UTF-8\nencoded characters in the C<el>.\n\nSee also is_utf8_string_loc() and is_utf8_string().\n\n\tbool\tis_utf8_string_loclen(const U8 *s, STRLEN len, const U8 **ep, STRLEN *el)"
items:
  cmd: ''
  exp: "Variable which is setup by C<xsubpp> to indicate the number of \nitems on the stack.  See L<perlxs/\"Variable-length Parameter Lists\">.\n\n\tI32\titems"
ix:
  cmd: ''
  exp: "Variable which is setup by C<xsubpp> to indicate which of an \nXSUB's aliases was used to invoke it.  See L<perlxs/\"The ALIAS: Keyword\">.\n\n\tI32\tix"
load_module:
  cmd: ''
  exp: "Loads the module whose name is pointed to by the string part of name.\nNote that the actual module name, not its filename, should be given.\nEg, \"Foo::Bar\" instead of \"Foo/Bar.pm\".  flags can be any of\nPERL_LOADMOD_DENY, PERL_LOADMOD_NOIMPORT, or PERL_LOADMOD_IMPORT_OPS\n(or 0 for no flags). ver, if specified, provides version semantics\nsimilar to C<use Foo::Bar VERSION>.  The optional trailing SV*\narguments can be used to specify arguments to the module's import()\nmethod, similar to C<use Foo::Bar VERSION LIST>.  They must be\nterminated with a final NULL pointer.  Note that this list can only\nbe omitted when the PERL_LOADMOD_NOIMPORT flag has been used.\nOtherwise at least a single NULL pointer to designate the default\nimport list is required.\n\n\tvoid\tload_module(U32 flags, SV* name, SV* ver, ...)"
looks_like_number:
  cmd: ''
  exp: "Test if the content of an SV looks like a number (or is a number).\nC<Inf> and C<Infinity> are treated as numbers (so will not issue a\nnon-numeric warning), even if your atof() doesn't grok them.\n\n\tI32\tlooks_like_number(SV* sv)"
mPUSHi:
  cmd: ''
  exp: "Push an integer onto the stack.  The stack must have room for this element.\nDoes not use C<TARG>.  See also C<PUSHi>, C<mXPUSHi> and C<XPUSHi>.\n\n\tvoid\tmPUSHi(IV iv)"
mPUSHn:
  cmd: ''
  exp: "Push a double onto the stack.  The stack must have room for this element.\nDoes not use C<TARG>.  See also C<PUSHn>, C<mXPUSHn> and C<XPUSHn>.\n\n\tvoid\tmPUSHn(NV nv)"
mPUSHp:
  cmd: ''
  exp: "Push a string onto the stack.  The stack must have room for this element.\nThe C<len> indicates the length of the string.  Does not use C<TARG>.\nSee also C<PUSHp>, C<mXPUSHp> and C<XPUSHp>.\n\n\tvoid\tmPUSHp(char* str, STRLEN len)"
mPUSHs:
  cmd: ''
  exp: "Push an SV onto the stack and mortalizes the SV.  The stack must have room\nfor this element.  Does not use C<TARG>.  See also C<PUSHs> and C<mXPUSHs>.\n\n\tvoid\tmPUSHs(SV* sv)"
mPUSHu:
  cmd: ''
  exp: "Push an unsigned integer onto the stack.  The stack must have room for this\nelement.  Does not use C<TARG>.  See also C<PUSHu>, C<mXPUSHu> and C<XPUSHu>.\n\n\tvoid\tmPUSHu(UV uv)"
mXPUSHi:
  cmd: ''
  exp: "Push an integer onto the stack, extending the stack if necessary.\nDoes not use C<TARG>.  See also C<XPUSHi>, C<mPUSHi> and C<PUSHi>.\n\n\tvoid\tmXPUSHi(IV iv)"
mXPUSHn:
  cmd: ''
  exp: "Push a double onto the stack, extending the stack if necessary.\nDoes not use C<TARG>.  See also C<XPUSHn>, C<mPUSHn> and C<PUSHn>.\n\n\tvoid\tmXPUSHn(NV nv)"
mXPUSHp:
  cmd: ''
  exp: "Push a string onto the stack, extending the stack if necessary.  The C<len>\nindicates the length of the string.  Does not use C<TARG>.  See also C<XPUSHp>,\nC<mPUSHp> and C<PUSHp>.\n\n\tvoid\tmXPUSHp(char* str, STRLEN len)"
mXPUSHs:
  cmd: ''
  exp: "Push an SV onto the stack, extending the stack if necessary and mortalizes\nthe SV.  Does not use C<TARG>.  See also C<XPUSHs> and C<mPUSHs>.\n\n\tvoid\tmXPUSHs(SV* sv)"
mXPUSHu:
  cmd: ''
  exp: "Push an unsigned integer onto the stack, extending the stack if necessary.\nDoes not use C<TARG>.  See also C<XPUSHu>, C<mPUSHu> and C<PUSHu>.\n\n\tvoid\tmXPUSHu(UV uv)"
mg_clear:
  cmd: ''
  exp: "Clear something magical that the SV represents.  See C<sv_magic>.\n\n\tint\tmg_clear(SV* sv)"
mg_copy:
  cmd: ''
  exp: "Copies the magic from one SV to another.  See C<sv_magic>.\n\n\tint\tmg_copy(SV *sv, SV *nsv, const char *key, I32 klen)"
mg_find:
  cmd: ''
  exp: "Finds the magic pointer for type matching the SV.  See C<sv_magic>.\n\n\tMAGIC*\tmg_find(const SV* sv, int type)"
mg_free:
  cmd: ''
  exp: "Free any magic storage used by the SV.  See C<sv_magic>.\n\n\tint\tmg_free(SV* sv)"
mg_get:
  cmd: ''
  exp: "Do magic after a value is retrieved from the SV.  See C<sv_magic>.\n\n\tint\tmg_get(SV* sv)"
mg_length:
  cmd: ''
  exp: "Report on the SV's length.  See C<sv_magic>.\n\n\tU32\tmg_length(SV* sv)"
mg_magical:
  cmd: ''
  exp: "Turns on the magical status of an SV.  See C<sv_magic>.\n\n\tvoid\tmg_magical(SV* sv)"
mg_set:
  cmd: ''
  exp: "Do magic after a value is assigned to the SV.  See C<sv_magic>.\n\n\tint\tmg_set(SV* sv)"
mro_get_linear_isa:
  cmd: ''
  exp: "Returns either C<mro_get_linear_isa_c3> or\nC<mro_get_linear_isa_dfs> for the given stash,\ndependant upon which MRO is in effect\nfor that stash.  The return value is a\nread-only AV*.\n\nYou are responsible for C<SvREFCNT_inc()> on the\nreturn value if you plan to store it anywhere\nsemi-permanently (otherwise it might be deleted\nout from under you the next time the cache is\ninvalidated).\n\n\tAV*\tmro_get_linear_isa(HV* stash)"
mro_method_changed_in:
  cmd: ''
  exp: "Invalidates method caching on any child classes\nof the given stash, so that they might notice\nthe changes in this one.\n\nIdeally, all instances of C<PL_sub_generation++> in\nperl source outside of C<mro.c> should be\nreplaced by calls to this.\n\nPerl automatically handles most of the common\nways a method might be redefined.  However, there\nare a few ways you could change a method in a stash\nwithout the cache code noticing, in which case you\nneed to call this method afterwards:\n\n1) Directly manipulating the stash HV entries from\nXS code.\n\n2) Assigning a reference to a readonly scalar\nconstant into a stash entry in order to create\na constant subroutine (like constant.pm\ndoes).\n\nThis same method is available from pure perl\nvia, C<mro::method_changed_in(classname)>.\n\n\tvoid\tmro_method_changed_in(HV* stash)"
my_snprintf:
  cmd: ''
  exp: "The C library C<snprintf> functionality, if available and\nstandards-compliant (uses C<vsnprintf>, actually).  However, if the\nC<vsnprintf> is not available, will unfortunately use the unsafe\nC<vsprintf> which can overrun the buffer (there is an overrun check,\nbut that may be too late).  Consider using C<sv_vcatpvf> instead, or\ngetting C<vsnprintf>.\n\n\tint\tmy_snprintf(char *buffer, const Size_t len, const char *format, ...)"
my_sprintf:
  cmd: ''
  exp: "The C library C<sprintf>, wrapped if necessary, to ensure that it will return\nthe length of the string written to the buffer. Only rare pre-ANSI systems\nneed the wrapper function - usually this is a direct call to C<sprintf>.\n\n\tint\tmy_sprintf(char *buffer, const char *pat, ...)"
my_vsnprintf:
  cmd: ''
  exp: "The C library C<vsnprintf> if available and standards-compliant.\nHowever, if if the C<vsnprintf> is not available, will unfortunately\nuse the unsafe C<vsprintf> which can overrun the buffer (there is an\noverrun check, but that may be too late).  Consider using\nC<sv_vcatpvf> instead, or getting C<vsnprintf>.\n\n\tint\tmy_vsnprintf(char *buffer, const Size_t len, const char *format, va_list ap)"
newAV:
  cmd: ''
  exp: "Creates a new AV.  The reference count is set to 1.\n\n\tAV*\tnewAV()"
newCONSTSUB:
  cmd: ''
  exp: "Creates a constant sub equivalent to Perl C<sub FOO () { 123 }> which is\neligible for inlining at compile-time.\n\n\tCV*\tnewCONSTSUB(HV* stash, const char* name, SV* sv)"
newHV:
  cmd: ''
  exp: "Creates a new HV.  The reference count is set to 1.\n\n\tHV*\tnewHV()"
newRV_inc:
  cmd: ''
  exp: "Creates an RV wrapper for an SV.  The reference count for the original SV is\nincremented.\n\n\tSV*\tnewRV_inc(SV* sv)"
newRV_noinc:
  cmd: ''
  exp: "Creates an RV wrapper for an SV.  The reference count for the original\nSV is B<not> incremented.\n\n\tSV*\tnewRV_noinc(SV* sv)"
newSV:
  cmd: ''
  exp: "Creates a new SV.  A non-zero C<len> parameter indicates the number of\nbytes of preallocated string space the SV should have.  An extra byte for a\ntrailing NUL is also reserved.  (SvPOK is not set for the SV even if string\nspace is allocated.)  The reference count for the new SV is set to 1.\n\nIn 5.9.3, newSV() replaces the older NEWSV() API, and drops the first\nparameter, I<x>, a debug aid which allowed callers to identify themselves.\nThis aid has been superseded by a new build option, PERL_MEM_LOG (see\nL<perlhack/PERL_MEM_LOG>).  The older API is still there for use in XS\nmodules supporting older perls.\n\n\tSV*\tnewSV(STRLEN len)"
newSV_type:
  cmd: ''
  exp: "Creates a new SV, of the type specified.  The reference count for the new SV\nis set to 1.\n\n\tSV*\tnewSV_type(svtype type)"
newSVhek:
  cmd: ''
  exp: "Creates a new SV from the hash key structure.  It will generate scalars that\npoint to the shared string table where possible. Returns a new (undefined)\nSV if the hek is NULL.\n\n\tSV*\tnewSVhek(const HEK *hek)"
newSViv:
  cmd: ''
  exp: "Creates a new SV and copies an integer into it.  The reference count for the\nSV is set to 1.\n\n\tSV*\tnewSViv(IV i)"
newSVnv:
  cmd: ''
  exp: "Creates a new SV and copies a floating point value into it.\nThe reference count for the SV is set to 1.\n\n\tSV*\tnewSVnv(NV n)"
newSVpv:
  cmd: ''
  exp: "Creates a new SV and copies a string into it.  The reference count for the\nSV is set to 1.  If C<len> is zero, Perl will compute the length using\nstrlen().  For efficiency, consider using C<newSVpvn> instead.\n\n\tSV*\tnewSVpv(const char* s, STRLEN len)"
newSVpvf:
  cmd: ''
  exp: "Creates a new SV and initializes it with the string formatted like\nC<sprintf>.\n\n\tSV*\tnewSVpvf(const char* pat, ...)"
newSVpvn:
  cmd: ''
  exp: "Creates a new SV and copies a string into it.  The reference count for the\nSV is set to 1.  Note that if C<len> is zero, Perl will create a zero length\nstring.  You are responsible for ensuring that the source string is at least\nC<len> bytes long.  If the C<s> argument is NULL the new SV will be undefined.\n\n\tSV*\tnewSVpvn(const char* s, STRLEN len)"
newSVpvn_flags:
  cmd: ''
  exp: "Creates a new SV and copies a string into it.  The reference count for the\nSV is set to 1.  Note that if C<len> is zero, Perl will create a zero length\nstring.  You are responsible for ensuring that the source string is at least\nC<len> bytes long.  If the C<s> argument is NULL the new SV will be undefined.\nCurrently the only flag bits accepted are C<SVf_UTF8> and C<SVs_TEMP>.\nIf C<SVs_TEMP> is set, then C<sv2mortal()> is called on the result before\nreturning. If C<SVf_UTF8> is set, then it will be set on the new SV.\nC<newSVpvn_utf8()> is a convenience wrapper for this function, defined as\n\n    #define newSVpvn_utf8(s, len, u)\t\t\t\\\n\tnewSVpvn_flags((s), (len), (u) ? SVf_UTF8 : 0)\n\n\tSV*\tnewSVpvn_flags(const char* s, STRLEN len, U32 flags)"
newSVpvn_share:
  cmd: ''
  exp: "Creates a new SV with its SvPVX_const pointing to a shared string in the string\ntable. If the string does not already exist in the table, it is created\nfirst.  Turns on READONLY and FAKE. If the C<hash> parameter is non-zero, that\nvalue is used; otherwise the hash is computed. The string's hash can be later\nbe retrieved from the SV with the C<SvSHARED_HASH()> macro. The idea here is\nthat as the string table is used for shared hash keys these strings will have\nSvPVX_const == HeKEY and hash lookup will avoid string compare.\n\n\tSV*\tnewSVpvn_share(const char* s, I32 len, U32 hash)"
newSVpvn_utf8:
  cmd: ''
  exp: "Creates a new SV and copies a string into it.  If utf8 is true, calls\nC<SvUTF8_on> on the new SV.  Implemented as a wrapper around C<newSVpvn_flags>.\n\n\tSV*\tnewSVpvn_utf8(NULLOK const char* s, STRLEN len, U32 utf8)"
newSVpvs:
  cmd: ''
  exp: "Like C<newSVpvn>, but takes a literal string instead of a string/length pair.\n\n\tSV*\tnewSVpvs(const char* s)"
newSVpvs_flags:
  cmd: ''
  exp: "Like C<newSVpvn_flags>, but takes a literal string instead of a string/length\npair.\n\n\tSV*\tnewSVpvs_flags(const char* s, U32 flags)"
newSVpvs_share:
  cmd: ''
  exp: "Like C<newSVpvn_share>, but takes a literal string instead of a string/length\npair and omits the hash parameter.\n\n\tSV*\tnewSVpvs_share(const char* s)"
newSVrv:
  cmd: ''
  exp: "Creates a new SV for the RV, C<rv>, to point to.  If C<rv> is not an RV then\nit will be upgraded to one.  If C<classname> is non-null then the new SV will\nbe blessed in the specified package.  The new SV is returned and its\nreference count is 1.\n\n\tSV*\tnewSVrv(SV* rv, const char* classname)"
newSVsv:
  cmd: ''
  exp: "Creates a new SV which is an exact duplicate of the original SV.\n(Uses C<sv_setsv>).\n\n\tSV*\tnewSVsv(SV* old)"
newSVuv:
  cmd: ''
  exp: "Creates a new SV and copies an unsigned integer into it.\nThe reference count for the SV is set to 1.\n\n\tSV*\tnewSVuv(UV u)"
newXS:
  cmd: ''
  exp: "Used by C<xsubpp> to hook up XSUBs as Perl subs.  I<filename> needs to be\nstatic storage, as it is used directly as CvFILE(), without a copy being made."
newXSproto:
  cmd: ''
  exp: "Used by C<xsubpp> to hook up XSUBs as Perl subs.  Adds Perl prototypes to\nthe subs."
new_version:
  cmd: ''
  exp: "Returns a new version object based on the passed in SV:\n\n    SV *sv = new_version(SV *ver);\n\nDoes not alter the passed in ver SV.  See \"upg_version\" if you\nwant to upgrade the SV.\n\n\tSV*\tnew_version(SV *ver)"
nothreadhook:
  cmd: ''
  exp: "Stub that provides thread hook for perl_destruct when there are\nno threads.\n\n\tint\tnothreadhook()"
pack_cat:
  cmd: ''
  exp: "The engine implementing pack() Perl function. Note: parameters next_in_list and\nflags are not used. This call should not be used; use packlist instead.\n\n\tvoid\tpack_cat(SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags)"
packlist:
  cmd: ''
  exp: "The engine implementing pack() Perl function.\n\n\tvoid\tpacklist(SV *cat, const char *pat, const char *patend, SV **beglist, SV **endlist)"
pad_sv:
  cmd: ''
  exp: "Get the value at offset po in the current pad.\nUse macro PAD_SV instead of calling this function directly.\n\n\tSV*\tpad_sv(PADOFFSET po)"
perl_alloc:
  cmd: ''
  exp: "Allocates a new Perl interpreter.  See L<perlembed>.\n\n\tPerlInterpreter*\tperl_alloc()"
perl_clone:
  cmd: ''
  exp: "Create and return a new interpreter by cloning the current one.\n\nperl_clone takes these flags as parameters:\n\nCLONEf_COPY_STACKS - is used to, well, copy the stacks also,\nwithout it we only clone the data and zero the stacks,\nwith it we copy the stacks and the new perl interpreter is\nready to run at the exact same point as the previous one.\nThe pseudo-fork code uses COPY_STACKS while the\nthreads->create doesn't.\n\nCLONEf_KEEP_PTR_TABLE\nperl_clone keeps a ptr_table with the pointer of the old\nvariable as a key and the new variable as a value,\nthis allows it to check if something has been cloned and not\nclone it again but rather just use the value and increase the\nrefcount. If KEEP_PTR_TABLE is not set then perl_clone will kill\nthe ptr_table using the function\nC<ptr_table_free(PL_ptr_table); PL_ptr_table = NULL;>,\nreason to keep it around is if you want to dup some of your own\nvariable who are outside the graph perl scans, example of this\ncode is in threads.xs create\n\nCLONEf_CLONE_HOST\nThis is a win32 thing, it is ignored on unix, it tells perls\nwin32host code (which is c++) to clone itself, this is needed on\nwin32 if you want to run two threads at the same time,\nif you just want to do some stuff in a separate perl interpreter\nand then throw it away and return to the original one,\nyou don't need to do anything.\n\n\tPerlInterpreter*\tperl_clone(PerlInterpreter *proto_perl, UV flags)"
perl_construct:
  cmd: ''
  exp: "Initializes a new Perl interpreter.  See L<perlembed>.\n\n\tvoid\tperl_construct(PerlInterpreter *my_perl)"
perl_destruct:
  cmd: ''
  exp: "Shuts down a Perl interpreter.  See L<perlembed>.\n\n\tint\tperl_destruct(PerlInterpreter *my_perl)"
perl_free:
  cmd: ''
  exp: "Releases a Perl interpreter.  See L<perlembed>.\n\n\tvoid\tperl_free(PerlInterpreter *my_perl)"
perl_parse:
  cmd: ''
  exp: "Tells a Perl interpreter to parse a Perl script.  See L<perlembed>.\n\n\tint\tperl_parse(PerlInterpreter *my_perl, XSINIT_t xsinit, int argc, char** argv, char** env)"
perl_run:
  cmd: ''
  exp: "Tells a Perl interpreter to run.  See L<perlembed>.\n\n\tint\tperl_run(PerlInterpreter *my_perl)"
pv_display:
  cmd: ''
  exp: "Similar to\n\n  pv_escape(dsv,pv,cur,pvlim,PERL_PV_ESCAPE_QUOTE);\n\nexcept that an additional \"\\0\" will be appended to the string when\nlen > cur and pv[cur] is \"\\0\".\n\nNote that the final string may be up to 7 chars longer than pvlim.\n\n\tchar*\tpv_display(SV *dsv, const char *pv, STRLEN cur, STRLEN len, STRLEN pvlim)"
pv_escape:
  cmd: ''
  exp: "Escapes at most the first \"count\" chars of pv and puts the results into\ndsv such that the size of the escaped string will not exceed \"max\" chars\nand will not contain any incomplete escape sequences.\n\nIf flags contains PERL_PV_ESCAPE_QUOTE then any double quotes in the string\nwill also be escaped.\n\nNormally the SV will be cleared before the escaped string is prepared,\nbut when PERL_PV_ESCAPE_NOCLEAR is set this will not occur.\n\nIf PERL_PV_ESCAPE_UNI is set then the input string is treated as Unicode,\nif PERL_PV_ESCAPE_UNI_DETECT is set then the input string is scanned\nusing C<is_utf8_string()> to determine if it is Unicode.\n\nIf PERL_PV_ESCAPE_ALL is set then all input chars will be output\nusing C<\\x01F1> style escapes, otherwise only chars above 255 will be\nescaped using this style, other non printable chars will use octal or\ncommon escaped patterns like C<\\n>. If PERL_PV_ESCAPE_NOBACKSLASH\nthen all chars below 255 will be treated as printable and \nwill be output as literals.\n\nIf PERL_PV_ESCAPE_FIRSTCHAR is set then only the first char of the\nstring will be escaped, regardles of max. If the string is utf8 and \nthe chars value is >255 then it will be returned as a plain hex \nsequence. Thus the output will either be a single char, \nan octal escape sequence, a special escape like C<\\n> or a 3 or \nmore digit hex value. \n\nIf PERL_PV_ESCAPE_RE is set then the escape char used will be a '%' and\nnot a '\\\\'. This is because regexes very often contain backslashed\nsequences, whereas '%' is not a particularly common character in patterns.\n\nReturns a pointer to the escaped text as held by dsv.\n\n\tchar*\tpv_escape(SV *dsv, char const * const str, const STRLEN count, const STRLEN max, STRLEN * const escaped, const U32 flags)"
pv_pretty:
  cmd: ''
  exp: "Converts a string into something presentable, handling escaping via\npv_escape() and supporting quoting and ellipses.\n\nIf the PERL_PV_PRETTY_QUOTE flag is set then the result will be \ndouble quoted with any double quotes in the string escaped. Otherwise\nif the PERL_PV_PRETTY_LTGT flag is set then the result be wrapped in\nangle brackets. \n           \nIf the PERL_PV_PRETTY_ELLIPSES flag is set and not all characters in\nstring were output then an ellipsis C<...> will be appended to the\nstring. Note that this happens AFTER it has been quoted.\n           \nIf start_color is non-null then it will be inserted after the opening\nquote (if there is one) but before the escaped text. If end_color\nis non-null then it will be inserted after the escaped text but before\nany quotes or ellipses.\n\nReturns a pointer to the prettified text as held by dsv.\n           \n\tchar*\tpv_pretty(SV *dsv, char const * const str, const STRLEN count, const STRLEN max, char const * const start_color, char const * const end_color, const U32 flags)"
pv_uni_display:
  cmd: ''
  exp: "Build to the scalar dsv a displayable version of the string spv,\nlength len, the displayable version being at most pvlim bytes long\n(if longer, the rest is truncated and \"...\" will be appended).\n\nThe flags argument can have UNI_DISPLAY_ISPRINT set to display\nisPRINT()able characters as themselves, UNI_DISPLAY_BACKSLASH\nto display the \\\\[nrfta\\\\] as the backslashed versions (like '\\n')\n(UNI_DISPLAY_BACKSLASH is preferred over UNI_DISPLAY_ISPRINT for \\\\).\nUNI_DISPLAY_QQ (and its alias UNI_DISPLAY_REGEX) have both\nUNI_DISPLAY_BACKSLASH and UNI_DISPLAY_ISPRINT turned on.\n\nThe pointer to the PV of the dsv is returned.\n\n\tchar*\tpv_uni_display(SV *dsv, const U8 *spv, STRLEN len, STRLEN pvlim, UV flags)"
require_pv:
  cmd: ''
  exp: "Tells Perl to C<require> the file named by the string argument.  It is\nanalogous to the Perl code C<eval \"require '$file'\">.  It's even\nimplemented that way; consider using load_module instead.\n\nNOTE: the perl_ form of this function is deprecated.\n\n\tvoid\trequire_pv(const char* pv)"
savepv:
  cmd: ''
  exp: "Perl's version of C<strdup()>. Returns a pointer to a newly allocated\nstring which is a duplicate of C<pv>. The size of the string is\ndetermined by C<strlen()>. The memory allocated for the new string can\nbe freed with the C<Safefree()> function.\n\n\tchar*\tsavepv(const char* pv)"
savepvn:
  cmd: ''
  exp: "Perl's version of what C<strndup()> would be if it existed. Returns a\npointer to a newly allocated string which is a duplicate of the first\nC<len> bytes from C<pv>, plus a trailing NUL byte. The memory allocated for\nthe new string can be freed with the C<Safefree()> function.\n\n\tchar*\tsavepvn(const char* pv, I32 len)"
savepvs:
  cmd: ''
  exp: "Like C<savepvn>, but takes a literal string instead of a string/length pair.\n\n\tchar*\tsavepvs(const char* s)"
savesharedpv:
  cmd: ''
  exp: "A version of C<savepv()> which allocates the duplicate string in memory\nwhich is shared between threads.\n\n\tchar*\tsavesharedpv(const char* pv)"
savesharedpvn:
  cmd: ''
  exp: "A version of C<savepvn()> which allocates the duplicate string in memory\nwhich is shared between threads. (With the specific difference that a NULL\npointer is not acceptable)\n\n\tchar*\tsavesharedpvn(const char *const pv, const STRLEN len)"
savesvpv:
  cmd: ''
  exp: "A version of C<savepv()>/C<savepvn()> which gets the string to duplicate from\nthe passed in SV using C<SvPV()>\n\n\tchar*\tsavesvpv(SV* sv)"
scan_bin:
  cmd: ''
  exp: "For backwards compatibility. Use C<grok_bin> instead.\n\n\tNV\tscan_bin(const char* start, STRLEN len, STRLEN* retlen)"
scan_hex:
  cmd: ''
  exp: "For backwards compatibility. Use C<grok_hex> instead.\n\n\tNV\tscan_hex(const char* start, STRLEN len, STRLEN* retlen)"
scan_oct:
  cmd: ''
  exp: "For backwards compatibility. Use C<grok_oct> instead.\n\n\tNV\tscan_oct(const char* start, STRLEN len, STRLEN* retlen)"
scan_version:
  cmd: ''
  exp: "Returns a pointer to the next character after the parsed\nversion string, as well as upgrading the passed in SV to\nan RV.\n\nFunction must be called with an already existing SV like\n\n    sv = newSV(0);\n    s = scan_version(s, SV *sv, bool qv);\n\nPerforms some preprocessing to the string to ensure that\nit has the correct characteristics of a version.  Flags the\nobject if it contains an underscore (which denotes this\nis an alpha version).  The boolean qv denotes that the version\nshould be interpreted as if it had multiple decimals, even if\nit doesn't.\n\n\tconst char*\tscan_version(const char *s, SV *rv, bool qv)"
sortsv:
  cmd: ''
  exp: "Sort an array. Here is an example:\n\n    sortsv(AvARRAY(av), av_len(av)+1, Perl_sv_cmp_locale);\n\nCurrently this always uses mergesort. See sortsv_flags for a more\nflexible routine.\n\n\tvoid\tsortsv(SV** array, size_t num_elts, SVCOMPARE_t cmp)"
sortsv_flags:
  cmd: ''
  exp: "Sort an array, with various options.\n\n\tvoid\tsortsv_flags(SV** array, size_t num_elts, SVCOMPARE_t cmp, U32 flags)"
strEQ:
  cmd: ''
  exp: "Test two strings to see if they are equal.  Returns true or false.\n\n\tbool\tstrEQ(char* s1, char* s2)"
strGE:
  cmd: ''
  exp: "Test two strings to see if the first, C<s1>, is greater than or equal to\nthe second, C<s2>.  Returns true or false.\n\n\tbool\tstrGE(char* s1, char* s2)"
strGT:
  cmd: ''
  exp: "Test two strings to see if the first, C<s1>, is greater than the second,\nC<s2>.  Returns true or false.\n\n\tbool\tstrGT(char* s1, char* s2)"
strLE:
  cmd: ''
  exp: "Test two strings to see if the first, C<s1>, is less than or equal to the\nsecond, C<s2>.  Returns true or false.\n\n\tbool\tstrLE(char* s1, char* s2)"
strLT:
  cmd: ''
  exp: "Test two strings to see if the first, C<s1>, is less than the second,\nC<s2>.  Returns true or false.\n\n\tbool\tstrLT(char* s1, char* s2)"
strNE:
  cmd: ''
  exp: "Test two strings to see if they are different.  Returns true or\nfalse.\n\n\tbool\tstrNE(char* s1, char* s2)"
strnEQ:
  cmd: ''
  exp: "Test two strings to see if they are equal.  The C<len> parameter indicates\nthe number of bytes to compare.  Returns true or false. (A wrapper for\nC<strncmp>).\n\n\tbool\tstrnEQ(char* s1, char* s2, STRLEN len)"
strnNE:
  cmd: ''
  exp: "Test two strings to see if they are different.  The C<len> parameter\nindicates the number of bytes to compare.  Returns true or false. (A\nwrapper for C<strncmp>).\n\n\tbool\tstrnNE(char* s1, char* s2, STRLEN len)"
sv_2bool:
  cmd: ''
  exp: "This function is only called on magical items, and is only used by\nsv_true() or its macro equivalent.\n\n\tbool\tsv_2bool(SV* sv)"
sv_2cv:
  cmd: ''
  exp: "Using various gambits, try to get a CV from an SV; in addition, try if\npossible to set C<*st> and C<*gvp> to the stash and GV associated with it.\nThe flags in C<lref> are passed to sv_fetchsv.\n\n\tCV*\tsv_2cv(SV* sv, HV** st, GV** gvp, I32 lref)"
sv_2io:
  cmd: ''
  exp: "Using various gambits, try to get an IO from an SV: the IO slot if its a\nGV; or the recursive result if we're an RV; or the IO slot of the symbol\nnamed after the PV if we're a string.\n\n\tIO*\tsv_2io(SV* sv)"
sv_2iv_flags:
  cmd: ''
  exp: "Return the integer value of an SV, doing any necessary string\nconversion.  If flags includes SV_GMAGIC, does an mg_get() first.\nNormally used via the C<SvIV(sv)> and C<SvIVx(sv)> macros.\n\n\tIV\tsv_2iv_flags(SV* sv, I32 flags)"
sv_2mortal:
  cmd: ''
  exp: "Marks an existing SV as mortal.  The SV will be destroyed \"soon\", either\nby an explicit call to FREETMPS, or by an implicit call at places such as\nstatement boundaries.  SvTEMP() is turned on which means that the SV's\nstring buffer can be \"stolen\" if this SV is copied. See also C<sv_newmortal>\nand C<sv_mortalcopy>.\n\n\tSV*\tsv_2mortal(SV* sv)"
sv_2nv:
  cmd: ''
  exp: "Return the num value of an SV, doing any necessary string or integer\nconversion, magic etc. Normally used via the C<SvNV(sv)> and C<SvNVx(sv)>\nmacros.\n\n\tNV\tsv_2nv(SV* sv)"
sv_2pv_flags:
  cmd: ''
  exp: "Returns a pointer to the string value of an SV, and sets *lp to its length.\nIf flags includes SV_GMAGIC, does an mg_get() first. Coerces sv to a string\nif necessary.\nNormally invoked via the C<SvPV_flags> macro. C<sv_2pv()> and C<sv_2pv_nomg>\nusually end up here too.\n\n\tchar*\tsv_2pv_flags(SV* sv, STRLEN* lp, I32 flags)"
sv_2pv_nolen:
  cmd: ''
  exp: "Like C<sv_2pv()>, but doesn't return the length too. You should usually\nuse the macro wrapper C<SvPV_nolen(sv)> instead.\n\tchar*\tsv_2pv_nolen(SV* sv)"
sv_2pvbyte:
  cmd: ''
  exp: "Return a pointer to the byte-encoded representation of the SV, and set *lp\nto its length.  May cause the SV to be downgraded from UTF-8 as a\nside-effect.\n\nUsually accessed via the C<SvPVbyte> macro.\n\n\tchar*\tsv_2pvbyte(SV* sv, STRLEN* lp)"
sv_2pvbyte_nolen:
  cmd: ''
  exp: "Return a pointer to the byte-encoded representation of the SV.\nMay cause the SV to be downgraded from UTF-8 as a side-effect.\n\nUsually accessed via the C<SvPVbyte_nolen> macro.\n\n\tchar*\tsv_2pvbyte_nolen(SV* sv)"
sv_2pvutf8:
  cmd: ''
  exp: "Return a pointer to the UTF-8-encoded representation of the SV, and set *lp\nto its length.  May cause the SV to be upgraded to UTF-8 as a side-effect.\n\nUsually accessed via the C<SvPVutf8> macro.\n\n\tchar*\tsv_2pvutf8(SV* sv, STRLEN* lp)"
sv_2pvutf8_nolen:
  cmd: ''
  exp: "Return a pointer to the UTF-8-encoded representation of the SV.\nMay cause the SV to be upgraded to UTF-8 as a side-effect.\n\nUsually accessed via the C<SvPVutf8_nolen> macro.\n\n\tchar*\tsv_2pvutf8_nolen(SV* sv)"
sv_2uv_flags:
  cmd: ''
  exp: "Return the unsigned integer value of an SV, doing any necessary string\nconversion.  If flags includes SV_GMAGIC, does an mg_get() first.\nNormally used via the C<SvUV(sv)> and C<SvUVx(sv)> macros.\n\n\tUV\tsv_2uv_flags(SV* sv, I32 flags)"
sv_backoff:
  cmd: ''
  exp: "Remove any string offset. You should normally use the C<SvOOK_off> macro\nwrapper instead.\n\n\tint\tsv_backoff(SV* sv)"
sv_bless:
  cmd: ''
  exp: "Blesses an SV into a specified package.  The SV must be an RV.  The package\nmust be designated by its stash (see C<gv_stashpv()>).  The reference count\nof the SV is unaffected.\n\n\tSV*\tsv_bless(SV* sv, HV* stash)"
sv_cat_decode:
  cmd: ''
  exp: "The encoding is assumed to be an Encode object, the PV of the ssv is\nassumed to be octets in that encoding and decoding the input starts\nfrom the position which (PV + *offset) pointed to.  The dsv will be\nconcatenated the decoded UTF-8 string from ssv.  Decoding will terminate\nwhen the string tstr appears in decoding output or the input ends on\nthe PV of the ssv. The value which the offset points will be modified\nto the last input position on the ssv.\n\nReturns TRUE if the terminator was found, else returns FALSE.\n\n\tbool\tsv_cat_decode(SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen)"
sv_catpv:
  cmd: ''
  exp: "Concatenates the string onto the end of the string which is in the SV.\nIf the SV has the UTF-8 status set, then the bytes appended should be\nvalid UTF-8.  Handles 'get' magic, but not 'set' magic.  See C<sv_catpv_mg>.\n\n\tvoid\tsv_catpv(SV* sv, const char* ptr)"
sv_catpv_mg:
  cmd: ''
  exp: "Like C<sv_catpv>, but also handles 'set' magic.\n\n\tvoid\tsv_catpv_mg(SV *sv, const char *ptr)"
sv_catpvf:
  cmd: ''
  exp: "Processes its arguments like C<sprintf> and appends the formatted\noutput to an SV.  If the appended data contains \"wide\" characters\n(including, but not limited to, SVs with a UTF-8 PV formatted with %s,\nand characters >255 formatted with %c), the original SV might get\nupgraded to UTF-8.  Handles 'get' magic, but not 'set' magic.  See\nC<sv_catpvf_mg>. If the original SV was UTF-8, the pattern should be\nvalid UTF-8; if the original SV was bytes, the pattern should be too.\n\n\tvoid\tsv_catpvf(SV* sv, const char* pat, ...)"
sv_catpvf_mg:
  cmd: ''
  exp: "Like C<sv_catpvf>, but also handles 'set' magic.\n\n\tvoid\tsv_catpvf_mg(SV *sv, const char* pat, ...)"
sv_catpvn:
  cmd: ''
  exp: "Concatenates the string onto the end of the string which is in the SV.  The\nC<len> indicates number of bytes to copy.  If the SV has the UTF-8\nstatus set, then the bytes appended should be valid UTF-8.\nHandles 'get' magic, but not 'set' magic.  See C<sv_catpvn_mg>.\n\n\tvoid\tsv_catpvn(SV *dsv, const char *sstr, STRLEN len)"
sv_catpvn_flags:
  cmd: ''
  exp: "Concatenates the string onto the end of the string which is in the SV.  The\nC<len> indicates number of bytes to copy.  If the SV has the UTF-8\nstatus set, then the bytes appended should be valid UTF-8.\nIf C<flags> has C<SV_GMAGIC> bit set, will C<mg_get> on C<dsv> if\nappropriate, else not. C<sv_catpvn> and C<sv_catpvn_nomg> are implemented\nin terms of this function.\n\n\tvoid\tsv_catpvn_flags(SV *dstr, const char *sstr, STRLEN len, I32 flags)"
sv_catpvn_mg:
  cmd: ''
  exp: "Like C<sv_catpvn>, but also handles 'set' magic.\n\n\tvoid\tsv_catpvn_mg(SV *sv, const char *ptr, STRLEN len)"
sv_catpvn_nomg:
  cmd: ''
  exp: "Like C<sv_catpvn> but doesn't process magic.\n\n\tvoid\tsv_catpvn_nomg(SV* sv, const char* ptr, STRLEN len)"
sv_catpvs:
  cmd: ''
  exp: "Like C<sv_catpvn>, but takes a literal string instead of a string/length pair.\n\n\tvoid\tsv_catpvs(SV* sv, const char* s)"
sv_catsv:
  cmd: ''
  exp: "Concatenates the string from SV C<ssv> onto the end of the string in\nSV C<dsv>.  Modifies C<dsv> but not C<ssv>.  Handles 'get' magic, but\nnot 'set' magic.  See C<sv_catsv_mg>.\n\n\tvoid\tsv_catsv(SV *dstr, SV *sstr)"
sv_catsv_flags:
  cmd: ''
  exp: "Concatenates the string from SV C<ssv> onto the end of the string in\nSV C<dsv>.  Modifies C<dsv> but not C<ssv>.  If C<flags> has C<SV_GMAGIC>\nbit set, will C<mg_get> on the SVs if appropriate, else not. C<sv_catsv>\nand C<sv_catsv_nomg> are implemented in terms of this function.\n\n\tvoid\tsv_catsv_flags(SV* dsv, SV* ssv, I32 flags)"
sv_catsv_mg:
  cmd: ''
  exp: "Like C<sv_catsv>, but also handles 'set' magic.\n\n\tvoid\tsv_catsv_mg(SV *dsv, SV *ssv)"
sv_catsv_nomg:
  cmd: ''
  exp: "Like C<sv_catsv> but doesn't process magic.\n\n\tvoid\tsv_catsv_nomg(SV* dsv, SV* ssv)"
sv_chop:
  cmd: ''
  exp: "Efficient removal of characters from the beginning of the string buffer.\nSvPOK(sv) must be true and the C<ptr> must be a pointer to somewhere inside\nthe string buffer.  The C<ptr> becomes the first character of the adjusted\nstring. Uses the \"OOK hack\".\nBeware: after this function returns, C<ptr> and SvPVX_const(sv) may no longer\nrefer to the same chunk of data.\n\n\tvoid\tsv_chop(SV* sv, const char* ptr)"
sv_clear:
  cmd: ''
  exp: "Clear an SV: call any destructors, free up any memory used by the body,\nand free the body itself. The SV's head is I<not> freed, although\nits type is set to all 1's so that it won't inadvertently be assumed\nto be live during global destruction etc.\nThis function should only be called when REFCNT is zero. Most of the time\nyou'll want to call C<sv_free()> (or its macro wrapper C<SvREFCNT_dec>)\ninstead.\n\n\tvoid\tsv_clear(SV* sv)"
sv_cmp:
  cmd: ''
  exp: "Compares the strings in two SVs.  Returns -1, 0, or 1 indicating whether the\nstring in C<sv1> is less than, equal to, or greater than the string in\nC<sv2>. Is UTF-8 and 'use bytes' aware, handles get magic, and will\ncoerce its args to strings if necessary.  See also C<sv_cmp_locale>.\n\n\tI32\tsv_cmp(SV* sv1, SV* sv2)"
sv_cmp_locale:
  cmd: ''
  exp: "Compares the strings in two SVs in a locale-aware manner. Is UTF-8 and\n'use bytes' aware, handles get magic, and will coerce its args to strings\nif necessary.  See also C<sv_cmp>.\n\n\tI32\tsv_cmp_locale(SV* sv1, SV* sv2)"
sv_collxfrm:
  cmd: ''
  exp: "Add Collate Transform magic to an SV if it doesn't already have it.\n\nAny scalar variable may carry PERL_MAGIC_collxfrm magic that contains the\nscalar data of the variable, but transformed to such a format that a normal\nmemory comparison can be used to compare the data according to the locale\nsettings.\n\n\tchar*\tsv_collxfrm(SV* sv, STRLEN* nxp)"
sv_copypv:
  cmd: ''
  exp: "Copies a stringified representation of the source SV into the\ndestination SV.  Automatically performs any necessary mg_get and\ncoercion of numeric values into strings.  Guaranteed to preserve\nUTF8 flag even from overloaded objects.  Similar in nature to\nsv_2pv[_flags] but operates directly on an SV instead of just the\nstring.  Mostly uses sv_2pv_flags to do its work, except when that\nwould lose the UTF-8'ness of the PV.\n\n\tvoid\tsv_copypv(SV* dsv, SV* ssv)"
sv_dec:
  cmd: ''
  exp: "Auto-decrement of the value in the SV, doing string to numeric conversion\nif necessary. Handles 'get' magic.\n\n\tvoid\tsv_dec(SV* sv)"
sv_derived_from:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV is derived from the specified class\nI<at the C level>.  To check derivation at the Perl level, call C<isa()> as a\nnormal Perl method.\n\n\tbool\tsv_derived_from(SV* sv, const char* name)"
sv_destroyable:
  cmd: ''
  exp: "Dummy routine which reports that object can be destroyed when there is no\nsharing module present.  It ignores its single SV argument, and returns\n'true'.  Exists to avoid test for a NULL function pointer and because it\ncould potentially warn under some level of strict-ness.\n\n\tbool\tsv_destroyable(SV *sv)"
sv_does:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV performs a specific, named role.\nThe SV can be a Perl object or the name of a Perl class.\n\n\tbool\tsv_does(SV* sv, const char* name)"
sv_eq:
  cmd: ''
  exp: "Returns a boolean indicating whether the strings in the two SVs are\nidentical. Is UTF-8 and 'use bytes' aware, handles get magic, and will\ncoerce its args to strings if necessary.\n\n\tI32\tsv_eq(SV* sv1, SV* sv2)"
sv_force_normal:
  cmd: ''
  exp: "Undo various types of fakery on an SV: if the PV is a shared string, make\na private copy; if we're a ref, stop refing; if we're a glob, downgrade to\nan xpvmg. See also C<sv_force_normal_flags>.\n\n\tvoid\tsv_force_normal(SV *sv)"
sv_force_normal_flags:
  cmd: ''
  exp: "Undo various types of fakery on an SV: if the PV is a shared string, make\na private copy; if we're a ref, stop refing; if we're a glob, downgrade to\nan xpvmg; if we're a copy-on-write scalar, this is the on-write time when\nwe do the copy, and is also used locally. If C<SV_COW_DROP_PV> is set\nthen a copy-on-write scalar drops its PV buffer (if any) and becomes\nSvPOK_off rather than making a copy. (Used where this scalar is about to be\nset to some other value.) In addition, the C<flags> parameter gets passed to\nC<sv_unref_flags()> when unrefing. C<sv_force_normal> calls this function\nwith flags set to 0.\n\n\tvoid\tsv_force_normal_flags(SV *sv, U32 flags)"
sv_free:
  cmd: ''
  exp: "Decrement an SV's reference count, and if it drops to zero, call\nC<sv_clear> to invoke destructors and free up any memory used by\nthe body; finally, deallocate the SV's head itself.\nNormally called via a wrapper macro C<SvREFCNT_dec>.\n\n\tvoid\tsv_free(SV* sv)"
sv_gets:
  cmd: ''
  exp: "Get a line from the filehandle and store it into the SV, optionally\nappending to the currently-stored string.\n\n\tchar*\tsv_gets(SV* sv, PerlIO* fp, I32 append)"
sv_grow:
  cmd: ''
  exp: "Expands the character buffer in the SV.  If necessary, uses C<sv_unref> and\nupgrades the SV to C<SVt_PV>.  Returns a pointer to the character buffer.\nUse the C<SvGROW> wrapper instead.\n\n\tchar*\tsv_grow(SV* sv, STRLEN newlen)"
sv_inc:
  cmd: ''
  exp: "Auto-increment of the value in the SV, doing string to numeric conversion\nif necessary. Handles 'get' magic.\n\n\tvoid\tsv_inc(SV* sv)"
sv_insert:
  cmd: ''
  exp: "Inserts a string at the specified offset/length within the SV. Similar to\nthe Perl substr() function. Handles get magic.\n\n\tvoid\tsv_insert(SV *bigstr, STRLEN offset, STRLEN len, const char *little, STRLEN littlelen)"
sv_insert_flags:
  cmd: ''
  exp: "Same as C<sv_insert>, but the extra C<flags> are passed the C<SvPV_force_flags> that applies to C<bigstr>.\n\n\tvoid\tsv_insert_flags(SV *const bigstr, const STRLEN offset, const STRLEN len, const char *const little, const STRLEN littlelen, const U32 flags)"
sv_isa:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV is blessed into the specified\nclass.  This does not check for subtypes; use C<sv_derived_from> to verify\nan inheritance relationship.\n\n\tint\tsv_isa(SV* sv, const char* name)"
sv_isobject:
  cmd: ''
  exp: "Returns a boolean indicating whether the SV is an RV pointing to a blessed\nobject.  If the SV is not an RV, or if the object is not blessed, then this\nwill return false.\n\n\tint\tsv_isobject(SV* sv)"
sv_iv:
  cmd: ''
  exp: "A private implementation of the C<SvIVx> macro for compilers which can't\ncope with complex macro expressions. Always use the macro instead.\n\n\tIV\tsv_iv(SV* sv)"
sv_len:
  cmd: ''
  exp: "Returns the length of the string in the SV. Handles magic and type\ncoercion.  See also C<SvCUR>, which gives raw access to the xpv_cur slot.\n\n\tSTRLEN\tsv_len(SV* sv)"
sv_len_utf8:
  cmd: ''
  exp: "Returns the number of characters in the string in an SV, counting wide\nUTF-8 bytes as a single character. Handles magic and type coercion.\n\n\tSTRLEN\tsv_len_utf8(SV* sv)"
sv_magic:
  cmd: ''
  exp: "Adds magic to an SV. First upgrades C<sv> to type C<SVt_PVMG> if necessary,\nthen adds a new magic item of type C<how> to the head of the magic list.\n\nSee C<sv_magicext> (which C<sv_magic> now calls) for a description of the\nhandling of the C<name> and C<namlen> arguments.\n\nYou need to use C<sv_magicext> to add magic to SvREADONLY SVs and also\nto add more than one instance of the same 'how'.\n\n\tvoid\tsv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen)"
sv_magicext:
  cmd: ''
  exp: "Adds magic to an SV, upgrading it if necessary. Applies the\nsupplied vtable and returns a pointer to the magic added.\n\nNote that C<sv_magicext> will allow things that C<sv_magic> will not.\nIn particular, you can add magic to SvREADONLY SVs, and add more than\none instance of the same 'how'.\n\nIf C<namlen> is greater than zero then a C<savepvn> I<copy> of C<name> is\nstored, if C<namlen> is zero then C<name> is stored as-is and - as another\nspecial case - if C<(name && namlen == HEf_SVKEY)> then C<name> is assumed\nto contain an C<SV*> and is stored as-is with its REFCNT incremented.\n\n(This is now used as a subroutine by C<sv_magic>.)\n\n\tMAGIC *\tsv_magicext(SV* sv, SV* obj, int how, const MGVTBL *vtbl, const char* name, I32 namlen)"
sv_mortalcopy:
  cmd: ''
  exp: "Creates a new SV which is a copy of the original SV (using C<sv_setsv>).\nThe new SV is marked as mortal. It will be destroyed \"soon\", either by an\nexplicit call to FREETMPS, or by an implicit call at places such as\nstatement boundaries.  See also C<sv_newmortal> and C<sv_2mortal>.\n\n\tSV*\tsv_mortalcopy(SV* oldsv)"
sv_newmortal:
  cmd: ''
  exp: "Creates a new null SV which is mortal.  The reference count of the SV is\nset to 1. It will be destroyed \"soon\", either by an explicit call to\nFREETMPS, or by an implicit call at places such as statement boundaries.\nSee also C<sv_mortalcopy> and C<sv_2mortal>.\n\n\tSV*\tsv_newmortal()"
sv_newref:
  cmd: ''
  exp: "Increment an SV's reference count. Use the C<SvREFCNT_inc()> wrapper\ninstead.\n\n\tSV*\tsv_newref(SV* sv)"
sv_nolocking:
  cmd: ''
  exp: "Dummy routine which \"locks\" an SV when there is no locking module present.\nExists to avoid test for a NULL function pointer and because it could\npotentially warn under some level of strict-ness.\n\n\"Superseded\" by sv_nosharing().\n\n\tvoid\tsv_nolocking(SV *sv)"
sv_nosharing:
  cmd: ''
  exp: "Dummy routine which \"shares\" an SV when there is no sharing module present.\nOr \"locks\" it. Or \"unlocks\" it. In other words, ignores its single SV argument.\nExists to avoid test for a NULL function pointer and because it could\npotentially warn under some level of strict-ness.\n\n\tvoid\tsv_nosharing(SV *sv)"
sv_nounlocking:
  cmd: ''
  exp: "Dummy routine which \"unlocks\" an SV when there is no locking module present.\nExists to avoid test for a NULL function pointer and because it could\npotentially warn under some level of strict-ness.\n\n\"Superseded\" by sv_nosharing().\n\n\tvoid\tsv_nounlocking(SV *sv)"
sv_nv:
  cmd: ''
  exp: "A private implementation of the C<SvNVx> macro for compilers which can't\ncope with complex macro expressions. Always use the macro instead.\n\n\tNV\tsv_nv(SV* sv)"
sv_pos_b2u:
  cmd: ''
  exp: "Converts the value pointed to by offsetp from a count of bytes from the\nstart of the string, to a count of the equivalent number of UTF-8 chars.\nHandles magic and type coercion.\n\n\tvoid\tsv_pos_b2u(SV* sv, I32* offsetp)"
sv_pos_u2b:
  cmd: ''
  exp: "Converts the value pointed to by offsetp from a count of UTF-8 chars from\nthe start of the string, to a count of the equivalent number of bytes; if\nlenp is non-zero, it does the same to lenp, but this time starting from\nthe offset, rather than from the start of the string. Handles magic and\ntype coercion.\n\n\tvoid\tsv_pos_u2b(SV* sv, I32* offsetp, I32* lenp)"
sv_pv:
  cmd: ''
  exp: "Use the C<SvPV_nolen> macro instead\n\n\tchar*\tsv_pv(SV *sv)"
sv_pvbyte:
  cmd: ''
  exp: "Use C<SvPVbyte_nolen> instead.\n\n\tchar*\tsv_pvbyte(SV *sv)"
sv_pvbyten:
  cmd: ''
  exp: "A private implementation of the C<SvPVbyte> macro for compilers\nwhich can't cope with complex macro expressions. Always use the macro\ninstead.\n\n\tchar*\tsv_pvbyten(SV *sv, STRLEN *lp)"
sv_pvbyten_force:
  cmd: ''
  exp: "The backend for the C<SvPVbytex_force> macro. Always use the macro instead.\n\n\tchar*\tsv_pvbyten_force(SV* sv, STRLEN* lp)"
sv_pvn:
  cmd: ''
  exp: "A private implementation of the C<SvPV> macro for compilers which can't\ncope with complex macro expressions. Always use the macro instead.\n\n\tchar*\tsv_pvn(SV *sv, STRLEN *lp)"
sv_pvn_force:
  cmd: ''
  exp: "Get a sensible string out of the SV somehow.\nA private implementation of the C<SvPV_force> macro for compilers which\ncan't cope with complex macro expressions. Always use the macro instead.\n\n\tchar*\tsv_pvn_force(SV* sv, STRLEN* lp)"
sv_pvn_force_flags:
  cmd: ''
  exp: "Get a sensible string out of the SV somehow.\nIf C<flags> has C<SV_GMAGIC> bit set, will C<mg_get> on C<sv> if\nappropriate, else not. C<sv_pvn_force> and C<sv_pvn_force_nomg> are\nimplemented in terms of this function.\nYou normally want to use the various wrapper macros instead: see\nC<SvPV_force> and C<SvPV_force_nomg>\n\n\tchar*\tsv_pvn_force_flags(SV* sv, STRLEN* lp, I32 flags)"
sv_pvutf8:
  cmd: ''
  exp: "Use the C<SvPVutf8_nolen> macro instead\n\n\tchar*\tsv_pvutf8(SV *sv)"
sv_pvutf8n:
  cmd: ''
  exp: "A private implementation of the C<SvPVutf8> macro for compilers\nwhich can't cope with complex macro expressions. Always use the macro\ninstead.\n\n\tchar*\tsv_pvutf8n(SV *sv, STRLEN *lp)"
sv_pvutf8n_force:
  cmd: ''
  exp: "The backend for the C<SvPVutf8x_force> macro. Always use the macro instead.\n\n\tchar*\tsv_pvutf8n_force(SV* sv, STRLEN* lp)"
sv_recode_to_utf8:
  cmd: ''
  exp: "The encoding is assumed to be an Encode object, on entry the PV\nof the sv is assumed to be octets in that encoding, and the sv\nwill be converted into Unicode (and UTF-8).\n\nIf the sv already is UTF-8 (or if it is not POK), or if the encoding\nis not a reference, nothing is done to the sv.  If the encoding is not\nan C<Encode::XS> Encoding object, bad things will happen.\n(See F<lib/encoding.pm> and L<Encode>).\n\nThe PV of the sv is returned.\n\n\tchar*\tsv_recode_to_utf8(SV* sv, SV *encoding)"
sv_reftype:
  cmd: ''
  exp: "Returns a string describing what the SV is a reference to.\n\n\tconst char*\tsv_reftype(const SV* sv, int ob)"
sv_replace:
  cmd: ''
  exp: "Make the first argument a copy of the second, then delete the original.\nThe target SV physically takes over ownership of the body of the source SV\nand inherits its flags; however, the target keeps any magic it owns,\nand any magic in the source is discarded.\nNote that this is a rather specialist SV copying operation; most of the\ntime you'll want to use C<sv_setsv> or one of its many macro front-ends.\n\n\tvoid\tsv_replace(SV* sv, SV* nsv)"
sv_report_used:
  cmd: ''
  exp: "Dump the contents of all SVs not yet freed. (Debugging aid).\n\n\tvoid\tsv_report_used()"
sv_reset:
  cmd: ''
  exp: "Underlying implementation for the C<reset> Perl function.\nNote that the perl-level function is vaguely deprecated.\n\n\tvoid\tsv_reset(const char* s, HV* stash)"
sv_rvweaken:
  cmd: ''
  exp: "Weaken a reference: set the C<SvWEAKREF> flag on this RV; give the\nreferred-to SV C<PERL_MAGIC_backref> magic if it hasn't already; and\npush a back-reference to this RV onto the array of backreferences\nassociated with that magic. If the RV is magical, set magic will be\ncalled after the RV is cleared.\n\n\tSV*\tsv_rvweaken(SV *sv)"
sv_setiv:
  cmd: ''
  exp: "Copies an integer into the given SV, upgrading first if necessary.\nDoes not handle 'set' magic.  See also C<sv_setiv_mg>.\n\n\tvoid\tsv_setiv(SV* sv, IV num)"
sv_setiv_mg:
  cmd: ''
  exp: "Like C<sv_setiv>, but also handles 'set' magic.\n\n\tvoid\tsv_setiv_mg(SV *sv, IV i)"
sv_setnv:
  cmd: ''
  exp: "Copies a double into the given SV, upgrading first if necessary.\nDoes not handle 'set' magic.  See also C<sv_setnv_mg>.\n\n\tvoid\tsv_setnv(SV* sv, NV num)"
sv_setnv_mg:
  cmd: ''
  exp: "Like C<sv_setnv>, but also handles 'set' magic.\n\n\tvoid\tsv_setnv_mg(SV *sv, NV num)"
sv_setpv:
  cmd: ''
  exp: "Copies a string into an SV.  The string must be null-terminated.  Does not\nhandle 'set' magic.  See C<sv_setpv_mg>.\n\n\tvoid\tsv_setpv(SV* sv, const char* ptr)"
sv_setpv_mg:
  cmd: ''
  exp: "Like C<sv_setpv>, but also handles 'set' magic.\n\n\tvoid\tsv_setpv_mg(SV *sv, const char *ptr)"
sv_setpvf:
  cmd: ''
  exp: "Works like C<sv_catpvf> but copies the text into the SV instead of\nappending it.  Does not handle 'set' magic.  See C<sv_setpvf_mg>.\n\n\tvoid\tsv_setpvf(SV* sv, const char* pat, ...)"
sv_setpvf_mg:
  cmd: ''
  exp: "Like C<sv_setpvf>, but also handles 'set' magic.\n\n\tvoid\tsv_setpvf_mg(SV *sv, const char* pat, ...)"
sv_setpviv:
  cmd: ''
  exp: "Copies an integer into the given SV, also updating its string value.\nDoes not handle 'set' magic.  See C<sv_setpviv_mg>.\n\n\tvoid\tsv_setpviv(SV* sv, IV num)"
sv_setpviv_mg:
  cmd: ''
  exp: "Like C<sv_setpviv>, but also handles 'set' magic.\n\n\tvoid\tsv_setpviv_mg(SV *sv, IV iv)"
sv_setpvn:
  cmd: ''
  exp: "Copies a string into an SV.  The C<len> parameter indicates the number of\nbytes to be copied.  If the C<ptr> argument is NULL the SV will become\nundefined.  Does not handle 'set' magic.  See C<sv_setpvn_mg>.\n\n\tvoid\tsv_setpvn(SV* sv, const char* ptr, STRLEN len)"
sv_setpvn_mg:
  cmd: ''
  exp: "Like C<sv_setpvn>, but also handles 'set' magic.\n\n\tvoid\tsv_setpvn_mg(SV *sv, const char *ptr, STRLEN len)"
sv_setpvs:
  cmd: ''
  exp: "Like C<sv_setpvn>, but takes a literal string instead of a string/length pair.\n\n\tvoid\tsv_setpvs(SV* sv, const char* s)"
sv_setref_iv:
  cmd: ''
  exp: "Copies an integer into a new SV, optionally blessing the SV.  The C<rv>\nargument will be upgraded to an RV.  That RV will be modified to point to\nthe new SV.  The C<classname> argument indicates the package for the\nblessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV\nwill have a reference count of 1, and the RV will be returned.\n\n\tSV*\tsv_setref_iv(SV* rv, const char* classname, IV iv)"
sv_setref_nv:
  cmd: ''
  exp: "Copies a double into a new SV, optionally blessing the SV.  The C<rv>\nargument will be upgraded to an RV.  That RV will be modified to point to\nthe new SV.  The C<classname> argument indicates the package for the\nblessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV\nwill have a reference count of 1, and the RV will be returned.\n\n\tSV*\tsv_setref_nv(SV* rv, const char* classname, NV nv)"
sv_setref_pv:
  cmd: ''
  exp: "Copies a pointer into a new SV, optionally blessing the SV.  The C<rv>\nargument will be upgraded to an RV.  That RV will be modified to point to\nthe new SV.  If the C<pv> argument is NULL then C<PL_sv_undef> will be placed\ninto the SV.  The C<classname> argument indicates the package for the\nblessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV\nwill have a reference count of 1, and the RV will be returned.\n\nDo not use with other Perl types such as HV, AV, SV, CV, because those\nobjects will become corrupted by the pointer copy process.\n\nNote that C<sv_setref_pvn> copies the string while this copies the pointer.\n\n\tSV*\tsv_setref_pv(SV* rv, const char* classname, void* pv)"
sv_setref_pvn:
  cmd: ''
  exp: "Copies a string into a new SV, optionally blessing the SV.  The length of the\nstring must be specified with C<n>.  The C<rv> argument will be upgraded to\nan RV.  That RV will be modified to point to the new SV.  The C<classname>\nargument indicates the package for the blessing.  Set C<classname> to\nC<NULL> to avoid the blessing.  The new SV will have a reference count\nof 1, and the RV will be returned.\n\nNote that C<sv_setref_pv> copies the pointer while this copies the string.\n\n\tSV*\tsv_setref_pvn(SV* rv, const char* classname, const char* pv, STRLEN n)"
sv_setref_uv:
  cmd: ''
  exp: "Copies an unsigned integer into a new SV, optionally blessing the SV.  The C<rv>\nargument will be upgraded to an RV.  That RV will be modified to point to\nthe new SV.  The C<classname> argument indicates the package for the\nblessing.  Set C<classname> to C<NULL> to avoid the blessing.  The new SV\nwill have a reference count of 1, and the RV will be returned.\n\n\tSV*\tsv_setref_uv(SV* rv, const char* classname, UV uv)"
sv_setsv:
  cmd: ''
  exp: "Copies the contents of the source SV C<ssv> into the destination SV\nC<dsv>.  The source SV may be destroyed if it is mortal, so don't use this\nfunction if the source SV needs to be reused. Does not handle 'set' magic.\nLoosely speaking, it performs a copy-by-value, obliterating any previous\ncontent of the destination.\n\nYou probably want to use one of the assortment of wrappers, such as\nC<SvSetSV>, C<SvSetSV_nosteal>, C<SvSetMagicSV> and\nC<SvSetMagicSV_nosteal>.\n\n\tvoid\tsv_setsv(SV *dstr, SV *sstr)"
sv_setsv_flags:
  cmd: ''
  exp: "Copies the contents of the source SV C<ssv> into the destination SV\nC<dsv>.  The source SV may be destroyed if it is mortal, so don't use this\nfunction if the source SV needs to be reused. Does not handle 'set' magic.\nLoosely speaking, it performs a copy-by-value, obliterating any previous\ncontent of the destination.\nIf the C<flags> parameter has the C<SV_GMAGIC> bit set, will C<mg_get> on\nC<ssv> if appropriate, else not. If the C<flags> parameter has the\nC<NOSTEAL> bit set then the buffers of temps will not be stolen. <sv_setsv>\nand C<sv_setsv_nomg> are implemented in terms of this function.\n\nYou probably want to use one of the assortment of wrappers, such as\nC<SvSetSV>, C<SvSetSV_nosteal>, C<SvSetMagicSV> and\nC<SvSetMagicSV_nosteal>.\n\nThis is the primary function for copying scalars, and most other\ncopy-ish functions and macros use this underneath.\n\n\tvoid\tsv_setsv_flags(SV *dstr, SV *sstr, I32 flags)"
sv_setsv_mg:
  cmd: ''
  exp: "Like C<sv_setsv>, but also handles 'set' magic.\n\n\tvoid\tsv_setsv_mg(SV *dstr, SV *sstr)"
sv_setsv_nomg:
  cmd: ''
  exp: "Like C<sv_setsv> but doesn't process magic.\n\n\tvoid\tsv_setsv_nomg(SV* dsv, SV* ssv)"
sv_setuv:
  cmd: ''
  exp: "Copies an unsigned integer into the given SV, upgrading first if necessary.\nDoes not handle 'set' magic.  See also C<sv_setuv_mg>.\n\n\tvoid\tsv_setuv(SV* sv, UV num)"
sv_setuv_mg:
  cmd: ''
  exp: "Like C<sv_setuv>, but also handles 'set' magic.\n\n\tvoid\tsv_setuv_mg(SV *sv, UV u)"
sv_taint:
  cmd: ''
  exp: "Taint an SV. Use C<SvTAINTED_on> instead.\n\tvoid\tsv_taint(SV* sv)"
sv_tainted:
  cmd: ''
  exp: "Test an SV for taintedness. Use C<SvTAINTED> instead.\n\tbool\tsv_tainted(SV* sv)"
sv_true:
  cmd: ''
  exp: "Returns true if the SV has a true value by Perl's rules.\nUse the C<SvTRUE> macro instead, which may call C<sv_true()> or may\ninstead use an in-line version.\n\n\tI32\tsv_true(SV *sv)"
sv_uni_display:
  cmd: ''
  exp: "Build to the scalar dsv a displayable version of the scalar sv,\nthe displayable version being at most pvlim bytes long\n(if longer, the rest is truncated and \"...\" will be appended).\n\nThe flags argument is as in pv_uni_display().\n\nThe pointer to the PV of the dsv is returned.\n\n\tchar*\tsv_uni_display(SV *dsv, SV *ssv, STRLEN pvlim, UV flags)"
sv_unmagic:
  cmd: ''
  exp: "Removes all magic of type C<type> from an SV.\n\n\tint\tsv_unmagic(SV* sv, int type)"
sv_unref:
  cmd: ''
  exp: "Unsets the RV status of the SV, and decrements the reference count of\nwhatever was being referenced by the RV.  This can almost be thought of\nas a reversal of C<newSVrv>.  This is C<sv_unref_flags> with the C<flag>\nbeing zero.  See C<SvROK_off>.\n\n\tvoid\tsv_unref(SV* sv)"
sv_unref_flags:
  cmd: ''
  exp: "Unsets the RV status of the SV, and decrements the reference count of\nwhatever was being referenced by the RV.  This can almost be thought of\nas a reversal of C<newSVrv>.  The C<cflags> argument can contain\nC<SV_IMMEDIATE_UNREF> to force the reference count to be decremented\n(otherwise the decrementing is conditional on the reference count being\ndifferent from one or the reference being a readonly SV).\nSee C<SvROK_off>.\n\n\tvoid\tsv_unref_flags(SV *ref, U32 flags)"
sv_untaint:
  cmd: ''
  exp: "Untaint an SV. Use C<SvTAINTED_off> instead.\n\tvoid\tsv_untaint(SV* sv)"
sv_upgrade:
  cmd: ''
  exp: "Upgrade an SV to a more complex form.  Generally adds a new body type to the\nSV, then copies across as much information as possible from the old body.\nYou generally want to use the C<SvUPGRADE> macro wrapper. See also C<svtype>.\n\n\tvoid\tsv_upgrade(SV* sv, svtype new_type)"
sv_usepvn:
  cmd: ''
  exp: "Tells an SV to use C<ptr> to find its string value. Implemented by\ncalling C<sv_usepvn_flags> with C<flags> of 0, hence does not handle 'set'\nmagic. See C<sv_usepvn_flags>.\n\n\tvoid\tsv_usepvn(SV* sv, char* ptr, STRLEN len)"
sv_usepvn_flags:
  cmd: ''
  exp: "Tells an SV to use C<ptr> to find its string value.  Normally the\nstring is stored inside the SV but sv_usepvn allows the SV to use an\noutside string.  The C<ptr> should point to memory that was allocated\nby C<malloc>.  The string length, C<len>, must be supplied.  By default\nthis function will realloc (i.e. move) the memory pointed to by C<ptr>,\nso that pointer should not be freed or used by the programmer after\ngiving it to sv_usepvn, and neither should any pointers from \"behind\"\nthat pointer (e.g. ptr + 1) be used.\n\nIf C<flags> & SV_SMAGIC is true, will call SvSETMAGIC. If C<flags> &\nSV_HAS_TRAILING_NUL is true, then C<ptr[len]> must be NUL, and the realloc\nwill be skipped. (i.e. the buffer is actually at least 1 byte longer than\nC<len>, and already meets the requirements for storing in C<SvPVX>)\n\n\tvoid\tsv_usepvn_flags(SV* sv, char* ptr, STRLEN len, U32 flags)"
sv_usepvn_mg:
  cmd: ''
  exp: "Like C<sv_usepvn>, but also handles 'set' magic.\n\n\tvoid\tsv_usepvn_mg(SV *sv, char *ptr, STRLEN len)"
sv_utf8_decode:
  cmd: ''
  exp: "If the PV of the SV is an octet sequence in UTF-8\nand contains a multiple-byte character, the C<SvUTF8> flag is turned on\nso that it looks like a character. If the PV contains only single-byte\ncharacters, the C<SvUTF8> flag stays being off.\nScans PV for validity and returns false if the PV is invalid UTF-8.\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tbool\tsv_utf8_decode(SV *sv)"
sv_utf8_downgrade:
  cmd: ''
  exp: "Attempts to convert the PV of an SV from characters to bytes.\nIf the PV contains a character that cannot fit\nin a byte, this conversion will fail;\nin this case, either returns false or, if C<fail_ok> is not\ntrue, croaks.\n\nThis is not as a general purpose Unicode to byte encoding interface:\nuse the Encode extension for that.\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tbool\tsv_utf8_downgrade(SV *sv, bool fail_ok)"
sv_utf8_encode:
  cmd: ''
  exp: "Converts the PV of an SV to UTF-8, but then turns the C<SvUTF8>\nflag off so that it looks like octets again.\n\n\tvoid\tsv_utf8_encode(SV *sv)"
sv_utf8_upgrade:
  cmd: ''
  exp: "Converts the PV of an SV to its UTF-8-encoded form.\nForces the SV to string form if it is not already.\nWill C<mg_get> on C<sv> if appropriate.\nAlways sets the SvUTF8 flag to avoid future validity checks even\nif the whole string is the same in UTF-8 as not.\nReturns the number of bytes in the converted string\n\nThis is not as a general purpose byte encoding to Unicode interface:\nuse the Encode extension for that.\n\n\tSTRLEN\tsv_utf8_upgrade(SV *sv)"
sv_utf8_upgrade_flags:
  cmd: ''
  exp: "Converts the PV of an SV to its UTF-8-encoded form.\nForces the SV to string form if it is not already.\nAlways sets the SvUTF8 flag to avoid future validity checks even\nif all the bytes are invariant in UTF-8. If C<flags> has C<SV_GMAGIC> bit set,\nwill C<mg_get> on C<sv> if appropriate, else not.\nReturns the number of bytes in the converted string\nC<sv_utf8_upgrade> and\nC<sv_utf8_upgrade_nomg> are implemented in terms of this function.\n\nThis is not as a general purpose byte encoding to Unicode interface:\nuse the Encode extension for that.\n\n\tSTRLEN\tsv_utf8_upgrade_flags(SV *sv, I32 flags)"
sv_utf8_upgrade_nomg:
  cmd: ''
  exp: "Like sv_utf8_upgrade, but doesn't do magic on C<sv>\n\n\tSTRLEN\tsv_utf8_upgrade_nomg(SV *sv)"
sv_uv:
  cmd: ''
  exp: "A private implementation of the C<SvUVx> macro for compilers which can't\ncope with complex macro expressions. Always use the macro instead.\n\n\tUV\tsv_uv(SV* sv)"
sv_vcatpvf:
  cmd: ''
  exp: "Processes its arguments like C<vsprintf> and appends the formatted output\nto an SV.  Does not handle 'set' magic.  See C<sv_vcatpvf_mg>.\n\nUsually used via its frontend C<sv_catpvf>.\n\n\tvoid\tsv_vcatpvf(SV* sv, const char* pat, va_list* args)"
sv_vcatpvf_mg:
  cmd: ''
  exp: "Like C<sv_vcatpvf>, but also handles 'set' magic.\n\nUsually used via its frontend C<sv_catpvf_mg>.\n\n\tvoid\tsv_vcatpvf_mg(SV* sv, const char* pat, va_list* args)"
sv_vcatpvfn:
  cmd: ''
  exp: "Processes its arguments like C<vsprintf> and appends the formatted output\nto an SV.  Uses an array of SVs if the C style variable argument list is\nmissing (NULL).  When running with taint checks enabled, indicates via\nC<maybe_tainted> if results are untrustworthy (often due to the use of\nlocales).\n\nUsually used via one of its frontends C<sv_vcatpvf> and C<sv_vcatpvf_mg>.\n\n\tvoid\tsv_vcatpvfn(SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)"
sv_vsetpvf:
  cmd: ''
  exp: "Works like C<sv_vcatpvf> but copies the text into the SV instead of\nappending it.  Does not handle 'set' magic.  See C<sv_vsetpvf_mg>.\n\nUsually used via its frontend C<sv_setpvf>.\n\n\tvoid\tsv_vsetpvf(SV* sv, const char* pat, va_list* args)"
sv_vsetpvf_mg:
  cmd: ''
  exp: "Like C<sv_vsetpvf>, but also handles 'set' magic.\n\nUsually used via its frontend C<sv_setpvf_mg>.\n\n\tvoid\tsv_vsetpvf_mg(SV* sv, const char* pat, va_list* args)"
sv_vsetpvfn:
  cmd: ''
  exp: "Works like C<sv_vcatpvfn> but copies the text into the SV instead of\nappending it.\n\nUsually used via one of its frontends C<sv_vsetpvf> and C<sv_vsetpvf_mg>.\n\n\tvoid\tsv_vsetpvfn(SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, bool *maybe_tainted)"
svtype:
  cmd: ''
  exp: "An enum of flags for Perl types.  These are found in the file B<sv.h>\nin the C<svtype> enum.  Test these flags with the C<SvTYPE> macro."
toLOWER:
  cmd: ''
  exp: "Converts the specified character to lowercase.  Characters outside the\nUS-ASCII (Basic Latin) range are viewed as not having any case.\n\n\tchar\ttoLOWER(char ch)"
toUPPER:
  cmd: ''
  exp: "Converts the specified character to uppercase.  Characters outside the\nUS-ASCII (Basic Latin) range are viewed as not having any case.\n\n\tchar\ttoUPPER(char ch)"
to_utf8_case:
  cmd: ''
  exp: "The \"p\" contains the pointer to the UTF-8 string encoding\nthe character that is being converted.\n\nThe \"ustrp\" is a pointer to the character buffer to put the\nconversion result to.  The \"lenp\" is a pointer to the length\nof the result.\n\nThe \"swashp\" is a pointer to the swash to use.\n\nBoth the special and normal mappings are stored lib/unicore/To/Foo.pl,\nand loaded by SWASHNEW, using lib/utf8_heavy.pl.  The special (usually,\nbut not always, a multicharacter mapping), is tried first.\n\nThe \"special\" is a string like \"utf8::ToSpecLower\", which means the\nhash %utf8::ToSpecLower.  The access to the hash is through\nPerl_to_utf8_case().\n\nThe \"normal\" is a string like \"ToLower\" which means the swash\n%utf8::ToLower.\n\n\tUV\tto_utf8_case(const U8 *p, U8* ustrp, STRLEN *lenp, SV **swashp, const char *normal, const char *special)"
to_utf8_fold:
  cmd: ''
  exp: "Convert the UTF-8 encoded character at p to its foldcase version and\nstore that in UTF-8 in ustrp and its length in bytes in lenp.  Note\nthat the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the\nfoldcase version may be longer than the original character (up to\nthree characters).\n\nThe first character of the foldcased version is returned\n(but note, as explained above, that there may be more.)\n\n\tUV\tto_utf8_fold(const U8 *p, U8* ustrp, STRLEN *lenp)"
to_utf8_lower:
  cmd: ''
  exp: "Convert the UTF-8 encoded character at p to its lowercase version and\nstore that in UTF-8 in ustrp and its length in bytes in lenp.  Note\nthat the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the\nlowercase version may be longer than the original character.\n\nThe first character of the lowercased version is returned\n(but note, as explained above, that there may be more.)\n\n\tUV\tto_utf8_lower(const U8 *p, U8* ustrp, STRLEN *lenp)"
to_utf8_title:
  cmd: ''
  exp: "Convert the UTF-8 encoded character at p to its titlecase version and\nstore that in UTF-8 in ustrp and its length in bytes in lenp.  Note\nthat the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since the\ntitlecase version may be longer than the original character.\n\nThe first character of the titlecased version is returned\n(but note, as explained above, that there may be more.)\n\n\tUV\tto_utf8_title(const U8 *p, U8* ustrp, STRLEN *lenp)"
to_utf8_upper:
  cmd: ''
  exp: "Convert the UTF-8 encoded character at p to its uppercase version and\nstore that in UTF-8 in ustrp and its length in bytes in lenp.  Note\nthat the ustrp needs to be at least UTF8_MAXBYTES_CASE+1 bytes since\nthe uppercase version may be longer than the original character.\n\nThe first character of the uppercased version is returned\n(but note, as explained above, that there may be more.)\n\n\tUV\tto_utf8_upper(const U8 *p, U8* ustrp, STRLEN *lenp)"
unpack_str:
  cmd: ''
  exp: "The engine implementing unpack() Perl function. Note: parameters strbeg, new_s\nand ocnt are not used. This call should not be used, use unpackstring instead.\n\n\tI32\tunpack_str(const char *pat, const char *patend, const char *s, const char *strbeg, const char *strend, char **new_s, I32 ocnt, U32 flags)"
unpackstring:
  cmd: ''
  exp: "The engine implementing unpack() Perl function. C<unpackstring> puts the\nextracted list items on the stack and returns the number of elements.\nIssue C<PUTBACK> before and C<SPAGAIN> after the call to this function.\n\n\tI32\tunpackstring(const char *pat, const char *patend, const char *s, const char *strend, U32 flags)"
upg_version:
  cmd: ''
  exp: "In-place upgrade of the supplied SV to a version object.\n\n    SV *sv = upg_version(SV *sv, bool qv);\n\nReturns a pointer to the upgraded SV.  Set the boolean qv if you want\nto force this SV to be interpreted as an \"extended\" version.\n\n\tSV*\tupg_version(SV *ver, bool qv)"
utf8_distance:
  cmd: ''
  exp: "Returns the number of UTF-8 characters between the UTF-8 pointers C<a>\nand C<b>.\n\nWARNING: use only if you *know* that the pointers point inside the\nsame UTF-8 buffer.\n\n\tIV\tutf8_distance(const U8 *a, const U8 *b)"
utf8_hop:
  cmd: ''
  exp: "Return the UTF-8 pointer C<s> displaced by C<off> characters, either\nforward or backward.\n\nWARNING: do not use the following unless you *know* C<off> is within\nthe UTF-8 data pointed to by C<s> *and* that on entry C<s> is aligned\non the first byte of character or just after the last byte of a character.\n\n\tU8*\tutf8_hop(const U8 *s, I32 off)"
utf8_length:
  cmd: ''
  exp: "Return the length of the UTF-8 char encoded string C<s> in characters.\nStops at C<e> (inclusive).  If C<e E<lt> s> or if the scan would end\nup past C<e>, croaks.\n\n\tSTRLEN\tutf8_length(const U8* s, const U8 *e)"
utf8_to_bytes:
  cmd: ''
  exp: "Converts a string C<s> of length C<len> from UTF-8 into native byte encoding.\nUnlike C<bytes_to_utf8>, this over-writes the original string, and\nupdates len to contain the new length.\nReturns zero on failure, setting C<len> to -1.\n\nIf you need a copy of the string, see C<bytes_from_utf8>.\n\nNOTE: this function is experimental and may change or be\nremoved without notice.\n\n\tU8*\tutf8_to_bytes(U8 *s, STRLEN *len)"
utf8_to_uvchr:
  cmd: ''
  exp: "Returns the native character value of the first character in the string C<s>\nwhich is assumed to be in UTF-8 encoding; C<retlen> will be set to the\nlength, in bytes, of that character.\n\nIf C<s> does not point to a well-formed UTF-8 character, zero is\nreturned and retlen is set, if possible, to -1.\n\n\tUV\tutf8_to_uvchr(const U8 *s, STRLEN *retlen)"
utf8_to_uvuni:
  cmd: ''
  exp: "Returns the Unicode code point of the first character in the string C<s>\nwhich is assumed to be in UTF-8 encoding; C<retlen> will be set to the\nlength, in bytes, of that character.\n\nThis function should only be used when the returned UV is considered\nan index into the Unicode semantic tables (e.g. swashes).\n\nIf C<s> does not point to a well-formed UTF-8 character, zero is\nreturned and retlen is set, if possible, to -1.\n\n\tUV\tutf8_to_uvuni(const U8 *s, STRLEN *retlen)"
utf8n_to_uvchr:
  cmd: ''
  exp: "flags\n\nReturns the native character value of the first character in the string \nC<s>\nwhich is assumed to be in UTF-8 encoding; C<retlen> will be set to the\nlength, in bytes, of that character.\n\nAllows length and flags to be passed to low level routine.\n\n\tUV\tutf8n_to_uvchr(const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)"
utf8n_to_uvuni:
  cmd: ''
  exp: "Bottom level UTF-8 decode routine.\nReturns the Unicode code point value of the first character in the string C<s>\nwhich is assumed to be in UTF-8 encoding and no longer than C<curlen>;\nC<retlen> will be set to the length, in bytes, of that character.\n\nIf C<s> does not point to a well-formed UTF-8 character, the behaviour\nis dependent on the value of C<flags>: if it contains UTF8_CHECK_ONLY,\nit is assumed that the caller will raise a warning, and this function\nwill silently just set C<retlen> to C<-1> and return zero.  If the\nC<flags> does not contain UTF8_CHECK_ONLY, warnings about\nmalformations will be given, C<retlen> will be set to the expected\nlength of the UTF-8 character in bytes, and zero will be returned.\n\nThe C<flags> can also contain various flags to allow deviations from\nthe strict UTF-8 encoding (see F<utf8.h>).\n\nMost code should use utf8_to_uvchr() rather than call this directly.\n\n\tUV\tutf8n_to_uvuni(const U8 *s, STRLEN curlen, STRLEN *retlen, U32 flags)"
uvchr_to_utf8:
  cmd: ''
  exp: "Adds the UTF-8 representation of the Native codepoint C<uv> to the end\nof the string C<d>; C<d> should be have at least C<UTF8_MAXBYTES+1> free\nbytes available. The return value is the pointer to the byte after the\nend of the new character. In other words,\n\n    d = uvchr_to_utf8(d, uv);\n\nis the recommended wide native character-aware way of saying\n\n    *(d++) = uv;\n\n\tU8*\tuvchr_to_utf8(U8 *d, UV uv)"
uvuni_to_utf8_flags:
  cmd: ''
  exp: "Adds the UTF-8 representation of the Unicode codepoint C<uv> to the end\nof the string C<d>; C<d> should be have at least C<UTF8_MAXBYTES+1> free\nbytes available. The return value is the pointer to the byte after the\nend of the new character. In other words,\n\n    d = uvuni_to_utf8_flags(d, uv, flags);\n\nor, in most cases,\n\n    d = uvuni_to_utf8(d, uv);\n\n(which is equivalent to)\n\n    d = uvuni_to_utf8_flags(d, uv, 0);\n\nis the recommended Unicode-aware way of saying\n\n    *(d++) = uv;\n\n\tU8*\tuvuni_to_utf8_flags(U8 *d, UV uv, UV flags)"
vcmp:
  cmd: ''
  exp: "Version object aware cmp.  Both operands must already have been \nconverted into version objects.\n\n\tint\tvcmp(SV *lhv, SV *rhv)"
vnormal:
  cmd: ''
  exp: "Accepts a version object and returns the normalized string\nrepresentation.  Call like:\n\n    sv = vnormal(rv);\n\nNOTE: you can pass either the object directly or the SV\ncontained within the RV.\n\n\tSV*\tvnormal(SV *vs)"
vnumify:
  cmd: ''
  exp: "Accepts a version object and returns the normalized floating\npoint representation.  Call like:\n\n    sv = vnumify(rv);\n\nNOTE: you can pass either the object directly or the SV\ncontained within the RV.\n\n\tSV*\tvnumify(SV *vs)"
vstringify:
  cmd: ''
  exp: "In order to maintain maximum compatibility with earlier versions\nof Perl, this function will return either the floating point\nnotation or the multiple dotted notation, depending on whether\nthe original version contained 1 or more dots, respectively\n\n\tSV*\tvstringify(SV *vs)"
vverify:
  cmd: ''
  exp: "Validates that the SV contains a valid version object.\n\n    bool vverify(SV *vobj);\n\nNote that it only confirms the bare minimum structure (so as not to get\nconfused by derived classes which may contain additional hash entries):\n\n\tbool\tvverify(SV *vs)"
warn:
  cmd: ''
  exp: "This is the XSUB-writer's interface to Perl's C<warn> function.  Call this\nfunction the same way you call the C C<printf> function.  See C<croak>.\n\n\tvoid\twarn(const char* pat, ...)"

