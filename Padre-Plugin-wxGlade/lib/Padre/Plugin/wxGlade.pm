package Padre::Plugin::wxGlade;

=pod

=head1 NAME

Padre::Plugin::wxGlade - Utilities for importing Perl from wxGlade

=head1 DESCRIPTION

The wxGlade user interface design tool helps to produce user interface code
relatively quickly. However, the Perl code that is generates is incompatible
with Padre's L<Wx> usage style.

B<Padre::Plugin::wxGlade> provides a series of simple document transform tools
to assist with the process of cleaning up the raw Perl code generated by
wxGlade to something that will work properly with Padre.

=head1 METHODS

=cut

use 5.006;
use strict;
use warnings;
use Params::Util qw{ _INSTANCE };
use Padre::Wx      ();
use Padre::Plugin  ();

our $VERSION = '0.01';
our @ISA     = 'Padre::Plugin';





#####################################################################
# Padre::Plugin Methods

sub padre_interfaces {
	'Padre::Plugin' => 0.42
}

sub plugin_name {
	'wxGlade Tools';
}

sub menu_plugins_simple {
	my $self = shift;
	return $self->plugin_name => [
		'Wx::wxConstants' => sub {
			$self->wx_constants;
		},
	];
}





######################################################################
# Menu Commands

sub wx_constants {
	my $self     = shift;
	my $document = shift;
	unless ( Params::Util::_INSTANCE($document, 'PPI::Document') ) {
		croak("Did not provide a PPI document to wx_constants");
	}
}





######################################################################
# Support Methods

sub parse_lines {
	my $self = shift;
	my $text = shift;

	# Build a statement set
	my $id    = 0;
	my @lines = map { +{
		id      => $id++,
		content => $_,
		names   => {
			map { $_ => 1 } /(\$self->{\w+}|\$\w+)/gs
		},
	} } split /\n/, $text;

	return \@lines;
}

sub isolate_package {
	my $self    = shift;
	my $pkg     = shift;
	my $wxglade = shift;

	# Regex-match the package in the text
	unless ( $wxglade =~ /(package $pkg;.+)\# end of class $pkg\b/s ) {
		return undef;
	}

	# Remove the wxglade comments and create the package
	my $text = $1 . "1;\n";
	$text =~ s/# (?:begin|end) wxGlade[^\n]*\n+//gs;

	# Strip the class back to the essentials
	$text =~ s/^.+SUPER::new\(.+?\);\n//s;
	$text =~ s/^\S[^\n]*?\n//gm;
	$text =~ s/^\tmy \$self = shift;\n//gm;
	$text =~ s/^\treturn \$self;\n//gm;
	$text =~ s/^\t\$self-\>__set_properties\(\);\n//gm;
	$text =~ s/^\t\$self-\>__do_layout\(\);\n//gm;
	$text =~ s/,\s+\);\n/);\n/gs;
	$text =~ s/(-\>\w+)\(\)/$1/gs;
	$text =~ s/\s*\n\t\t/ /gs;
	$text =~ s/\n+/\n/gs;

	return $text;
}

sub constant_normalise {
	my $self     = shift;
	my $document = shift;
	my $mapping  = $self->constant_mapping;

	# Find symbols that looks like Wx constants
	my $list = $document->find( sub {
		$_[1]->isa('PPI::Token::Word')
		and
		$_[1]->content =~ /^(?:wx|EVT_)/
	} ) or return 0;

	# Transform them
	my $changes = 0;
	foreach my $constant ( @$list ) {
		my $name = $constant->{content};
		next unless $mapping->{$name};
		$constant->{content} = $mapping->{$name};
		$changes++;
	}

	return $changes;
}

# Get the list of real installed constants that are provided by
# the "use Wx ':everything' call made by Padre::Wx
sub constant_mapping {
	return {
		( map { $_ => "Wx::$_"        } @Wx::EXPORT_OK       ),
		( map { $_ => "Wx::Event::$_" } @Wx::Event::EVENT_OK ),
	};
}

1;

=pod

=head1 SUPPORT

Bugs should be reported via the CPAN bug tracker at

L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Padre-Plugin-wxGlade>

For other issues, or commercial enhancement or support, contact the author.

=head1 AUTHOR

Adam Kennedy E<lt>adamk@cpan.orgE<gt>

=head1 SEE ALSO

L<Padre>

=head1 COPYRIGHT

Copyright 2009 Adam Kennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

=cut
