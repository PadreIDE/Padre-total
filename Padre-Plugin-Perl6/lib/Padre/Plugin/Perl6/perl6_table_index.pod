=head1 Perl 6 table index

	This is the POD version of http://www.perlfoundation.org/perl6/index.cgi?perl_table_index

=head1 AUTHORS

	This POD was generated by Ahmad M. Zawawi <ahmad.zawawi@gmail.com> via the tool:
	http://svn.perlide.org/padre/trunk/Padre-Plugin-Perl6/parse_perl6_table_index.pl

	For authors of the original wiki place, see:
	http://www.perlfoundation.org/perl6/index.cgi?action=revision_list;page_name=perl_table_index

=head1 LICENSE

	Copyright (c) 2006-2009 under the same (always latest) license(s) used by the Perl 6 /src 
	branch of the Pugs trunk.

=head1 Table index

=head2 !

 - logical negation, forces binary context;
 - (twigil) - twigil of private class and object variables

=head2 !!

 - second Part of the ternary (conditional) operator after ??

=head2 !!!

 (yadda op) - yadda Operator that calles die

=head2 !<

 - not less, synonym for ">="

=head2 !<=

 - not less or equal, weird synonym for ">"

=head2 !=

 - compare op, true if numeric unequal, short for "!=="

=head2 !=:=

 - compare op, tests negated on binding

=head2 !==

 - compare op, tests inequality in numeric context, negated form

=head2 !===

 - compare op, tests identity, negated form

=head2 !>

 - synonym for "<="

=head2 !>=

 - synonym for "<"

=head2 !eq

 - synonym for "ne"

=head2 !eqv

 - negated form of dynamic equivalence

=head2 !ge

 - synonym for "lt"

=head2 !gt

 - synonym for "le"

=head2 !le

 - synonym for "gt"

=head2 !lt

 - synonym for "ge"

=head2 !~~

 - negated smartmatch operator

=head2 " "

 - (quoting op) - double quoting, interpolate with :s, :a, :h, :f, :c, :b (all vars, functions, blocks, control chars), alias to qq//*

=head2 #

 - starts a comment that continues to the end of the line or bracket

=head2 $

 - (sigil) - prefix of scalar vars, operator to force scalar context
 - (regex Metachar) - end of the string

=head2 $$

 - (regex Metachar) - end of a line

=head2 %

 - (sigil) - prefix of hash variables
 - gives remainder of a modulo division, forces numeric context

=head2 &

 - (conext op) - sigil of coderefs
 - junctive and, requires that all conditions are met

=head2 &&

 - logical and, conditonal statements, ends evaluation on the first false expression, returns boolean result

=head2 ' '

 - (quoting op) - simple quoting, just / and ' needs o be quoted, alias to q//

=head2 ( )

 - grouping of values (parameters)
 - (regex Metachar) - encompass a subregex/submatch

=head2 *

 (scalar num op) - multiplies numbers and forces numeric context on parameters;
 (term) - synonym for Inf (Whatever) in connection with a Range operator (".."); marks the end of an array in a slice operator so that negative indices access array elements relative to one beyond the final element
 - marks as prefix slurpy arrays in signatures
 - (twigil) - secondary sigil of global variables

=head2 **

 (scalar num op) - raises a number to a power and forces numeric context
 (regex Metachar) - multiplies char or group like x (scalar strig op) outside of regex, (ha)**3 equals (hahaha)

=head2 +

 - (conext op), (scalar num op) - forces numeric context of values and adds results

=head2 +&

 (scalar num op) - bitwise and, numeric context

=head2 ++

 (prefix & suffix op) - generic autoincrement, calls internal iterator of that object, before (prefix) or after (suffix) the evaluation of the surrounding term

=head2 +<

 (scalar num op) - shift left in numeric kontext

=head2 +>

 (scalar num op) - shift right in numeric kontext

=head2 +^

 (scalar num op) - bitwise xor in numeric context

=head2 +|

 (scalar num op) - bitwise or in numeric context

=head2 ,

 - list generating operator

=head2 -

 - forces numeric context and subtract

=head2 --

 (prefix & suffix op) - generic autodecrement, calls internal iterator of that object, before (prefix) or after (suffix) the evaluation of the surrounding term

=head2 -->

 - alternative syntax to type a parameter

=head2 .

 - secondary sigil for public accessors (getter/setter)
 - (regex Metachar) - really any character (unlike Perl 5)

=head2 ..

 - range generating operator; range object in scalar context, see smartmatch table

=head2 ...

 (yadda op) - yadda Operator that calles fail (exception)

=head2 /

 - division, numeric context

=head2 //

 - err operator, returns the first defined value

=head2 :

 - pair generation operator
 - (filetest op) - start of all file text ops, syntax: ":" ~ one (<r w x o R W X O e z s f d l p S b c t u g k T B M A C>)
 - (twigil) - for autogenerated named parameters of a block
 - converts (decimal) numbers to another base, number of base follows after the ":"
 - marks as prefix named parameter in a signature
 - (flow control) - endchar of all labels, jou can jump to (see also goto)

=head2 ::

 - name space separator (like in Perl 5)

=head2 ::=

 - binding at compile time

=head2 :=

 - creates an alias to a variable (binding)

=head2 ;

 - seperates commands (statements) or array indices eg @[2;3] instead of @a[2][3]

=head2 <

 less than, numeric comparison operator

=head2 < >

 - (quoting op) - circumfix quoting operator for grouping with autoquoting (alias to Q :q :ww /.../)

=head2 <->

 double pointy syntax to assign a rw parameter to a block

=head2 <<

 - (meta op) - applies the operator on the left as hyper operator to the array on the right

=head2 << >>

 - (quoting op) - circumfix quoting operator for grouping with autoquoting and evaluation (alias to Q :qq :ww /.../)

=head2 <<==

 - leftward pointing feed operator that adds values to an existing list (append-mode)

=head2 <=

 - less than or equal, numeric comparison operator

=head2 <==

 - leftward pointing feed operator

=head2 <=>

 - numeric less-equal-greater comparison for Order class

=head2 <op>=

 - (meta op) - self assignment, left side is one oper and the result is assigned to ($a += 3; equals $a = $a + 3)

=head2 <var>[]

 - postcircumfix operator, appended on an array var, returns an array slice with values which indexes was inside the brackets

=head2 =

 (Op) - assignment, left side is evaluated and assigned to the right

=head2 =:=

 (Op) - compares binding, if both vars are bound to same memory location

=head2 ==

 (Op) - equality of value (numeric)

=head2 ===

 (Op) - equality of value and type

=head2 ==>

 (Op) - rightward pointing feed operator

=head2 ==>>

 (Op) - rightward pointing feed operator that adds values to an existing list (append-mode)

=head2 =>

 (Op) - pair (and hash) constructor, fatarrow

=head2 >

 (Op) - greater than, numeric comparison operator; ends grouping with autoquoting (formerly qw())

=head2 >=

 (Op) - greater than or equal, numeric comparison Op

=head2 >>

 - (meta op) - binds operator (right) as hyper operator to an array (left)

=head2 ?

 - (conext op) - forces binary context in an expression
 - marks as postfix optional parameters in signatures
 - quantifier for 0 or 1 occurrence in Regexes
 - (twigil) - secondary sigil for constant compiler hint variables

=head2 ?&

 - logical op, and combinator, forces binary context

=head2 ?? !!

 - ternary or conditional operator

=head2 ???

 (yadda op) - yadda operator that calles warn

=head2 ?^

 - logical xor, forces operands into boolean context

=head2 ?|

 - logical or, forces operands into boolean context

=head2 @

 - (sigil) - sigil of an array

=head2 @@

 - (conext op) - sigil for multislice context, meaning an array that may contain array references

=head2 A

 - (filetest op) - Script start time minus file access time, in days

=head2 B

 - (filetest op) - file is a binary data file (opposite of :T)

=head2 BEGIN

 (closure trait) - special Block, is executed in compile time

=head2 C

 - (filetest op) - Script start time minus inode change time (Unix, may differ for other platforms)

=head2 Code

 - data typ for code references of any kind  

=head2 Failure

 - data type for an error thrown by an unhandled exception

=head2 Inf

 - infinity, to generate infinite lazy lists

=head2 M

 - (filetest op) - Script start time minus file modification time, in days

=head2 O

 - (filetest op) - tests if file is owned by real uid

=head2 P5

 - (regex modifier) - activate old Perl 5 regex rules, alias to :Perl5

=head2 Pair

 - data type

=head2 Perl5

 - (regex modifier) - activate old Perl 5 regex rules, alias to :P5* pick (array method) - select a number of random vaues

=head2 Q

 - (generalized quoting op) - understands a list of adverbs

=head2 R

<op> - (meta op) - reverse operands
 - (filetest op) - check if file is readable by real uid/gid

=head2 S

 - (filetest op) - file is a socket

=head2 T

 - (filetest op) - file is an ASCII text file (heuristic guess), (opposite of :B)

=head2 W

 - (filetest op) - check if file is writeable by real uid/gid

=head2 Whatever

 - an undefined type used as wildcard (like undef) (S12)

=head2 X

 (list op) - Cross product of two arrays, eg 1,2 X 3,4 == 1,3,1,4,2,3,2,4 ; alias of comb method
<op> - (meta op) - Cross product with hyper operator, eg <a b> X~ <y z> == <ay az by bz>
 - (filetest op) - check if file is executable by real uid/gid

=head2 Z

 (list op) - alias to zip (list op)

=head2 [ ]

 - circumfix operator that creates a reference to an array that holds all values that encompas these brackets
 - (meta op) - circumfix reduction metaop, close to functional "reduce", applies the operator between all elements of an array

=head2 [\ ]

 - (meta op) - circumfix reduction metaop, applies above reduction to a series of lists made of array slices ranging in length from 1 to the complete length of the original list

=head2 \

 - capture operator, creates a reference to the following structure
 - escape char, all escape sequences inside quotes and regexes start with it

=head2 ^

 - junctive xor, requires that one value in a list is true
 - in ranges excludes a limit value, in scalar context see smartmatch, in array context see array creating operators;
 - (twigil) - for autogenerated positional parameters of a block, position results from alphabetical order of all $^-Variables
 (regex Metachar) - start of the string

=head2 ^^

 - logical xor, combines expressions, returns true when only one expression is true, otherwise false
 (regex Metachar) - start of a line

=head2 a

 - (quoting adverb) - demands evaluation of array variables, short form of ":array", included in "", qq and <<>>
 - (regex modifier) - no distinction between same chars with or without accent (funny symbols above), short for ":ignoreaccent"

=head2 aa

 - (regex modifier) - only for substitutions, replacing with chars that have the same accent pattern as the replaced, short for ":sameaccent"

=head2 abs

 (scalar num op) - returns numeric absolute value

=head2 after

 - comparison operator used by the Order class, true if left should follow right

=head2 all

 - junctive AND operator

=head2 and

 - logical AND operator

=head2 andthen

 - logical AND short circuit operator, transferring $_ from first to second block/command, if first do succeed

=head2 any

 - junctive OR operator

=head2 array

 - (quoting adverb) - demands evaluation of array variables, long form of ":a", included in "", qq and <<>>

=head2 as

 - scalar method, converts like sprintf

=head2 assuming

 - method of all subroutine reference objects that enables Currying

=head2 async

 (block modifier) - allows the interpreter to parallelize the following

=head2 b

 - (filetest op) - file is a block special file (e.g. Harddisks, CDROMs and RAM areas)
 - (quoting adverb) - forces evaluation of escape sequences, short form of ":backslash", included in "", qq and <<>>

=head2 backslash

 - (quoting adverb) - forces evaluation of escape sequences, long form of ":b", included in "", qq and <<>>

=head2 before

 - comparison operator used by the Order class, true when left should precede right

=head2 break

 - leave this when clause now

=head2 but

 - alters properties of a variable at run time

=head2 by

 - sets interval for the range (..) operator

=head2 bytes

 (scalar sring method) - returns number of bytes used (a sort of length)
 - (regex modifier) - searching on byte level, (see also chars, codes, graphs)

=head2 c

 - (filetest op) - file is a character special file (e.g. terminals modems)
 - (quoting adverb) - forces evaluation of closures (blocks aka { ... }) inside quotes, long form of ":closure", included in "", qq and <<>>
(<n>) - (regex modifier) - searching from nth (n is an int) position (counting from 0) and then going to the right, short for ":continue"

=head2 cached

 (sub trait) - marks memoized routines, or at least memoizable

=head2 call

 - execute a subroutine

=head2 caller

 - object describing the code from which as routine was invoked

=head2 callwith

 - submethode by which one can call a sub with a different signature

=head2 capitalize

 - alias to ucirst(lc($_)), makes first char of every word upper case, rest lowercase

=head2 cat

 - concatenes strings, synonym for '~' and array method

=head2 category

 (grammatical category) - namespace of grammatical categories, in case you want to create a new one with a macro

=head2 chars

 (scalar string method) - returns number of characters  
 - (regex modifier) - searching on character level (default), (see also bytes, codes, graphs)

=head2 chdir

 - changes the current working directory ($*CWD)

=head2 chmod

 - changes access rights of files

=head2 chomp

 (scalar method) - returns a string with the last newline (if there is one) removed

=head2 chop

 (scalar method) - returns a string with the last character removed

=head2 chown

 - changes owner of files

=head2 circumfix

 (grammatical category) - operator namespace of ops, that stay after one statement or variable, but do surround a second (like braces in $a[2])

=head2 class

 (block modifier) - declares a collection of methods that define an object

=head2 classify

 (array op) - special form of map, to sort several arrays

=head2 close

 - methode on Filehandle class, ending the connection with a file

=head2 closure

 - (quoting adverb) - forces evaluation of closures (blocks aka { ... }) inside quotes, long form of ":c", included in "", qq and <<>>

=head2 cmp

 (scalar comp op) - compares values textually, gives results -1(lower than), 0 (equal), 1 (greater than), using the Order class

=head2 code

 - (quoting adverb) - quasi quoting, the commented will be compiles and the AST will be returned as result, see also: quasi

=head2 codes

 - (regex modifier) - searching on codepoint level (between codepoints), (see also bytes, chars, graphs)

=head2 comb

 (array method) - takes another array as parameter and produces cross product of two arrays (like X operator), eg 1,2 X 3,4 == 1,3,1,4,2,3,2,4

=head2 constant

 (var trait) - makes so declared var (is constant) a real constant

=head2 contend

 (block modifier) - marks a block as atomic, concurrent proceses have to wait

=head2 continue

 (flow control) - makes execution in a 'given' also try the following 'when' clauses
(<n>) - (regex modifier) - searching from nth (n is an int) position (counting from 0) and then going to the right, short for ":c"

=head2 d

 - (filetest op) - check if file is a directory

=head2 default

 - the clause executed in a given construct if no when clause matched

=head2 defer

 (block modifier) -

=head2 defined

 - scalar method tests whether a value has been assigned to a variable

=head2 delete

 - removes a key and value from a hash

=head2 dim

 - array dimensioning

=head2 div

 - division, creates fraction objects in Integer context

=head2 do

 - executes a block (do once loop)

=head2 does

 - checks if an objekt inherits this role

=head2 double

 - (quoting adverb) - double quoting, "q" with interpolation of variables, alias to "...", qq /.../ and Q :s, :a, :h, :f, :c, :b /.../, long for ":qq"

=head2 e

 - (filetest op) - tests if file exists

=head2 elems

 (array method) - returns number of elements

=head2 else

 - introduces the alternative block after an 'if' or 'elsif'

=head2 elsif

 - alternative if clause

=head2 eq

 - equal, string comparison

=head2 equiv

 (sub trait) - defines the relative precedence of an operator as equivalent of an other (given as Parameter)

=head2 eqv

 - compares the dynamic state of objects and values, in contrast with static ===

=head2 err

 (logical operator) - returns the first defined value from the left

=head2 ex

 - (regex modifier) - searching at all positions as long as it findes something (with backtracking), short for ":exhaustive"

=head2 exec

 - (quoting adverb) - quoted string will be executed and replaced with its result, alias to Q :x and qx //

=head2 exhaustive

 - (regex modifier) - searching at all positions as long as it findes something (with backtracking), long for ":ex"

=head2 exists

 - checks for existence of a variable or hash member, scalar method

=head2 f

 - (filetest op) - file is a plain file (no socket or dir, ...etc.)
 - (quoting adverb) - demands evaluation of functions (subs and methods), that start with "&" and replacing them with the result, long form of ":function", included in "", qq and <<>>

=head2 false

 - boolean value aka Bool::False

=head2 ff

 - flip flop operator in the style of awk, formerly .. in scalar context

=head2 fff

 - flip flop operator in the style of sed, formerly ... in scalar context

=head2 flip

 (scalar string op) - revers strings on character level

=head2 fmt

 - method on a scalar, takes a format specifier returns a string, simplified sprintf

=head2 for

 (block modifier) - iterates over a list

=head2 function

 - (quoting adverb) - demands evaluation of functions (subs and methods), that start with "&" and replacing them with the result, long form of ":f", included in "", qq and <<>>

=head2 g

 - (filetest op) - report if file has setgid bit set
 - (regex modifier) - searching for any finding (not just the first), short for :global

=head2 gather

 (block modifier) - performs the following block once, returns a list of all values passed by 'take'

=head2 ge

 - greater than on equal, string comparison

=head2 get

 (handle method) - returns a line (scalar context) or all lines (array context) from that input stream

=head2 given

 - case construct puts a value into the context variable for when clauses

=head2 global

 - (regex modifier) - searching for any finding (not just the first), long for :g

=head2 goto

 (flow control) - transfer execution to a defined label

=head2 grammar

 - special kind of class to hold regex token and rule definitions

=head2 graphs

 - (regex modifier) - searching on the level of language-independent graphemes, (see also bytes, chars, codes)

=head2 group

 -

=head2 gt

 - greater than or equal, string comparison

=head2 h

 - (quoting adverb) - demands evaluation of hash variables, long form of ":hash", included in "", qq and <<>>

=head2 handles

 - delegates execution of a function to another method

=head2 has

 - creates an attribute for an object

=head2 hash

 - sets hash-list context
 - (quoting adverb) - demands evaluation of hash variables, long form of ":h", included in "", qq and <<>>

=head2 heredoc

 - (quoting adverb) - defines end marker for the following heredoc, :heredoc is equal to :to

=head2 i

 - (regex modifier) - uppercase and lowercase variants of a letter are taken as the same letter, short for ":ignorecase" (same as in Perl 5)

=head2 if

 (block modifier) - flow control conditional statement or block modifier, executes code only when a condition expression evaluates to true

=head2 ignoreaccent

 - (regex modifier) - no distinction between same chars with or without accent (funny symbols above), short for ":a"

=head2 ignorecase

 - (regex modifier) - uppercase and lowercase variants of a letter are taken as the same letter, long for ":i" (same as in Perl 5)

=head2 ii

 - (regex modifier) - only for substitutions, replacing with chars that have the same case pattern as the replaced, short for ":samecase"

=head2 index

 - finds the first occurrence of a substring from a position in a string

=head2 infix

 (grammatical category) - operator namespace of ops, that are surrounded by whitespace (\w) between 2 vars or statements ($a + $b)

=head2 inline

 (sub trait) -

=head2 int

 - extract a whole number value, discarding fractional part

=head2 invert

 (hash method) - inverts the key => value relation of pairs and hashes

=head2 is

 - bind a traits to a variable

=head2 join

 (array method & op) - concatenates list elements into a string, optionally inserting another string between the elements

=head2 k

 - (filetest op) - report if file has sticky bit set

=head2 keepall

 - (regex modifier) - forces subrules to memorize everything (even comments)

=head2 key

 (pair method) - gives the key part of a pair

=head2 keys

 (hash method) - returns list of hash keys

=head2 kv

 (hash method) - returns list of key-value pairs

=head2 l

 - (filetest op) - file is a symbolic link

=head2 last

 (flow control) - end the current looping block
 (array method) - number of final element

=head2 lc

 (scalar string op & method) - make string lowercase

=head2 lcfirst

 (scalar string op & method) - make first char of a string lowercase

=head2 le

 (comparison op) - lower than or equal, string comparison

=head2 leave

 (flow control) - exit the current block

=head2 leg

 (comparison op) - lower/equal/greater comparator for text

=head2 let

 - changes value of a variable temporary, it will be set back if the current block exits unsuccessfully

=head2 lines

 (handle method) - returns an iterator over all lines of that input stream, for lazy retrieval

=head2 loop

 (block modifier) - general flow control command for repetition

=head2 looser

 (sub trait) - defines relative precedence of an operator as lesser than another (given as Parameter)

=head2 lt

 (string comparison op) - lower than, string comparison

=head2 m

 - (regex quoting op) - perform a regex based search in place ( stands for match ), similar to rx (quote regex op)

=head2 macro

 - define a routine to alter source code at compile time

=head2 map

 - take a list, perform a block on each member, return a list of the results Arraymethode

=head2 match

 - compare a string to a regex/token/rule, alias to smartmatch operator (~~)

=head2 max

 (list op) - returns the numerically largest value from a given list

=head2 maybe

 (block modifier) -

=head2 method

 - defines a method in a class

=head2 min

 - returns the numerically smallest value from a given list

=head2 minmax

 - returns the highest and lowest values from a list, as a 2 item list

=head2 mm

 - (regex quoting op) - perform a regex based search in place, spaces are just subrule separators, alias to m:sigspace /.../

=head2 mod

 (scalar op) - generic modulo operator

=head2 module

 (block modifier) - introduces a module name, a package that performs special actions on loading

=head2 multi

 (routine modifier) - sub and method overloading modifier to allow multimethod dispatch

=head2 my

 (var scope) - makes a variable or routine lexical, therefore exists and is valid only in the current scope (usually a block)

=head2 new

 - creates a new object of a class, also name of the automatically called constructor method

=head2 next

 (flow control) - looping command to go to the start of the following iteration

=head2 none

 - return true when a value is not part of a set, junctive NOT operator

=head2 not

 - logical NOT operator, negates truth value, alternative to ! with lower precedence

=head2 o

 - (filetest op) - tests if file is owned by effective uid

=head2 of

 (sub trait) - defines return type, eg subset Month of Int where { 1 <= $^a <= 12 }

=head2 one

 - junctive XOR operator

=head2 only

 - subroutine modifier, permits only a routine of the same name

=head2 or

 - logical or operator

=head2 orelse

 - logical OR short circuit operator, transferring an Error code from first to second block/command, if first do not succeed

=head2 our

 (var scope) - makes a variable or subroutine name visible in all the current package

=head2 ov

 - (regex modifier) - searching at all positions just one time (with backtracking), short for ":overlap"

=head2 overlap

 - (regex modifier) - searching at all positions just one time (with backtracking), long for ":ov"

=head2 p

 (filetest op) - file is a named pipe (FIFO), or filehandle is a pipe
(<n>) - (regex modifier) - searching only on the nth (n is an int) position (counting from 0), short for ":pos"

=head2 p5=>

 (array op) - hash constructor, that works like in Perl 5, generates just a list that can converted in hash context to an hash

=head2 package

 (block modifier) - defines this Block or File as namespace (almost like in Perl 5), some uses are now better to do with "module" and "class"

=head2 pair

 (context op) - force pair context

=head2 pairs

 (hash method) - returns all contents as an array or pairs (key,value)

=head2 panic

 - (regex modifier) - overwriting a possible set :ratchet for all subrules (activates backtracking)

=head2 parsed

 (sub trait) - this macro will be parsed once, it is hygienic, but own and later defined rules can't be applied, opposite of "reparsed"

=head2 perl

 - evaluates the following string or content of the var on which is called this method, functions with "say" like a better Data::Dumper

=head2 pop

 (array op & method) - removes and returns the last element in an array

=head2 pos

(<n>) - (regex modifier) - searching only on the nth (n is an int) position (counting from 0), long for ":p"

=head2 postcircumfix

 (grammatical category) - operator namespace of ops, that stay after one statement or variable, but do surround a second (like braces in $a[2])

=head2 postfix

 (grammatical category) - operator namespace of ops, that stay after a statement or variable (like $a++)

=head2 prefix

 (grammatical category) - operator namespace of ops, that stay before a statement or variable (like ++$a)

=head2 print

 - sends characters to an output stream without adding a newline, see 'say'

=head2 printf

 - formats text and sends it to standard output

=head2 prompt

 - reading a line from $*IN formerly STDIN

=head2 proto

 - predeclaration of subroutine or method

=head2 push

 (array op & method) - adds a list of values to the end of an array

=head2 q

 - (quoting op) - simple quoting (slashes and '), alias to '...' and Q :q /.../ and Q :single /.../
 - (quoting adverb) - simple quoting (slashes and '), alias to '...' and q /.../, short for ":single"

=head2 qq

 - (quoting op) - double quoting, "q" with interpolation of variables, alias to "..." and Q :s, :a, :h, :f, :c, :b /.../ and Q :qq // and Q :double //
 - (quoting adverb) - double quoting, "q" with interpolation of variables, alias to "...", qq /.../ and Q :s, :a, :h, :f, :c, :b /.../, short for ":double"

=head2 quasi

 (block modifier) - quasi quoting, the commented will be compiles and the AST will be returned as result, see also: code

=head2 quote

 (grammatical category) - operator namespace, used to define new quoting ops with a macro

=head2 quote_mod

 (grammatical category) - operator namespace, used to define new quoting adverbs

=head2 quotewords

 - (quoting adverb) - split quoted string on words (on whitespaces) with quote protection (like in shell - '' and "" sourround words), long form of ":quotewords", used in < ... > and << ... >>

=head2 qw

 - (quoting op) - splits result on words (as in P5), alias to Q :q :w //

=head2 qx

 - (quoting op) - execute as command and return results (as in P5), alias to Q :x //

=head2 r

 - (filetest op) - check if file is readable by effective uid/gid

=head2 rand

 - generate a floating point random number between 0.0 and 1.0

=head2 ratchet

 - (regex modifier) - deactivates backtracking, search starts at pos, where last match ended

=head2 readline

 - now called 'get', reads from an input stream until the next newline

=head2 redo

 - re-starts processing of the current loop

=head2 regex

 - (routine type) - a pattern definition (without :ratchet and :sigspace), can be put in a grammar, similar to qr/.../ in Perl 5
 - (quoting adverb) - parse as quoted string as regex

=head2 reparsed

 (sub trait) - after parsing this macro, it will be reparsed, so that not hygienic, but its own and later defined rules can be applied, opposite of "parsed"

=head2 return

 (flow control) - ends a subroutine and defines the value given to the caller

=head2 returns

 - sub trait describing the type of value produced by a function

=head2 reverse

 (array method) - returns all the members in the opposite order. Use "flip" to turn a string back to front and "invert" for hashes

=head2 rindex

 - finds the last occurrence before a given position, of a substring within a string

=head2 role

 - container for methods that can extend a class using does

=head2 rule

 - alais for "regex :ratchet :sigspace" in a grammar, see regex, token

=head2 rw

 - (Routine Trait) means read/write,
 - (regex modifier) - gives the regex the right to change the string (operand)

=head2 rx

 - (regex quoting op) - creates anonymous regex, that can me then assigned into a var, alias to Q :regex // and regex (block modificator)

=head2 s

 - (filetest op) - returns file size in bytes
 - (quoting adverb) - demands evaluation of scalar variables, long form of ":scalar", included in "", qq and <<>>
 - (regex quoting op) - perform a substitution based on rx-matches in place, creates anonymous regex, alias to Q :subst // and subst (block modificator)
 - (regex modifier) - whitespace separates now subregex and don't stand for spaces to look for, short for ":sigspace", mm// is alias to m:sigspace//

=head2 sameaccent

 - (regex modifier) - only for substitutions, replacing with chars that have the same accent pattern as the replaced, long for ":aa"

=head2 samecase

 - (regex modifier) - only for substitutions, replacing with chars that have the same case pattern as the replaced, long for ":ii"

=head2 samespace

 - (regex modifier) - smart space mapping for substitutions, long for ":ss", ss// is alias to s:samespace///, (ss/teh hsa/the has/;)

=head2 say

 - a function like print that also appends a newline (\n)

=head2 scalar

 - (quoting adverb) - demands evaluation of scalar variables, long form of ":s", included in "", qq and <<>>

=head2 seed

 - initialize a random number generator, optionally with a value

=head2 sigil

 (grammatical category) - word to name the namespace for sigils, used to redifine them or define your own with a macro

=head2 signature

 (sub trait) -

=head2 sigspace

 - (regex modifier) - whitespace separates now subregex and don't stand for spaces to look for, long for for ":s", mm// is alias to m:sigspace//

=head2 single

 - (quoting adverb) - simple quoting (slashes and '), alias to '...' and q /.../, long for ":q"

=head2 slurp

 - reads a entire file into a string

=head2 special_variable

 (grammatical category) - namespace to define and redefine special variables with a macro

=head2 split

 - makes an array of substrings from a string and a separator

=head2 sprintf

 - like printf but returns the string instead of outputting it

=head2 ss

 - (regex quoting op) - performs rx based substitution, spaces are just subrule separators, alias to s:samespace/.../.../
 - (regex modifier) - only for for substitution, whitespace separates subregexes like :sigspace, but also in the second part, short for ":samespace", ss// is alias to s:samespace///, (ss/teh hsa/the has/;)

=head2 state

 - declares variables known only in the enclosing block, that retain their values between invocations

=head2 sub

 (block modifier) - defines a subroutine

=head2 submethod

 (block modifier) - defines methods, not inherited by subclasses

=head2 subset

 - define a subtype, eg subset Month of Int where { 1 <= $^a <= 12 }

=head2 subst

 (quote op) - scalar method to perform substitution, alias to s///
 - (quoting adverb) - parse as substitution

=head2 substr

 - the scalar substring function like in Perl 5

=head2 t

 - (filetest op) - filehandle is opened to a tty (terminal)

=head2 take

 - produces a return value in a gather block

=head2 temp

 - defines variables as temporary, synonym for the Perl 5 "local"

=head2 term

 (grammatical category) - namespace of terms, used to redifine them or make a new with a macro

=head2 tighter

 (sub trait) - defines relative precedence of an operator as higher than another (given as Parameter)

=head2 to

 - (quoting adverb) - defines end marker for the following heredoc, :to is short for :heredoc

=head2 token

 - kind of regex :ratchet (no backtracking), part of a grammar

=head2 tr

 - (quoting op) - transliteration (as in Perl 5), translating some character in a string into others, alias to Q :trans ///

=head2 trans

 - (quoting adverb) - evals the quoted as transliteration aka tr ///

=head2 true

 (term) - converts value into the boolean context, low precedence alternative to "?"
 - boolean value aka Bool::True

=head2 trusts

 - allows a class the acess to otherwised sealed namespaces

=head2 twigil

 (grammatical category) - word to name the namespace for twigils, used to redifine them or define your own with a macro

=head2 u

 - (filetest op) - report if file has setuid bit set

=head2 uc

 - make all string chars uppercase

=head2 ucfirst

 - make first char of a string uppercase

=head2 undef

 - undefined, Perl word for 'empty'

=head2 unless

 (block modifier) - flow control modifier, opposite of if, runs block if expression is false

=head2 until

 (loop block modifier) - opposite of while, runs block repeatedly is long as expression is false

=head2 unwrap

 - remove an enclosing subroutine

=head2 use

 - load a module, import definitions, check Perl version

=head2 value

 (pair method) - gets value (second) value of a pair

=head2 values

 (hash method) - returns an array of just the values

=head2 w

 - (filetest op) - check if file is writeable by effective uid/gid
 - (quoting adverb) - split quoted string on words (on whitespaces), no quote protection, short form of ":words", used in qw//

=head2 want

 - produces a signature object that provides information about the context from which the current routine was called

=head2 when

 (block modifier) - executes its code block if a 'given' value smartmatches

=head2 where

 - defines subtypes of data, eg subset Month of Int where { 1 <= $^a <= 12 }

=head2 while

 (block modifier) - flow control modifier runs block repeatedly as long as en expression is true

=head2 words

 - (quoting adverb) - split quoted string on words (on whitespaces), no quote protection, long form of ":w", used in qw//

=head2 wrap

 - creates enveloping subroutine

=head2 ww

 - (quoting adverb) - split quoted string on words (on whitespaces) with quote protection (like in shell - '' and "" sourround words), short form of ":quotewords", used in < ... > and << ... >>

=head2 x

 - (filetest op) - check if file is executable by effective uid/gid
 (scalar string op) - string replicate operator to single string, eg 'ab' x 3 == 'ababab'
 - (quoting adverb) - quoted string will be executed and replaced with its result, alias to Q :exec and qx //
(<n>) - (regex modifier) - searching n times (n is an int) with this pattern

=head2 xor

 (scalar bool op) - boolean exclusive or operator, only true if only one operand is true

=head2 xx

 (scalar string op) - string replicate operator to array, eg 'ab' xx 3 == <ab ab ab>

=head2 z

 - (filetest op) - tests if file is empty (zero size)

=head2 zip

 (list op) - zip operator, joines 2 lists eg 1,2,3,4 Z 8,9 == 1,8,2,9

=head2 { }

 - circumfix operator: encloses blocks and creates a coderef, or a hashref when it is identified as a hash or contains a '=>'

=head2 |

 (junctive op) - junctive or, requires that a condition is fulfilled
 - (conext op) - dereferences a capture into capture context

=head2 ||

 - logical or, evaluates sequentially, ends evaluation at the first expression that returns true

=head2 ~

 - (conext op), (scalar string op) - forces string context (stringify) and/or concatenate strings, synonym for cat
< - characterwise left shift, forces string context

=head2 ~&

 - characterwise and, forces string context

=head2 ~>

 - characterwise right shift, forces string context

=head2 ~^

 - characterwise xor, forces string context

=head2 ~|

 - characterwise or, forces string context

=head2 ~~

 - smartmatch operator, compares (almost) all data types

