package Padre::Plugin::Debug::FBP::Debugger;

## no critic

# This module was generated by Padre::Plugin::FormBuilder::Perl.
# To change this module edit the original .fbp file and regenerate.
# DO NOT MODIFY THIS FILE BY HAND!

use 5.008;
use strict;
use warnings;
use Padre::Wx ();
use Padre::Wx::Role::Main ();

our $VERSION = '0.13';
our @ISA     = qw{
	Padre::Wx::Role::Main
	Wx::Panel
};

sub new {
	my $class  = shift;
	my $parent = shift;

	my $self = $class->SUPER::new(
		$parent,
		-1,
		Wx::DefaultPosition(),
		[ 195, 530 ],
		Wx::TAB_TRAVERSAL(),
	);

	$self->{debug} = Wx::BitmapButton->new(
		$self,
		-1,
		Wx::NullBitmap(),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::BU_AUTODRAW(),
	);
	$self->{debug}->SetToolTip(
		Wx::gettext("Run Debug\nBLUE MORPHO CATERPILLAR \ncool bug")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{debug},
		sub {
			shift->on_debug_clicked(@_);
		},
	);

	$self->{step_in} = Wx::BitmapButton->new(
		$self,
		-1,
		Wx::NullBitmap(),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::BU_AUTODRAW() | Wx::NO_BORDER(),
	);
	$self->{step_in}->SetToolTip(
		Wx::gettext("s [expr]\nSingle step. Executes until the beginning of another statement, descending into subroutine calls. If an expression is supplied that includes function calls, it too will be single-stepped.")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{step_in},
		sub {
			shift->step_in_clicked(@_);
		},
	);

	$self->{step_over} = Wx::BitmapButton->new(
		$self,
		-1,
		Wx::NullBitmap(),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::BU_AUTODRAW() | Wx::NO_BORDER(),
	);
	$self->{step_over}->SetToolTip(
		Wx::gettext("n [expr]\nNext. Executes over subroutine calls, until the beginning of the next statement. If an expression is supplied that includes function calls, those functions will be executed with stops before each statement.")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{step_over},
		sub {
			shift->step_over_clicked(@_);
		},
	);

	$self->{step_out} = Wx::BitmapButton->new(
		$self,
		-1,
		Wx::NullBitmap(),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::BU_AUTODRAW() | Wx::NO_BORDER(),
	);
	$self->{step_out}->SetToolTip(
		Wx::gettext("r\nContinue until the return from the current subroutine. Dump the return value if the PrintRet option is set (default).")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{step_out},
		sub {
			shift->step_out_clicked(@_);
		},
	);

	$self->{run_till} = Wx::BitmapButton->new(
		$self,
		-1,
		Wx::NullBitmap(),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::BU_AUTODRAW() | Wx::NO_BORDER(),
	);
	$self->{run_till}->SetToolTip(
		Wx::gettext("c [line|sub]\nContinue, optionally inserting a one-time-only breakpoint at the specified line or subroutine.")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{run_till},
		sub {
			shift->run_till_clicked(@_);
		},
	);

	$self->{display_value} = Wx::BitmapButton->new(
		$self,
		-1,
		Wx::NullBitmap(),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::BU_AUTODRAW() | Wx::NO_BORDER(),
	);
	$self->{display_value}->SetToolTip(
		Wx::gettext("Display Value")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{display_value},
		sub {
			shift->display_value_clicked(@_);
		},
	);

	$self->{quit_debugger} = Wx::BitmapButton->new(
		$self,
		-1,
		Wx::NullBitmap(),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::BU_AUTODRAW() | Wx::NO_BORDER(),
	);
	$self->{quit_debugger}->SetToolTip(
		Wx::gettext("Quit Debugger")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{quit_debugger},
		sub {
			shift->quit_debugger_clicked(@_);
		},
	);

	$self->{variables} = Wx::ListCtrl->new(
		$self,
		-1,
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
		Wx::LC_REPORT() | Wx::LC_SINGLE_SEL(),
	);
	$self->{variables}->SetMinSize( Wx::DefaultSize() );

	$self->{show_local_variables} = Wx::CheckBox->new(
		$self,
		-1,
		Wx::gettext("Show Local Variables (y 0)"),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
	);
	$self->{show_local_variables}->SetToolTip(
		Wx::gettext("y [level [vars]]\nDisplay all (or some) lexical variables (mnemonic: mY variables) in the current scope or level scopes higher. You can limit the variables that you see with vars which works exactly as it does for the V and X commands. Requires the PadWalker module version 0.08 or higher; will warn if this isn't installed. Output is pretty-printed in the same style as for V and the format is controlled by the same options.")
	);

	Wx::Event::EVT_CHECKBOX(
		$self,
		$self->{show_local_variables},
		sub {
			shift->show_local_variables_checked(@_);
		},
	);

	$self->{show_global_variables} = Wx::CheckBox->new(
		$self,
		-1,
		Wx::gettext("Show Global Variables"),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
	);
	$self->{show_global_variables}->SetToolTip(
		Wx::gettext("Intermitent Error, You can't FIRSTKEY with the %~ hash")
	);

	Wx::Event::EVT_CHECKBOX(
		$self,
		$self->{show_global_variables},
		sub {
			shift->show_global_variables_checked(@_);
		},
	);

	$self->{trace} = Wx::CheckBox->new(
		$self,
		-1,
		Wx::gettext("Trace"),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
	);
	$self->{trace}->SetToolTip(
		Wx::gettext("t\nToggle trace mode (see also the AutoTrace option).")
	);

	Wx::Event::EVT_CHECKBOX(
		$self,
		$self->{trace},
		sub {
			shift->trace_checked(@_);
		},
	);

	$self->{show_buffer} = Wx::Button->new(
		$self,
		-1,
		Wx::gettext("Show Buffer"),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{show_buffer},
		sub {
			shift->show_buffer_clicked(@_);
		},
	);

	$self->{sub_names} = Wx::Button->new(
		$self,
		-1,
		Wx::gettext("Sub. Names"),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
	);
	$self->{sub_names}->SetToolTip(
		Wx::gettext("S [[!]regex]\nList subroutine names [not] matching the regex.")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{sub_names},
		sub {
			shift->sub_names_clicked(@_);
		},
	);

	$self->{sub_name_regex} = Wx::TextCtrl->new(
		$self,
		-1,
		"!(IO::Socket|Carp)",
		Wx::DefaultPosition(),
		[ 130, -1 ],
	);
	$self->{sub_name_regex}->SetToolTip(
		Wx::gettext("!(IO::Socket|Carp) are the subs used by Debug::Client, hence lets remove them")
	);

	$self->{backtrace} = Wx::Button->new(
		$self,
		-1,
		Wx::gettext("BackTrace"),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
	);
	$self->{backtrace}->SetToolTip(
		Wx::gettext("T\nProduce a stack backtrace.")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{backtrace},
		sub {
			shift->backtrace_clicked(@_);
		},
	);

	$self->{list_actions} = Wx::Button->new(
		$self,
		-1,
		Wx::gettext("List Actions"),
		Wx::DefaultPosition(),
		Wx::DefaultSize(),
	);
	$self->{list_actions}->SetToolTip(
		Wx::gettext("L [abw]\nList (default all) actions, breakpoints and watch expressions")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{list_actions},
		sub {
			shift->list_actions_clicked(@_);
		},
	);

	my $button_sizer = Wx::BoxSizer->new(Wx::HORIZONTAL());
	$button_sizer->Add( $self->{debug}, 0, Wx::ALL(), 1 );
	$button_sizer->Add( $self->{step_in}, 0, Wx::ALL(), 5 );
	$button_sizer->Add( $self->{step_over}, 0, Wx::ALL(), 5 );
	$button_sizer->Add( $self->{step_out}, 0, Wx::ALL(), 5 );
	$button_sizer->Add( $self->{run_till}, 0, Wx::ALL(), 5 );
	$button_sizer->Add( $self->{display_value}, 0, Wx::ALL(), 5 );
	$button_sizer->Add( $self->{quit_debugger}, 0, Wx::ALL(), 5 );

	my $checkbox_sizer = Wx::StaticBoxSizer->new(
		Wx::StaticBox->new(
			$self,
			-1,
			Wx::gettext("Show"),
		),
		Wx::VERTICAL(),
	);
	$checkbox_sizer->Add( $self->{show_local_variables}, 0, Wx::ALL(), 2 );
	$checkbox_sizer->Add( $self->{show_global_variables}, 0, Wx::ALL(), 5 );

	my $gSizer1 = Wx::GridSizer->new( 0, 2, 0, 0 );
	$gSizer1->Add( $self->{trace}, 0, Wx::ALL(), 5 );
	$gSizer1->Add( $self->{show_buffer}, 0, Wx::ALL(), 5 );
	$gSizer1->Add( $self->{sub_names}, 0, Wx::ALL(), 5 );
	$gSizer1->Add( $self->{sub_name_regex}, 0, Wx::ALL(), 5 );
	$gSizer1->Add( $self->{backtrace}, 0, Wx::ALL(), 5 );
	$gSizer1->Add( $self->{list_actions}, 0, Wx::ALL(), 5 );

	my $file_11 = Wx::StaticBoxSizer->new(
		Wx::StaticBox->new(
			$self,
			-1,
			Wx::gettext("Debug-Output Options"),
		),
		Wx::HORIZONTAL(),
	);
	$file_11->Add( $gSizer1, 0, Wx::EXPAND(), 5 );

	my $bSizer10 = Wx::BoxSizer->new(Wx::VERTICAL());
	$bSizer10->Add( $button_sizer, 0, Wx::EXPAND(), 5 );
	$bSizer10->Add( $self->{variables}, 1, Wx::ALL() | Wx::EXPAND(), 5 );
	$bSizer10->Add( $checkbox_sizer, 0, Wx::EXPAND(), 5 );
	$bSizer10->Add( $file_11, 0, Wx::EXPAND(), 5 );

	$self->SetSizer($bSizer10);
	$self->Layout;

	return $self;
}

sub trace {
	$_[0]->{trace};
}

sub sub_name_regex {
	$_[0]->{sub_name_regex};
}

sub on_debug_clicked {
	$_[0]->main->error('Handler method on_debug_clicked for event debug.OnButtonClick not implemented');
}

sub step_in_clicked {
	$_[0]->main->error('Handler method step_in_clicked for event step_in.OnButtonClick not implemented');
}

sub step_over_clicked {
	$_[0]->main->error('Handler method step_over_clicked for event step_over.OnButtonClick not implemented');
}

sub step_out_clicked {
	$_[0]->main->error('Handler method step_out_clicked for event step_out.OnButtonClick not implemented');
}

sub run_till_clicked {
	$_[0]->main->error('Handler method run_till_clicked for event run_till.OnButtonClick not implemented');
}

sub display_value_clicked {
	$_[0]->main->error('Handler method display_value_clicked for event display_value.OnButtonClick not implemented');
}

sub quit_debugger_clicked {
	$_[0]->main->error('Handler method quit_debugger_clicked for event quit_debugger.OnButtonClick not implemented');
}

sub show_local_variables_checked {
	$_[0]->main->error('Handler method show_local_variables_checked for event show_local_variables.OnCheckBox not implemented');
}

sub show_global_variables_checked {
	$_[0]->main->error('Handler method show_global_variables_checked for event show_global_variables.OnCheckBox not implemented');
}

sub trace_checked {
	$_[0]->main->error('Handler method trace_checked for event trace.OnCheckBox not implemented');
}

sub show_buffer_clicked {
	$_[0]->main->error('Handler method show_buffer_clicked for event show_buffer.OnButtonClick not implemented');
}

sub sub_names_clicked {
	$_[0]->main->error('Handler method sub_names_clicked for event sub_names.OnButtonClick not implemented');
}

sub backtrace_clicked {
	$_[0]->main->error('Handler method backtrace_clicked for event backtrace.OnButtonClick not implemented');
}

sub list_actions_clicked {
	$_[0]->main->error('Handler method list_actions_clicked for event list_actions.OnButtonClick not implemented');
}

1;

# Copyright 2008-2011 The Padre development team as listed in Padre.pm.
# LICENSE
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5 itself.

