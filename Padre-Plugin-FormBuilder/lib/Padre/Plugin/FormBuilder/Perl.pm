package Padre::Plugin::FormBuilder::Perl;

=pod

=head1 NAME

Padre::Plugin::FormBuilder::Perl - wxFormBuilder to Padre dialog code generator

=head1 SYNOPSIS

  my $generator = Padre::Plugin::FormBuilder::Perl->new(
      dialog => $fbp_object->dialog('MyDialog')
  );

=head1 DESCRIPTION

This is a L<Padre>-specific variant of L<FBP::Perl>.

It overloads various methods to make things work in a more Padre-specific way.

=cut

use 5.008005;
use strict;
use warnings;
use Scalar::Util ();
use Mouse 0.61;

our $VERSION = '0.02';

extends 'FBP::Perl';

has version => (
	is       => 'ro',
	isa      => 'Str',
	required => 1,
	default  => '0.01',
);





######################################################################
# Dialog Generators

sub dialog_class {
	my $self    = shift;
	my $name    = shift;
	my $package = shift;
	my $code    = $self->SUPER::dialog_class($name);

	# Customise the package name if requested
	if ( $package ) {
		splice( @$code, 0, 1, "package $package;" );
	}

	# Prepend an auto-generated "Don't Modify" warning
	my $class = Scalar::Util::blessed($self);
	splice(
		@$code, 1, 0,
		"",
		"# This module was generated by $class.",
		"# To change this module, edit the original .fbp file and regenerate.",
		"# DO NOT MODIFY BY HAND!",
	);

	# Append the copywrite statement that Debian/etc need
	push @$code, <<'END_PERL';

# Copyright 2008-2011 The Padre development team as listed in Padre.pm.
# LICENSE
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5 itself.
END_PERL

	return $code;
}

sub dialog_version {
	my $self    = shift;
	my $dialog  = shift;
	my $version = $self->version;

	return [
		"our \$VERSION = '$version';",
	];
}

sub dialog_isa {
	my $self   = shift;
	my $dialog = shift;

	return $self->nested(
		"our \@ISA     = qw{",
		"Padre::Wx::Role::Main",
		"Wx::Dialog",
		"};",
	);
}

sub use_wx {
	my $self   = shift;
	my $dialog = shift;
	return [
		"use Padre::Wx ();",
		"use Padre::Wx::Role::Main ();",
	];
}

sub window_event {
	my $self   = shift;
	my $window = shift;
	my $event  = shift;
	my $name   = $window->name;
	my $method = $window->$event();

	return $self->nested(
		"sub $method {",
		"\$_[0]->main->error('Handler method $method for event $name.$event not implemented');",
		"}",
	);
}

1;

=pod

=head1 SUPPORT

Bugs should be reported via the CPAN bug tracker at

L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Padre-Plugin-FormBuilder>

For other issues, or commercial enhancement or support, contact the author.

=head1 AUTHOR

Adam Kennedy E<lt>adamk@cpan.orgE<gt>

=head1 SEE ALSO

L<Padre>

=head1 COPYRIGHT

Copyright 2010 Adam Kennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

=cut
